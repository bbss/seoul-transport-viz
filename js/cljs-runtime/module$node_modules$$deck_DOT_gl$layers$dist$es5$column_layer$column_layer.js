shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$column_layer$column_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=
global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_core2=require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_columnGeometry=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$column_layer$column_geometry")),
_columnLayerVertex=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$column_layer$column_layer_vertex_glsl")),_columnLayerFragment=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$column_layer$column_layer_fragment_glsl")),DEFAULT_COLOR=[0,0,0,255];require={diskResolution:{type:"number",min:4,value:20},vertices:null,radius:{type:"number",min:0,value:1E3},angle:{type:"number",value:0},offset:{type:"array",value:[0,0]},coverage:{type:"number",min:0,max:1,value:1},elevationScale:{type:"number",
min:0,value:1},lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,extruded:!0,wireframe:!1,filled:!0,stroked:!1,getPosition:{type:"accessor",value:function(x){return x.position}},getFillColor:{type:"accessor",value:DEFAULT_COLOR},getLineColor:{type:"accessor",value:DEFAULT_COLOR},getLineWidth:{type:"accessor",value:1},getElevation:{type:"accessor",value:1E3},material:!0,getColor:{deprecatedFor:["getFillColor","getLineColor"]}};global=function(_Layer){function ColumnLayer(){(0,
_classCallCheck2["default"])(this,ColumnLayer);return(0,_possibleConstructorReturn2["default"])(this,(0,_getPrototypeOf2["default"])(ColumnLayer).apply(this,arguments))}(0,_inherits2["default"])(ColumnLayer,_Layer);(0,_createClass2["default"])(ColumnLayer,[{key:"getShaders",value:function(){return(0,_get2["default"])((0,_getPrototypeOf2["default"])(ColumnLayer.prototype),"getShaders",this).call(this,{vs:_columnLayerVertex["default"],fs:_columnLayerFragment["default"],modules:[_core.project32,_core.gouraudLighting,
_core.picking]})}},{key:"initializeState",value:function(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceElevations:{size:1,transition:!0,accessor:"getElevation"},instanceFillColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,transition:!0,accessor:"getFillColor",defaultValue:DEFAULT_COLOR},instanceLineColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,transition:!0,
accessor:"getLineColor",defaultValue:DEFAULT_COLOR},instanceStrokeWidths:{size:1,accessor:"getLineWidth",transition:!0}})}},{key:"updateState",value:function(_ref){var props=_ref.props,oldProps=_ref.oldProps;_ref=_ref.changeFlags;(0,_get2["default"])((0,_getPrototypeOf2["default"])(ColumnLayer.prototype),"updateState",this).call(this,{props:props,oldProps:oldProps,changeFlags:_ref});if(_ref=_ref.extensionsChanged){var gl=this.context.gl;if(this.state.model)this.state.model["delete"]();this.setState({model:this._getModel(gl)});
this.getAttributeManager().invalidateAll()}(_ref||props.diskResolution!==oldProps.diskResolution||props.vertices!==oldProps.vertices)&&this._updateGeometry(props)}},{key:"getGeometry",value:function(diskResolution,vertices){var geometry=new _columnGeometry["default"]({radius:1,height:2,vertices:vertices,nradial:diskResolution}),meanVertexDistance=0;if(vertices)for(var i=0;i<diskResolution;i++){var p=vertices[i];meanVertexDistance+=Math.sqrt(p[0]*p[0]+p[1]*p[1])/diskResolution}else meanVertexDistance=
1;this.setState({edgeDistance:Math.cos(Math.PI/diskResolution)*meanVertexDistance});return geometry}},{key:"_getModel",value:function(gl){return new _core2.Model(gl,Object.assign({},this.getShaders(),{id:this.props.id,isInstanced:!0}))}},{key:"_updateGeometry",value:function(_ref2){_ref2=this.getGeometry(_ref2.diskResolution,_ref2.vertices);this.setState({fillVertexCount:_ref2.attributes.POSITION.value.length/3,wireframeVertexCount:_ref2.indices.value.length});this.state.model.setProps({geometry:_ref2})}},
{key:"draw",value:function(_ref3){var viewport=this.context.viewport,_this$props=this.props,extruded=_this$props.extruded,filled=_this$props.filled,stroked=_this$props.stroked,wireframe=_this$props.wireframe,_this$state=this.state,model=_this$state.model,fillVertexCount=_this$state.fillVertexCount,wireframeVertexCount=_this$state.wireframeVertexCount;model.setUniforms(Object.assign({},_ref3.uniforms,{radius:_this$props.radius,angle:_this$props.angle/180*Math.PI,offset:_this$props.offset,extruded:extruded,
coverage:_this$props.coverage,elevationScale:_this$props.elevationScale,edgeDistance:_this$state.edgeDistance,widthScale:_this$props.lineWidthScale*("pixels"===_this$props.lineWidthUnits?viewport.metersPerPixel:1),widthMinPixels:_this$props.lineWidthMinPixels,widthMaxPixels:_this$props.lineWidthMaxPixels}));extruded&&wireframe&&(model.setProps({isIndexed:!0}),model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({isStroke:!0}).draw());filled&&(model.setProps({isIndexed:!1}),model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({isStroke:!1}).draw());
!extruded&&stroked&&(model.setProps({isIndexed:!1}),model.setVertexCount(2*fillVertexCount/3).setDrawMode(5).setUniforms({isStroke:!0}).draw())}}]);return ColumnLayer}(_core.Layer);exports["default"]=global;global.layerName="ColumnLayer";global.defaultProps=require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$column_layer$column_layer.js.map
