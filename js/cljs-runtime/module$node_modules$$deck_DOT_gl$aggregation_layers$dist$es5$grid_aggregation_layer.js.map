{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$grid_aggregation_layer.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/grid-aggregation-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$grid_aggregation_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _aggregationLayer = _interopRequireDefault(require(\"./aggregation-layer\"));\n\nvar _gpuGridAggregator = _interopRequireDefault(require(\"./utils/gpu-grid-aggregation/gpu-grid-aggregator\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _binSorter = _interopRequireDefault(require(\"./utils/bin-sorter\"));\n\nvar _gridAggregator = require(\"./cpu-grid-layer/grid-aggregator\");\n\nvar GridAggregationLayer = function (_AggregationLayer) {\n  (0, _inherits2[\"default\"])(GridAggregationLayer, _AggregationLayer);\n\n  function GridAggregationLayer() {\n    (0, _classCallCheck2[\"default\"])(this, GridAggregationLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(GridAggregationLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(GridAggregationLayer, [{\n    key: \"initializeState\",\n    value: function initializeState(_ref) {\n      var dimensions = _ref.dimensions;\n      var gl = this.context.gl;\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GridAggregationLayer.prototype), \"initializeState\", this).call(this, dimensions);\n      this.setState({\n        layerData: {},\n        gpuGridAggregator: new _gpuGridAggregator[\"default\"](gl, {\n          id: \"\".concat(this.id, \"-gpu-aggregator\")\n        }),\n        cpuGridAggregator: _gridAggregator.pointToDensityGridDataCPU\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GridAggregationLayer.prototype), \"updateState\", this).call(this, opts);\n      this.updateAggregationState(opts);\n      var _this$state = this.state,\n          aggregationDataDirty = _this$state.aggregationDataDirty,\n          aggregationWeightsDirty = _this$state.aggregationWeightsDirty,\n          gpuAggregation = _this$state.gpuAggregation;\n\n      if (this.getNumInstances() <= 0) {\n        return;\n      }\n\n      var aggregationDirty = false;\n\n      if (aggregationDataDirty || gpuAggregation && aggregationWeightsDirty) {\n        this._updateAggregation(opts);\n\n        aggregationDirty = true;\n      }\n\n      if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n        this._updateWeightBins();\n\n        this._uploadAggregationResults();\n\n        aggregationDirty = true;\n      }\n\n      this.setState({\n        aggregationDirty: aggregationDirty\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var count = this.state.weights.count;\n\n      if (count && count.aggregationBuffer) {\n        count.aggregationBuffer[\"delete\"]();\n      }\n\n      var gpuGridAggregator = this.state.gpuGridAggregator;\n\n      if (gpuGridAggregator) {\n        gpuGridAggregator[\"delete\"]();\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GridAggregationLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaders) {\n      if (this.state.gpuAggregation) {\n        this.state.gpuGridAggregator.updateShaders(shaders);\n      }\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      _core2.log.assert(false);\n    }\n  }, {\n    key: \"allocateResources\",\n    value: function allocateResources(numRow, numCol) {\n      if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n        var dataBytes = numCol * numRow * 4 * 4;\n        var gl = this.context.gl;\n        var weights = this.state.weights;\n\n        for (var name in weights) {\n          var weight = weights[name];\n\n          if (weight.aggregationBuffer) {\n            weight.aggregationBuffer[\"delete\"]();\n          }\n\n          weight.aggregationBuffer = new _core.Buffer(gl, {\n            byteLength: dataBytes,\n            accessor: {\n              size: 4,\n              type: 5126,\n              divisor: 1\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref2) {\n      var aggregationData = _ref2.aggregationData,\n          maxMinData = _ref2.maxMinData,\n          maxData = _ref2.maxData,\n          minData = _ref2.minData;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = aggregationData;\n        count.maxMinData = maxMinData;\n        count.maxData = maxData;\n        count.minData = minData;\n      }\n    }\n  }, {\n    key: \"_updateAggregation\",\n    value: function _updateAggregation(opts) {\n      var _this$state2 = this.state,\n          cpuGridAggregator = _this$state2.cpuGridAggregator,\n          gpuGridAggregator = _this$state2.gpuGridAggregator,\n          gridOffset = _this$state2.gridOffset,\n          posOffset = _this$state2.posOffset,\n          _this$state2$translat = _this$state2.translation,\n          translation = _this$state2$translat === void 0 ? [0, 0] : _this$state2$translat,\n          _this$state2$scaling = _this$state2.scaling,\n          scaling = _this$state2$scaling === void 0 ? [0, 0, 0] : _this$state2$scaling,\n          boundingBox = _this$state2.boundingBox,\n          projectPoints = _this$state2.projectPoints,\n          gpuAggregation = _this$state2.gpuAggregation,\n          numCol = _this$state2.numCol,\n          numRow = _this$state2.numRow;\n      var props = opts.props;\n      var viewport = this.context.viewport;\n      var attributes = this.getAttributes();\n      var vertexCount = this.getNumInstances();\n\n      if (!gpuAggregation) {\n        var result = cpuGridAggregator(props, {\n          gridOffset: gridOffset,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          viewport: viewport,\n          posOffset: posOffset,\n          boundingBox: boundingBox\n        });\n        this.setState({\n          layerData: result\n        });\n      } else {\n        var weights = this.state.weights;\n        gpuGridAggregator.run({\n          weights: weights,\n          cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n          numCol: numCol,\n          numRow: numRow,\n          translation: translation,\n          scaling: scaling,\n          vertexCount: vertexCount,\n          projectPoints: projectPoints,\n          attributes: attributes,\n          moduleSettings: this.getModuleSettings()\n        });\n      }\n    }\n  }, {\n    key: \"_updateWeightBins\",\n    value: function _updateWeightBins() {\n      var getValue = this.state.getValue;\n      var sortedBins = new _binSorter[\"default\"](this.state.layerData.data || [], {\n        getValue: getValue\n      });\n      this.setState({\n        sortedBins: sortedBins\n      });\n    }\n  }, {\n    key: \"_uploadAggregationResults\",\n    value: function _uploadAggregationResults() {\n      var _this$state3 = this.state,\n          numCol = _this$state3.numCol,\n          numRow = _this$state3.numRow;\n      var data = this.state.layerData.data;\n      var _this$state$sortedBin = this.state.sortedBins,\n          aggregatedBins = _this$state$sortedBin.aggregatedBins,\n          minValue = _this$state$sortedBin.minValue,\n          maxValue = _this$state$sortedBin.maxValue,\n          totalCount = _this$state$sortedBin.totalCount;\n      var ELEMENTCOUNT = 4;\n      var aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      var aggregationData = new Float32Array(aggregationSize).fill(0);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = aggregatedBins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var bin = _step.value;\n          var _data$bin$i = data[bin.i],\n              lonIdx = _data$bin$i.lonIdx,\n              latIdx = _data$bin$i.latIdx;\n          var value = bin.value,\n              counts = bin.counts;\n          var cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n          aggregationData[cellIndex] = value;\n          aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n      var maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n      var minData = new Float32Array([minValue, 0, 0, totalCount]);\n      this.updateResults({\n        aggregationData: aggregationData,\n        maxMinData: maxMinData,\n        maxData: maxData,\n        minData: minData\n      });\n    }\n  }]);\n  return GridAggregationLayer;\n}(_aggregationLayer[\"default\"]);\n\nexports[\"default\"] = GridAggregationLayer;\nGridAggregationLayer.layerName = 'GridAggregationLayer';\n//# sourceMappingURL=grid-aggregation-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_aggregationLayer","_gpuGridAggregator","_core","_core2","_binSorter","_gridAggregator","GridAggregationLayer","_AggregationLayer","apply","arguments","key","initializeState","_ref","dimensions","gl","context","prototype","call","setState","layerData","gpuGridAggregator","id","concat","cpuGridAggregator","pointToDensityGridDataCPU","updateState","opts","updateAggregationState","_this$state","state","aggregationDataDirty","aggregationWeightsDirty","gpuAggregation","getNumInstances","aggregationDirty","_updateAggregation","_updateWeightBins","_uploadAggregationResults","finalizeState","count","weights","aggregationBuffer","updateShaders","shaders","log","assert","allocateResources","numRow","numCol","dataBytes","name","weight","Buffer","byteLength","accessor","size","type","divisor","updateResults","_ref2","aggregationData","maxMinData","maxData","minData","_this$state2","gridOffset","posOffset","_this$state2$translat","translation","_this$state2$scaling","scaling","boundingBox","projectPoints","props","viewport","attributes","getAttributes","vertexCount","run","cellSize","xOffset","yOffset","moduleSettings","getModuleSettings","result","sortedBins","data","getValue","_this$state3","_this$state$sortedBin","aggregatedBins","minValue","maxValue","totalCount","fill","Float32Array","ELEMENTCOUNT","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","bin","_data$bin$i","i","counts","cellIndex","lonIdx","latIdx","err","layerName"]
}
