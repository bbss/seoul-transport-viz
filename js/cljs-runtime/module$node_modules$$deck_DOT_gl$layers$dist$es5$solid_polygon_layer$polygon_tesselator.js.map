{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$layers$dist$es5$solid_polygon_layer$polygon_tesselator.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/layers/dist/es5/solid-polygon-layer/polygon-tesselator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$layers$dist$es5$solid_polygon_layer$polygon_tesselator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar Polygon = _interopRequireWildcard(require(\"./polygon\"));\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _polygon2 = require(\"@math.gl/polygon\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar PolygonTesselator = function (_Tesselator) {\n  (0, _inherits2[\"default\"])(PolygonTesselator, _Tesselator);\n\n  function PolygonTesselator(opts) {\n    (0, _classCallCheck2[\"default\"])(this, PolygonTesselator);\n    var fp64 = opts.fp64,\n        _opts$IndexType = opts.IndexType,\n        IndexType = _opts$IndexType === void 0 ? Uint32Array : _opts$IndexType;\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(PolygonTesselator).call(this, _objectSpread({}, opts, {\n      attributes: {\n        positions: {\n          size: 3,\n          type: fp64 ? Float64Array : Float32Array\n        },\n        vertexValid: {\n          type: Uint8ClampedArray,\n          size: 1\n        },\n        indices: {\n          type: IndexType,\n          size: 1\n        }\n      }\n    })));\n  }\n\n  (0, _createClass2[\"default\"])(PolygonTesselator, [{\n    key: \"get\",\n    value: function get(attributeName) {\n      var attributes = this.attributes;\n\n      if (attributeName === 'indices') {\n        return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n      }\n\n      return attributes[attributeName];\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(opts) {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(PolygonTesselator.prototype), \"updateGeometry\", this).call(this, opts);\n      var externalIndices = this.buffers.indices;\n\n      if (externalIndices) {\n        this.vertexCount = (externalIndices.value || externalIndices).length;\n      }\n    }\n  }, {\n    key: \"normalizeGeometry\",\n    value: function normalizeGeometry(polygon) {\n      if (this.normalize) {\n        polygon = Polygon.normalize(polygon, this.positionSize);\n\n        if (this.opts.resolution) {\n          return (0, _polygon2.cutPolygonByGrid)(polygon.positions || polygon, polygon.holeIndices, {\n            size: this.positionSize,\n            gridResolution: this.opts.resolution,\n            edgeTypes: true\n          });\n        }\n\n        if (this.opts.wrapLongitude) {\n          return (0, _polygon2.cutPolygonByMercatorBounds)(polygon.positions || polygon, polygon.holeIndices, {\n            size: this.positionSize,\n            maxLatitude: 86,\n            edgeTypes: true\n          });\n        }\n      }\n\n      return polygon;\n    }\n  }, {\n    key: \"getGeometrySize\",\n    value: function getGeometrySize(polygon) {\n      if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n        var size = 0;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = polygon[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var subPolygon = _step.value;\n            size += this.getGeometrySize(subPolygon);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return size;\n      }\n\n      return (polygon.positions || polygon).length / this.positionSize;\n    }\n  }, {\n    key: \"getGeometryFromBuffer\",\n    value: function getGeometryFromBuffer(buffer) {\n      if (this.normalize || !this.buffers.indices) {\n        return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(PolygonTesselator.prototype), \"getGeometryFromBuffer\", this).call(this, buffer);\n      }\n\n      return function () {\n        return null;\n      };\n    }\n  }, {\n    key: \"updateGeometryAttributes\",\n    value: function updateGeometryAttributes(polygon, context) {\n      if (Array.isArray(polygon) && !Number.isFinite(polygon[0])) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = polygon[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var subPolygon = _step2.value;\n            var geometrySize = this.getGeometrySize(subPolygon);\n            context.geometrySize = geometrySize;\n            this.updateGeometryAttributes(subPolygon, context);\n            context.vertexStart += geometrySize;\n            context.indexStart = this.indexStarts[context.geometryIndex + 1];\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } else {\n        this._updateIndices(polygon, context);\n\n        this._updatePositions(polygon, context);\n\n        this._updateVertexValid(polygon, context);\n      }\n    }\n  }, {\n    key: \"_updateIndices\",\n    value: function _updateIndices(polygon, _ref) {\n      var geometryIndex = _ref.geometryIndex,\n          offset = _ref.vertexStart,\n          indexStart = _ref.indexStart;\n      var attributes = this.attributes,\n          indexStarts = this.indexStarts,\n          typedArrayManager = this.typedArrayManager;\n      var target = attributes.indices;\n\n      if (!target) {\n        return;\n      }\n\n      var i = indexStart;\n      var indices = Polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject);\n      target = typedArrayManager.allocate(target, indexStart + indices.length, {\n        copy: true\n      });\n\n      for (var j = 0; j < indices.length; j++) {\n        target[i++] = indices[j] + offset;\n      }\n\n      indexStarts[geometryIndex + 1] = indexStart + indices.length;\n      attributes.indices = target;\n    }\n  }, {\n    key: \"_updatePositions\",\n    value: function _updatePositions(polygon, _ref2) {\n      var vertexStart = _ref2.vertexStart,\n          geometrySize = _ref2.geometrySize;\n      var positions = this.attributes.positions,\n          positionSize = this.positionSize;\n\n      if (!positions) {\n        return;\n      }\n\n      var polygonPositions = polygon.positions || polygon;\n\n      for (var i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n        var x = polygonPositions[j * positionSize];\n        var y = polygonPositions[j * positionSize + 1];\n        var z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n        positions[i * 3] = x;\n        positions[i * 3 + 1] = y;\n        positions[i * 3 + 2] = z;\n      }\n    }\n  }, {\n    key: \"_updateVertexValid\",\n    value: function _updateVertexValid(polygon, _ref3) {\n      var vertexStart = _ref3.vertexStart,\n          geometrySize = _ref3.geometrySize;\n      var vertexValid = this.attributes.vertexValid,\n          positionSize = this.positionSize;\n      var holeIndices = polygon && polygon.holeIndices;\n\n      if (polygon && polygon.edgeTypes) {\n        vertexValid.set(polygon.edgeTypes, vertexStart);\n      } else {\n        vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n      }\n\n      if (holeIndices) {\n        for (var j = 0; j < holeIndices.length; j++) {\n          vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n        }\n      }\n\n      vertexValid[vertexStart + geometrySize - 1] = 0;\n    }\n  }]);\n  return PolygonTesselator;\n}(_core.Tesselator);\n\nexports[\"default\"] = PolygonTesselator;\n//# sourceMappingURL=polygon-tesselator.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","_interopRequireWildcard","_interopRequireDefault","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","Polygon","_core","_polygon2","PolygonTesselator","_Tesselator","opts","fp64","_opts$IndexType","IndexType","Uint32Array","call","attributes","positions","size","type","Float64Array","Float32Array","vertexValid","Uint8ClampedArray","indices","get","attributeName","subarray","vertexCount","updateGeometry","prototype","externalIndices","buffers","normalizeGeometry","polygon","normalize","positionSize","resolution","cutPolygonByGrid","holeIndices","gridResolution","edgeTypes","wrapLongitude","cutPolygonByMercatorBounds","maxLatitude","getGeometrySize","Array","isArray","Number","isFinite","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","err","getGeometryFromBuffer","buffer","updateGeometryAttributes","context","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","subPolygon","geometrySize","vertexStart","indexStart","indexStarts","geometryIndex","_updateIndices","_updatePositions","_updateVertexValid","_ref","offset","typedArrayManager","getSurfaceIndices","preproject","allocate","copy","j","_ref2","polygonPositions","y","z","x","_ref3","set","fill","Tesselator"]
}
