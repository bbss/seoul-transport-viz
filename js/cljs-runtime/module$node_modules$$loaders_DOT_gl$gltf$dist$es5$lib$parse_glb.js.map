{
"version":3,
"file":"module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$parse_glb.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@loaders_DOT_gl/gltf/dist/es5/lib/parse-glb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$loaders_DOT_gl$gltf$dist$es5$lib$parse_glb\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isGLB = isGLB;\nexports[\"default\"] = parseGLBSync;\n\nvar _loaderUtils = require(\"@loaders.gl/loader-utils\");\n\nvar MAGIC_glTF = 0x676c5446;\nvar GLB_FILE_HEADER_SIZE = 12;\nvar GLB_CHUNK_HEADER_SIZE = 8;\nvar GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nvar GLB_CHUNK_TYPE_BIN = 0x004e4942;\nvar GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0;\nvar GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1;\nvar LE = true;\n\nfunction getMagicString(dataView) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}\n\nfunction isGLB(arrayBuffer) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var dataView = new DataView(arrayBuffer);\n  var _options$magic = options.magic,\n      magic = _options$magic === void 0 ? MAGIC_glTF : _options$magic;\n  var magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\n\nfunction parseGLBSync(glb, arrayBuffer) {\n  var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var dataView = new DataView(arrayBuffer);\n  glb.type = getMagicString(dataView, byteOffset + 0);\n  glb.version = dataView.getUint32(byteOffset + 4, LE);\n  var byteLength = dataView.getUint32(byteOffset + 8, LE);\n  glb.header = {\n    byteOffset: byteOffset,\n    byteLength: byteLength\n  };\n  (0, _loaderUtils.assert)(glb.version === 2, \"Invalid GLB version \".concat(glb.version, \". Only supports v2.\"));\n  (0, _loaderUtils.assert)(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n  glb.json = {};\n  glb.binChunks = [];\n  parseGLBChunksSync(glb, dataView, byteOffset + GLB_FILE_HEADER_SIZE, options);\n  return byteOffset + glb.header.byteLength;\n}\n\nfunction parseGLBChunksSync(glb, dataView, byteOffset, options) {\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    var chunkLength = dataView.getUint32(byteOffset + 0, LE);\n    var chunkFormat = dataView.getUint32(byteOffset + 4, LE);\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength, options);\n        break;\n\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength, options);\n        break;\n\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.glb.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength, options);\n        }\n\n        break;\n\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.glb.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength, options);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    byteOffset += (0, _loaderUtils.padTo4Bytes)(chunkLength);\n  }\n\n  return byteOffset;\n}\n\nfunction parseJSONChunk(glb, dataView, byteOffset, chunkLength, options) {\n  var jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n  var textDecoder = new TextDecoder('utf8');\n  var jsonText = textDecoder.decode(jsonChunk);\n  glb.json = JSON.parse(jsonText);\n}\n\nfunction parseBINChunk(glb, dataView, byteOffset, chunkLength, options) {\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset: byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n  });\n}\n//# sourceMappingURL=parse-glb.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getMagicString","dataView","byteOffset","arguments","length","undefined","concat","String","fromCharCode","getUint8","parseJSONChunk","glb","chunkLength","options","jsonChunk","Uint8Array","buffer","jsonText","decode","textDecoder","TextDecoder","json","JSON","parse","parseBINChunk","header","hasBinChunk","binChunks","push","byteLength","arrayBuffer","Object","defineProperty","value","isGLB","DataView","_options$magic","magic","MAGIC_glTF","magic1","getUint32","parseGLBSync","type","version","LE","_loaderUtils","assert","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","chunkFormat","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED","strict","GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED","padTo4Bytes"]
}
