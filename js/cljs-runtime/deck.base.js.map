{"version":3,"sources":["deck/base.cljs"],"mappings":"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","names":["js/console.log","deck.base/mapbox-token","cljs.core.atom","deck.base/active-layers","deck.base/assoc-cljs-data","o","data","goog.object/set","cljs.core/to-array","var_args","G__105290","deck.base/set-tooltip","js/Error","p__105291","vec__105292","cljs.core.nth","p__105295","p__105296","vec__105297","map__105300","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","x","y","label","deck.base.set_tooltip","font-color","tooltip","js/document","el","new-el","deck.base/window-resolve","symbol","p1__105302#","p2__105303#","cljs.core.reduce","helix.core/get-react","helix.impl.props/merge-obj","obj105356","helix.impl.props._native_props","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","p__105304","vec__105305","deck.base/set-hiccup-tooltip","hiccup","js/module$node_modules$react_dom$server_browser.renderToStaticMarkup","deck.base/compile-and-add-layer","layer-props","compiled-layer-props","cljs.core.doall","cljs.core.keep","p__105308","vec__105309","k","v","cognitect.transit/tagged-value?","sci.core.eval_string","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.pr_str","p__105312","map__105313","fp64","filter-size","js/module$node_modules$$deck_DOT_gl$extensions$dist$es5$index.DataFilterExtension","cljs.core.into","uses-functions?","cljs.core/some","p__105315","vec__105316","cljs.core.swap_BANG_","cljs.core/assoc","G__105319","deck.layers/key->class","cljs-bean.core/->js","cljs.core.merge","deck.base/rerender","G__105320","js/deck","js/deck.base","js/deck.base.default-view-state","deck.base/default-view-state","cljs.core/clj->js","goog.object/get","js/module$node_modules$react_dom$index.render","deck.layers/deck","cljs.core/deref","cljs.core/vals","deck.layers/static-map","p__105321","map__105322","deck.base/handler","id","type","payload","command","G__105324","cljs.core/Keyword","cljs.core/reset!","cljs.core/dissoc","deck.base/set-path-value","deck.base/compile","form","p__105325","map__105326","deck.base/compile-layer-props","p__105328","vec__105329","p__105332","map__105333","p__105335","vec__105336","G__105339","G__105340","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","deck.base/embed-component","seq105341","self__4724__auto__","config-or-layers","layers","cljs.core.filter","config","or__4126__auto__","cljs.core/identity","cljs.core/map?","c","cljs.core.map","G__105344","props__83397__auto__","maybe-ref__83398__auto__","vec__105345","helix.core/extract-cljs-props","goog/DEBUG","G__105361","deck.base/deck-component","props","map__105348","use-path-sub","dep-values","p__105349","vec__105350","dep-name","dep-path","view-state","G__105353","data->layers","cljs.core.mapcat","p__105357","vec__105358","layer-type","layer","cljs.core.assoc"],"sourcesContent":["(ns deck.base\n  (:require\n   [deck.layers :refer [key->class]]\n   [\"@deck.gl/extensions\" :refer [DataFilterExtension]]\n   [react :as react]\n   [react-dom :refer [render]]\n   [\"react-dom/server\" :as ReactDOMServer]\n   [goog.object :as gobj]\n   [cognitect.transit :as transit]\n   [cljs-bean.core :refer [bean ->clj ->js]]\n   [helix.core :refer [$ defnc <>]]\n   [helix.dom :refer [div]]\n   [sci.core :as sci]))\n\n(js/console.log \"LOADED CLJS DECK BASE APP\")\n\n(def mapbox-token (atom nil))\n\n(def active-layers (atom {}))\n\n(declare rerender)\n\n(defn assoc-cljs-data [o data]\n  (gobj/set o \"data\" (to-array data))\n  o)\n\n(defn set-tooltip\n  ([[x y] label] (set-tooltip [x y] label {}))\n  ([[x y] label {:keys [font-color]\n                 :or {font-color \"white\"}}]\n   (let [tooltip (.getElementById js/document \"tooltip\")\n         el (if tooltip\n              tooltip\n              (let [new-el (.createElement js/document \"div\")]\n                (.setAttribute new-el \"id\" \"tooltip\")\n                (.append (.-body js/document) new-el)\n                new-el))]\n     (if label\n       (do (set! (.-innerHTML el) label)\n           (set! (.. el -style -display) \"block\")\n           (set! (.. el -style -position) \"absolute\")\n           (set! (.. el -style -zIndex) 10)\n           (set! (.. el -style -left) (str (+ x 20) \"px\"))\n           (set! (.. el -style -top) (str (+ y 20) \"px\"))\n           (set! (.. el -style -color) font-color))\n       (set! (.. el -style -display) \"none\")))))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(defn set-hiccup-tooltip [[x y] hiccup]\n  (let [tooltip (.getElementById js/document \"tooltip\")\n        el (if tooltip\n             tooltip\n             (let [new-el (.createElement js/document \"div\")]\n               (.setAttribute new-el \"id\" \"tooltip\")\n               (.append (.-body js/document) new-el)\n               new-el))]\n    (if hiccup\n      (do (set! (.-innerHTML el)\n                (ReactDOMServer/renderToStaticMarkup\n                 (apply (window-resolve 'sablono.interpreter/element) [hiccup])))\n          (set! (.. el -style -display) \"block\")\n          (set! (.. el -style -position) \"absolute\")\n          (set! (.. el -style -zIndex) 10)\n          (set! (.. el -style -left) (str (+ x 20) \"px\"))\n          (set! (.. el -style -top) (str (+ y 20) \"px\")))\n      (set! (.. el -style -display) \"none\"))))\n\n(defn compile-and-add-layer [layer-props]\n  (let [compiled-layer-props\n        (doall (->> layer-props\n                    (keep (fn [[k v]]\n                            (when (transit/tagged-value? v)\n                              [k (sci/eval-string\n                                  (pr-str `(comp clj->js ~(aget v \"rep\")))\n                                  {:bindings {'js/console.log js/console.log\n                                              'js/document    js/document\n                                              'data-filter (fn [{:keys [fp64 filter-size]}]\n                                                             (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n                                              'DataFilterExtension DataFilterExtension\n                                              'set-tooltip    set-tooltip\n                                              'set-hiccup-tooltip set-hiccup-tooltip}\n                                   :classes {:allow :all}})])))\n                    (into {})))\n        uses-functions? (some (fn [[k v]]\n                                (transit/tagged-value? v))\n                              layer-props)]\n    (if uses-functions?\n      (do (swap! active-layers assoc (:id layer-props)\n                 (apply (key->class (:layer-type layer-props))\n                        [(assoc-cljs-data (->js (merge layer-props compiled-layer-props))\n                                          (:data layer-props))]))\n          (rerender))\n      (do (swap! active-layers assoc (:id layer-props)\n                 (apply (key->class (:layer-type layer-props))\n                        [(->js layer-props)]))\n          (rerender)))))\n\n(defonce default-view-state\n  (clj->js\n   {:latitude 37.618889\n    :longitude -122.375\n    :zoom   10\n    :bearing 0\n    :pitch  0\n    :width  (gobj/get js/window \"innerWidth\")\n    :height (gobj/get js/window \"innerHeight\")}))\n\n(defn rerender []\n  (render\n   (deck.layers/deck\n    {:key \"deck\"\n     :controller true\n     :pickingRadius 10\n     :initialViewState default-view-state\n     :layers (to-array (vals @active-layers))\n     :children [(when @mapbox-token\n                  (deck.layers/static-map\n                   {:key \"map\"\n                    :mapboxApiAccessToken @mapbox-token\n                    :reuseMaps true\n                    :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                    :preventStyleDiffing true}))]})\n   (. js/document getElementById \"app\")))\n\n(defn handler [{:keys [id type payload] :as command}]\n  (js/console.log \"deck handler command: \" command)\n  (case type\n    :mapbox-token (when-not @mapbox-token\n                    (reset! mapbox-token payload))\n    :register-plugin (when (:mapbox-token payload) (reset! mapbox-token (:mapbox-token payload)))\n    :visualize (compile-and-add-layer payload)\n    :erase (do (swap! active-layers dissoc payload)\n                     (rerender)))\n  (rerender))\n\n(def set-path-value (window-resolve 'browjure.state/set-path-value))\n\n(defn compile [form]\n  (sci/eval-string\n   (pr-str form)\n   {:bindings {'js/console.log js/console.log\n               'js/document    js/document\n               'set-tooltip set-tooltip\n               'data-filter (fn [{:keys [fp64 filter-size]}]\n                              (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n               'DataFilterExtension DataFilterExtension\n               'set-path-value set-path-value}\n    :classes {:allow :all}}))\n\n(defn compile-layer-props [layer-props]\n  (let [compiled-layer-props\n        (doall (->> layer-props\n                    (keep (fn [[k v]]\n                            (when (transit/tagged-value? v)\n                              [k (sci/eval-string\n                                  (pr-str `(comp clj->js ~(aget v \"rep\")))\n                                  {:bindings {'js/console.log js/console.log\n                                              'js/document    js/document\n                                              'data-filter (fn [{:keys [fp64 filter-size]}]\n                                                             (DataFilterExtension. #js {:filterSize filter-size :fp64 fp64}))\n                                              'DataFilterExtension DataFilterExtension\n                                              'set-tooltip set-tooltip\n                                              'set-path-value set-path-value}\n                                   :classes {:allow :all}})])))\n                    (into {})))\n        uses-functions? (some (fn [[k v]]\n                                (transit/tagged-value? v))\n                              layer-props)]\n    (if uses-functions?\n      (apply (key->class (:layer-type layer-props))\n             [(assoc-cljs-data (->js (merge layer-props compiled-layer-props))\n                               (:data layer-props))])\n      (apply (key->class (:layer-type layer-props))\n             [(->js layer-props)]))))\n\n(defn embed-component [& config-or-layers]\n  (let [layers (filter :layer-type config-or-layers)\n        config (or (some identity (filter map? config-or-layers)) {})]\n    [:div\n     (merge {:style {:width \"600px\" :height \"600px\"}\n             :ref (fn [c]\n                    (when c\n                      (render\n                       (deck.layers/deck\n                        {:key \"deck\"\n                         :style {:position \"relative\"}\n                         :controller true\n                         :container c\n                         :pickingRadius 10\n                         :initialViewState default-view-state\n                         :layers (to-array (map compile-layer-props layers))\n                         :children [(when (or @mapbox-token (:mapbox-token config))\n                                      (deck.layers/static-map\n                                       {:key \"map\"\n                                        :mapboxApiAccessToken (or @mapbox-token (:mapbox-token config))\n                                        :reuseMaps true\n                                        :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                                        :preventStyleDiffing true}))]})\n                       c)))}\n            (:container-props config))]))\n\n(defnc deck-component [props]\n  (let [use-path-sub (window-resolve 'browjure.state/use-path-sub)\n        dep-values (doall (->> (:dataset/dependencies props)\n                               (map (fn [[dep-name dep-path]]\n                                      [dep-name (use-path-sub dep-path)]))\n                               (into {})))\n        view-state (use-path-sub [:view-state])\n        {:deck/keys [data->layers]} props\n        data->layers (compile (aget data->layers \"rep\"))]\n    ($ \"div\"\n       {:key (str \"deck\" (:id props))\n        :ref (fn [c]\n               (when c\n                 (render\n                  (deck.layers/deck\n                   {:key \"deck\"\n                    :style {:position \"relative\"}\n                    :controller true\n                    :container c\n                    :pickingRadius 10\n                    :initialViewState (or (clj->js view-state) default-view-state)\n                    :layers (->> (data->layers dep-values)\n                                 (mapcat (fn [[layer-type layers]]\n                                           (doall\n                                            (map (fn [layer]\n                                                   (compile-layer-props\n                                                    (assoc layer :layer-type layer-type)))\n                                                 layers))))\n                                 to-array)\n                    :children [(when (or @mapbox-token (:mapbox-token props))\n                                 (deck.layers/static-map\n                                  {:key \"map\"\n                                   :mapboxApiAccessToken (or @mapbox-token (:mapbox-token props))\n                                   :reuseMaps true\n                                   :mapStyle \"mapbox://styles/mapbox/dark-v9\"\n                                   :preventStyleDiffing true}))]})\n                  c)))\n        & (:container-props props)})))\n"]}