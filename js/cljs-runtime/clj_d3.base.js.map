{"version":3,"sources":["clj_d3/base.cljs"],"mappings":";;;AAQA,AAAA,AAAMA,AAAgBC;AAAtB,AACE,AAAA,AAAAC,AAAAC,AAACC;AAAD,AAAS,AAAAF,AAAAC;AACDE,AACA,AAACC,AAAK,AAAA,AAACC,AAAqB,AAAA,AAAA,AAACC,AAAuB,AAACC,AAAUR,AAEzD,AAAA,AAAA,AAACO,AAAuB,AAACE,AAAKT;;AAE9C,AAAKU,AAAa,AAAA,AAAA,AAACX;AAEnB,AAAKY,AAAe,AAAA,AAAA,AAACZ;AAErB,AAAA,AAAMa,AAASC;AAAf,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACA,AAACC,AAAOF,AACoBG,AACAC,AACAN,AACZO;;AAGnB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC,AAAOO;AAAP,AAAA,AAAAN,AAAA,AAAA,AAAAC,AAAAH,AAAAC;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAkBO;AAAlB,AAAA;AACE,AAAMM,AAAc,AAACC;AACfC,AAAW,AAACC,AACW,AAACC,AAAI,AAAAC,AAEL,AAAA,AAACI;AAFI,AAAA,AAAAH,AAAAD;AAAA,AAAAhB,AAAAiB,AAAA,AAAA,AAAMC;AAAN,AAAAlB,AAAAiB,AAAA,AAAA,AAAeE;AAAf,AAAA,AACGD,AAAS,AAAChC,AAAAA,AAAAA,AAAaiC,AAAAA;AAF/B,AAAA,AAAuBd;AADpDC,AAKiCD;AALjCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAKiBe;AACXA,AAAc,AAACjC,AAAQ,AAAA,AAAMiC;AANnC,AAOE,AAACC,AAAgB;AAAA,AAAO,AAAAC,AAAeV;AAAfW,AAA0B,AAAWb;AAArC,AAAA,AAAAY,AAAAC,AAAAD,AAAAC,AAACH,AAAAA,AAAAA;;AACN;AAAA,AAAA;;AADnB,AAEsBR;;AAEb,AAAA,AAAU,AAAA,AAAKR,AACfM,AAON,AAAA,AAAAe,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAAA;AANG,AAAA,AAAkBvB,AAMrB,AAAAwB;;AApBP,AAAA,AAAA,AAAA5B;AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAAQ,AAAAD,AAAA,AAAA;;AAAAA;;AAAAP;;;;AAAA;AAAA;AAAOS,AAgBP,AAAA,AAAMqB;AAAN,AAAA","names":["clj-d3.base/window-resolve","symbol","p1__104712#","p2__104714#","cljs.core.reduce","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","clj-d3.base/use-path-sub","clj-d3.base/set-path-value","clj-d3.base/compile","form","sci.core.eval_string","cljs.core.pr_str","js/console.log","js/document","js/module$node_modules$d3$dist$d3_node","G__104727","props__83397__auto__","maybe-ref__83398__auto__","vec__104731","helix.core/extract-cljs-props","cljs.core.nth","goog/DEBUG","G__104836","goog.object/set","clj-d3.base/component","props","map__104736","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","component-ref","js/module$node_modules$react$index.useRef","dep-values","cljs.core.doall","cljs.core.map","p__104746","vec__104756","dep-name","dep-path","cljs.core.into","render-ref-fn","js/module$node_modules$react$index.useEffect","G__104778","G__104779","clj-d3.base/handler","helix.core/get-react","helix.impl.props/merge-obj","obj104833","helix.impl.props._native_props"],"sourcesContent":["(ns clj-d3.base\n  (:require\n   [sci.core :as sci]\n   [cognitect.transit :as transit]\n   [helix.core :refer [$ defnc <>]]\n   [react :as react]\n   [d3 :as d3]))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(def use-path-sub (window-resolve 'browjure.state/use-path-sub))\n\n(def set-path-value (window-resolve 'browjure.state/set-path-value))\n\n(defn compile [form]\n  (sci/eval-string\n   (pr-str form)\n   {:bindings {'js/console.log js/console.log\n               'js/document    js/document\n               'set-path-value set-path-value\n               'd3 d3}\n    :classes {:allow :all}}))\n\n(defnc component [props]\n  (let [component-ref (react/useRef)\n        dep-values (doall (->> (:dataset/dependencies props)\n                               (map (fn [[dep-name dep-path]]\n                                      [dep-name (use-path-sub dep-path)]))\n                               (into {})))\n        {:d3/keys [render-ref-fn]} props\n        render-ref-fn (compile (aget render-ref-fn \"rep\"))]\n    (react/useEffect (fn [] (render-ref-fn dep-values (.-current component-ref))\n                       (fn []))\n                     #js [dep-values])\n    ($ :svg\n       {:key (str \"d3\" (:id props))\n        :ref component-ref\n        & (:container-props props)})))\n\n(defn handler [])\n"]}