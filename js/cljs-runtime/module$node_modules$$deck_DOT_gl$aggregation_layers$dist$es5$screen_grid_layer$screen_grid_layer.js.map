{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/screen-grid-layer/screen-grid-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregator = _interopRequireDefault(require(\"../utils/gpu-grid-aggregation/gpu-grid-aggregator\"));\n\nvar _aggregationOperationUtils = require(\"../utils/aggregation-operation-utils\");\n\nvar _screenGridCellLayer = _interopRequireDefault(require(\"./screen-grid-cell-layer\"));\n\nvar _gridAggregationLayer = _interopRequireDefault(require(\"../grid-aggregation-layer\"));\n\nvar _resourceUtils = require(\"../utils/resource-utils.js\");\n\nvar defaultProps = Object.assign({}, _screenGridCellLayer[\"default\"].defaultProps, {\n  getPosition: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: function value(d) {\n      return 1;\n    }\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM'\n});\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nvar ScreenGridLayer = function (_GridAggregationLayer) {\n  (0, _inherits2[\"default\"])(ScreenGridLayer, _GridAggregationLayer);\n\n  function ScreenGridLayer() {\n    (0, _classCallCheck2[\"default\"])(this, ScreenGridLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ScreenGridLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(ScreenGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n\n      if (!_screenGridCellLayer[\"default\"].isSupported(gl)) {\n        this.setState({\n          supported: false\n        });\n\n        _core.log.error(\"ScreenGridLayer: \".concat(this.id, \" is not supported on this browser\"))();\n\n        return;\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ScreenGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS,\n        getCellSize: function getCellSize(props) {\n          return props.cellSizePixels;\n        }\n      });\n      var weights = {\n        count: {\n          size: 1,\n          operation: _aggregationOperationUtils.AGGREGATION_OPERATION.SUM,\n          needMax: true,\n          maxTexture: (0, _resourceUtils.getFloatTexture)(gl, {\n            id: \"\".concat(this.id, \"-max-texture\")\n          })\n        }\n      };\n      this.setState({\n        supported: true,\n        projectPoints: true,\n        weights: weights,\n        subLayerData: {\n          attributes: {}\n        },\n        maxTexture: weights.count.maxTexture,\n        positionAttributeName: 'positions',\n        posOffset: [0, 0],\n        translation: [1, -1]\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, (0, _defineProperty2[\"default\"])(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return this.state.supported && changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ScreenGridLayer.prototype), \"updateState\", this).call(this, opts);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n\n      var _this$state = this.state,\n          maxTexture = _this$state.maxTexture,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          weights = _this$state.weights;\n      var updateTriggers = this.props.updateTriggers;\n      var aggregationBuffer = weights.count.aggregationBuffer;\n      var CellLayerClass = this.getSubLayerClass('cells', _screenGridCellLayer[\"default\"]);\n      return new CellLayerClass(this.props, this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers: updateTriggers\n      }), {\n        data: {\n          attributes: {\n            instanceCounts: aggregationBuffer\n          }\n        },\n        maxTexture: maxTexture,\n        numInstances: numRow * numCol\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ScreenGridLayer.prototype), \"finalizeState\", this).call(this);\n      var _this$state2 = this.state,\n          aggregationBuffer = _this$state2.aggregationBuffer,\n          maxBuffer = _this$state2.maxBuffer,\n          gpuGridAggregator = _this$state2.gpuGridAggregator,\n          maxTexture = _this$state2.maxTexture;\n      gpuGridAggregator[\"delete\"]();\n\n      if (aggregationBuffer) {\n        aggregationBuffer[\"delete\"]();\n      }\n\n      if (maxBuffer) {\n        maxBuffer[\"delete\"]();\n      }\n\n      if (maxTexture) {\n        maxTexture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info,\n          mode = _ref2.mode;\n      var index = info.index;\n\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var aggregationResults = gpuGridAggregator.getData('count');\n        info.object = _gpuGridAggregator[\"default\"].getAggregationData(Object.assign({\n          pixelIndex: index\n        }, aggregationResults));\n      }\n\n      return info;\n    }\n  }, {\n    key: \"updateResults\",\n    value: function updateResults(_ref3) {\n      var aggregationData = _ref3.aggregationData,\n          maxData = _ref3.maxData;\n      var count = this.state.weights.count;\n      count.aggregationData = aggregationData;\n      count.aggregationBuffer.setData({\n        data: aggregationData\n      });\n      count.maxData = maxData;\n      count.maxTexture.setImageData({\n        data: maxData\n      });\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var cellSize = opts.props.cellSizePixels;\n      var cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n      var viewportChanged = opts.changeFlags.viewportChanged;\n      var gpuAggregation = opts.props.gpuAggregation;\n\n      if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n        if (gpuAggregation && !_gpuGridAggregator[\"default\"].isSupported(this.context.gl)) {\n          _core.log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n\n          gpuAggregation = false;\n        }\n      }\n\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var dimensions = this.state.dimensions;\n      var data = dimensions.data,\n          weights = dimensions.weights;\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || viewportChanged || this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation,\n        dimension: data\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n      var viewport = this.context.viewport;\n\n      if (viewportChanged || cellSizeChanged) {\n        var width = viewport.width,\n            height = viewport.height;\n        var numCol = Math.ceil(width / cellSize);\n        var numRow = Math.ceil(height / cellSize);\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          scaling: [width / 2, -height / 2, 1],\n          gridOffset: {\n            xOffset: cellSize,\n            yOffset: cellSize\n          },\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          getWeight = _opts$props.getWeight,\n          aggregation = _opts$props.aggregation;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[aggregation];\n      }\n\n      this.setState({\n        getValue: (0, _aggregationOperationUtils.getValueFunc)(aggregation, getWeight)\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }]);\n  return ScreenGridLayer;\n}(_gridAggregationLayer[\"default\"]);\n\nexports[\"default\"] = ScreenGridLayer;\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n//# sourceMappingURL=screen-grid-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_defineProperty2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_core","_gpuGridAggregator","_aggregationOperationUtils","_screenGridCellLayer","_gridAggregationLayer","_resourceUtils","defaultProps","assign","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","_GridAggregationLayer","apply","arguments","key","initializeState","_attributeManager$add","gl","context","isSupported","prototype","call","dimensions","getCellSize","cellSizePixels","count","size","operation","AGGREGATION_OPERATION","SUM","needMax","maxTexture","getFloatTexture","id","concat","setState","supported","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","getAttributeManager","attributeManager","add","POSITION_ATTRIBUTE_NAME","accessor","fp64","use64bitPositions","log","error","shouldUpdateState","_ref","changeFlags","state","somethingChanged","updateState","opts","renderLayers","_this$state","numRow","numCol","updateTriggers","aggregationBuffer","getSubLayerClass","CellLayerClass","getSubLayerProps","instanceCounts","numInstances","finalizeState","_this$state2","maxBuffer","gpuGridAggregator","getPickingInfo","_ref2","info","index","aggregationResults","getData","object","getAggregationData","pixelIndex","updateResults","_ref3","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","_opts$props","getValue","getValueFunc","layerName"]
}
