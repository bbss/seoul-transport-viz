{
"version":3,
"file":"module$node_modules$$mapbox$martini$martini.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@mapbox/martini/martini.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mapbox$martini$martini\"] = function(global,require,module,exports) {\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = global || self, global.Martini = factory());\n}(this, (function () { 'use strict';\n\nclass Martini {\n    constructor(gridSize = 257) {\n        this.gridSize = gridSize;\n        const tileSize = gridSize - 1;\n        if (tileSize & (tileSize - 1)) throw new Error(\n            `Expected grid size to be 2^n+1, got ${gridSize}.`);\n\n        this.numTriangles = tileSize * tileSize * 2 - 2;\n        this.numParentTriangles = this.numTriangles - tileSize * tileSize;\n\n        this.indices = new Uint32Array(this.gridSize * this.gridSize);\n\n        // coordinates for all possible triangles in an RTIN tile\n        this.coords = new Uint16Array(this.numTriangles * 4);\n\n        // get triangle coordinates from its index in an implicit binary tree\n        for (let i = 0; i < this.numTriangles; i++) {\n            let id = i + 2;\n            let ax = 0, ay = 0, bx = 0, by = 0, cx = 0, cy = 0;\n            if (id & 1) {\n                bx = by = cx = tileSize; // bottom-left triangle\n            } else {\n                ax = ay = cy = tileSize; // top-right triangle\n            }\n            while ((id >>= 1) > 1) {\n                const mx = (ax + bx) >> 1;\n                const my = (ay + by) >> 1;\n\n                if (id & 1) { // left half\n                    bx = ax; by = ay;\n                    ax = cx; ay = cy;\n                } else { // right half\n                    ax = bx; ay = by;\n                    bx = cx; by = cy;\n                }\n                cx = mx; cy = my;\n            }\n            const k = i * 4;\n            this.coords[k + 0] = ax;\n            this.coords[k + 1] = ay;\n            this.coords[k + 2] = bx;\n            this.coords[k + 3] = by;\n        }\n    }\n\n    createTile(terrain) {\n        return new Tile(terrain, this);\n    }\n}\n\nclass Tile {\n    constructor(terrain, martini) {\n        const size = martini.gridSize;\n        if (terrain.length !== size * size) throw new Error(\n            `Expected terrain data of length ${size * size} (${size} x ${size}), got ${terrain.length}.`);\n\n        this.terrain = terrain;\n        this.martini = martini;\n        this.errors = new Float32Array(terrain.length);\n        this.update();\n    }\n\n    update() {\n        const {numTriangles, numParentTriangles, coords, gridSize: size} = this.martini;\n        const {terrain, errors} = this;\n\n        // iterate over all possible triangles, starting from the smallest level\n        for (let i = numTriangles - 1; i >= 0; i--) {\n            const k = i * 4;\n            const ax = coords[k + 0];\n            const ay = coords[k + 1];\n            const bx = coords[k + 2];\n            const by = coords[k + 3];\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n            const cx = mx + my - ay;\n            const cy = my + ax - mx;\n\n            // calculate error in the middle of the long edge of the triangle\n            const interpolatedHeight = (terrain[ay * size + ax] + terrain[by * size + bx]) / 2;\n            const middleIndex = my * size + mx;\n            const middleError = Math.abs(interpolatedHeight - terrain[middleIndex]);\n\n            errors[middleIndex] = Math.max(errors[middleIndex], middleError);\n\n            if (i < numParentTriangles) { // bigger triangles; accumulate error with children\n                const leftChildIndex = ((ay + cy) >> 1) * size + ((ax + cx) >> 1);\n                const rightChildIndex = ((by + cy) >> 1) * size + ((bx + cx) >> 1);\n                errors[middleIndex] = Math.max(errors[middleIndex], errors[leftChildIndex], errors[rightChildIndex]);\n            }\n        }\n    }\n\n    getMesh(maxError = 0) {\n        const {gridSize: size, indices} = this.martini;\n        const {errors} = this;\n        let numVertices = 0;\n        let numTriangles = 0;\n        const max = size - 1;\n\n        // use an index grid to keep track of vertices that were already used to avoid duplication\n        indices.fill(0);\n\n        // retrieve mesh in two stages that both traverse the error map:\n        // - countElements: find used vertices (and assign each an index), and count triangles (for minimum allocation)\n        // - processTriangle: fill the allocated vertices & triangles typed arrays\n\n        function countElements(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                countElements(cx, cy, ax, ay, mx, my);\n                countElements(bx, by, cx, cy, mx, my);\n            } else {\n                indices[ay * size + ax] = indices[ay * size + ax] || ++numVertices;\n                indices[by * size + bx] = indices[by * size + bx] || ++numVertices;\n                indices[cy * size + cx] = indices[cy * size + cx] || ++numVertices;\n                numTriangles++;\n            }\n        }\n        countElements(0, 0, max, max, max, 0);\n        countElements(max, max, 0, 0, 0, max);\n\n        const vertices = new Uint16Array(numVertices * 2);\n        const triangles = new Uint32Array(numTriangles * 3);\n        let triIndex = 0;\n\n        function processTriangle(ax, ay, bx, by, cx, cy) {\n            const mx = (ax + bx) >> 1;\n            const my = (ay + by) >> 1;\n\n            if (Math.abs(ax - cx) + Math.abs(ay - cy) > 1 && errors[my * size + mx] > maxError) {\n                // triangle doesn't approximate the surface well enough; drill down further\n                processTriangle(cx, cy, ax, ay, mx, my);\n                processTriangle(bx, by, cx, cy, mx, my);\n\n            } else {\n                // add a triangle\n                const a = indices[ay * size + ax] - 1;\n                const b = indices[by * size + bx] - 1;\n                const c = indices[cy * size + cx] - 1;\n\n                vertices[2 * a] = ax;\n                vertices[2 * a + 1] = ay;\n\n                vertices[2 * b] = bx;\n                vertices[2 * b + 1] = by;\n\n                vertices[2 * c] = cx;\n                vertices[2 * c + 1] = cy;\n\n                triangles[triIndex++] = a;\n                triangles[triIndex++] = b;\n                triangles[triIndex++] = c;\n            }\n        }\n        processTriangle(0, 0, max, max, max, 0);\n        processTriangle(max, max, 0, 0, 0, max);\n\n        return {vertices, triangles};\n    }\n}\n\nreturn Martini;\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","Martini","constructor","gridSize","tileSize","Error","numTriangles","numParentTriangles","indices","Uint32Array","coords","Uint16Array","i","id","ax","ay","bx","by","cx","cy","mx","my","k","createTile","terrain","Tile","martini","size","length","errors","Float32Array","update","middleIndex","Math","max","abs","middleError","getMesh","maxError","countElements","numVertices","processTriangle","a","b","c","vertices","triangles","triIndex","fill"]
}
