{"version":3,"sources":["clj_material_ui/base.cljs"],"mappings":"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","names":["clj-material-ui.base/window-resolve","symbol","p1__81689#","p2__81690#","cljs.core.reduce","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","clj-material-ui.base/handler","lib-event","js/console.log","clj-material-ui.base/set-path-value","clj-material-ui.base/compile","form","sci.core.eval_string","cljs.core.pr_str","js/document","clj-material-ui.base/make-component","material-component-fn","use-path-sub","use-combined-sub","clojure.walk/postwalk","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","helix.core/get-react","obj82128","helix.impl.props/merge-obj","helix.impl.props._props","clj-material-ui.core/key->class","helix.core/$","js/module$node_modules$react$index.createElement","cljs.core/second","G__81740","props__77089__auto__","maybe-ref__77090__auto__","vec__81741","helix.core/extract-cljs-props","cljs.core.nth","goog/DEBUG","G__82129","goog.object/set","clj-material-ui.base/material-root","props","map__81744","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","dep-values","cljs.core.map","p__81746","vec__81750","dep-name","dep-path","cljs.core.into","class-key","theme","js/module$node_modules$$material_ui$core$styles$createMuiTheme.default","cljs.core/clj->js","js/module$node_modules$$material_ui$core$styles$index.ThemeProvider","G__82132","vec__82133","G__82171","clj-material-ui.base/material-ui-component","map__82138","p__82141","vec__82143","compiled-props","p__82146","vec__82148","k","v","cognitect.transit/tagged-value?"],"sourcesContent":["(ns clj-material-ui.base\n  (:require\n   [clj-material-ui.core :refer [key->class]]\n   [sci.core :as sci]\n   [cognitect.transit :as transit]\n   [helix.core :refer [$ defnc <>]]\n   [react :as react]\n   [react-dom :refer [render]]\n   [\"@material-ui/core/styles\" :rename {ThemeProvider MuiThemeProvider}]\n   [\"@material-ui/core/styles/createMuiTheme\" :default create-mui-theme]\n   ))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(defn handler [lib-event]\n  (js/console.log \"material base app handler event: \" lib-event))\n\n(def set-path-value (window-resolve 'browjure.state/set-path-value))\n\n(defn compile [form]\n  (sci/eval-string\n   (pr-str form)\n   {:bindings {'js/console.log js/console.log\n               'js/document    js/document\n               'set-path-value set-path-value}\n    :classes {:allow :all}}))\n\n(defn make-component [material-component-fn]\n  (let [use-path-sub     (window-resolve 'browjure.state/use-path-sub)\n        use-combined-sub (window-resolve 'browjure.state/use-combined-sub)]\n    (js/console.log (pr-str (clojure.walk/postwalk (fn [form]\n                                                     (if (and (vector? form) (= (first form) :style))\n                                                       [(first form) `(~'clj->js ~form)] form))\n                                                   material-component-fn)))\n    (js/console.log (sci/eval-string\n                     (pr-str material-component-fn)\n                     {:bindings {'js/console.log js/console.log\n                                 'js/document    js/document\n                                 'key->class     key->class\n                                 'set-path-value set-path-value\n                                 'use-combined-sub use-combined-sub\n                                 'use-path-sub   use-path-sub\n                                 '$ $}\n                      :classes {:allow :all}}))\n    #(react/createElement\n      (sci/eval-string\n       (pr-str (clojure.walk/postwalk (fn [form]\n                                        (if (and (vector? form) (= (first form) :style)) [(first form) `(~'clj->js ~(second form))] form))\n                                      material-component-fn))\n       {:bindings {'js/console.log js/console.log\n                   'js/document    js/document\n                   'key->class     key->class\n                   'set-path-value set-path-value\n                   'use-combined-sub use-combined-sub\n                   'use-path-sub     use-path-sub\n                   '$ $}\n        :classes {:allow :all}}))))\n\n(defnc material-root [props]\n  (let [use-path-sub (window-resolve 'browjure.state/use-path-sub)\n        dep-values (->> (:dataset/dependencies props)\n                        (map (fn [[dep-name dep-path]]\n                               [dep-name (use-path-sub dep-path)]))\n                        (into {}))\n        {:material-ui/keys []\n         :keys [class-key]} props\n        theme (create-mui-theme\n               (clj->js {:typography {:useNextVariants true}}))]\n    ($ MuiThemeProvider\n       {:theme theme\n        :key   \"deck\"\n        :children (:children props)}\n       )))\n\n(defnc material-ui-component [props]\n  (let [use-path-sub (window-resolve 'browjure.state/use-path-sub)\n        dep-values (->> (:dataset/dependencies props)\n                        (map (fn [[dep-name dep-path]]\n                               [dep-name (use-path-sub dep-path)]))\n                        (into {}))\n        compiled-props (->> props\n                            (map (fn [[k v]] [k (if (transit/tagged-value? v)\n                                                  (compile (aget v \"rep\"))\n                                                  (clj->js v))]))\n                            (into {}))\n        {:material-ui/keys []\n         :keys [class-key]} props]\n    (js/console.log dep-values (:dataset/dependencies props))\n    ($ (get key->class class-key) {& compiled-props})))\n"]}