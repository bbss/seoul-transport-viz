{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@luma_DOT_gl/shadertools/dist/es5/lib/inject-shader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = injectShader;\nexports.combineInjects = combineInjects;\nexports.DECLARATION_INJECT_MARKER = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _moduleInjectors = require(\"../modules/module-injectors\");\n\nvar _constants = require(\"./constants\");\n\nvar _utils = require(\"../utils\");\n\nvar _MODULE_INJECTORS;\n\nvar MODULE_INJECTORS = (_MODULE_INJECTORS = {}, (0, _defineProperty2[\"default\"])(_MODULE_INJECTORS, _constants.VERTEX_SHADER, _moduleInjectors.MODULE_INJECTORS_VS), (0, _defineProperty2[\"default\"])(_MODULE_INJECTORS, _constants.FRAGMENT_SHADER, _moduleInjectors.MODULE_INJECTORS_FS), _MODULE_INJECTORS);\nvar DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\nexports.DECLARATION_INJECT_MARKER = DECLARATION_INJECT_MARKER;\nvar REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/;\nvar REGEX_END_OF_MAIN = /}\\n?[^{}]*$/;\nvar fragments = [];\n\nfunction injectShader(source, type, inject, injectStandardStubs) {\n  var isVertex = type === _constants.VERTEX_SHADER;\n\n  var _loop = function _loop(key) {\n    var fragmentData = inject[key];\n    fragmentData.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    fragments.length = fragmentData.length;\n\n    for (var i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n\n    var fragmentString = \"\".concat(fragments.join('\\n'), \"\\n\");\n\n    switch (key) {\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, function (match) {\n            return match + fragmentString;\n          });\n        }\n\n        break;\n\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, function (match) {\n            return fragmentString + match;\n          });\n        }\n\n        break;\n\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, function (match) {\n            return match + fragmentString;\n          });\n        }\n\n        break;\n\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, function (match) {\n            return fragmentString + match;\n          });\n        }\n\n        break;\n\n      default:\n        source = source.replace(key, function (match) {\n          return match + fragmentString;\n        });\n    }\n  };\n\n  for (var key in inject) {\n    _loop(key);\n  }\n\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, function (match) {\n      return match + MODULE_INJECTORS[type];\n    });\n  }\n\n  return source;\n}\n\nfunction combineInjects(injects) {\n  var result = {};\n  (0, _utils.assert)(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(function (inject) {\n    for (var key in inject) {\n      result[key] = result[key] ? \"\".concat(result[key], \"\\n\").concat(inject[key]) : inject[key];\n    }\n  });\n  return result;\n}\n//# sourceMappingURL=inject-shader.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","injectShader","source","type","inject","injectStandardStubs","isVertex","_constants","VERTEX_SHADER","_loop","key","fragmentData","sort","a","b","order","fragments","length","i","len","injection","fragmentString","concat","join","replace","DECLARATION_INJECT_MARKER","REGEX_START_OF_MAIN","match","REGEX_END_OF_MAIN","MODULE_INJECTORS","combineInjects","injects","result","_utils","assert","Array","isArray","forEach","_defineProperty2","_moduleInjectors","_MODULE_INJECTORS","MODULE_INJECTORS_VS","FRAGMENT_SHADER","MODULE_INJECTORS_FS"]
}
