{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$effects$lighting$suncalc.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/effects/lighting/suncalc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$effects$lighting$suncalc\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSolarPosition = getSolarPosition;\nexports.getSunlightDirection = getSunlightDirection;\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar DAY_IN_MS = 1000 * 60 * 60 * 24;\nvar JD1970 = 2440588;\nvar JD2000 = 2451545;\nvar e = DEGREES_TO_RADIANS * 23.4397;\nvar M0 = 357.5291;\nvar M1 = 0.98560028;\nvar THETA0 = 280.147;\nvar THETA1 = 360.9856235;\n\nfunction getSolarPosition(timestamp, latitude, longitude) {\n  var longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  var phi = DEGREES_TO_RADIANS * latitude;\n  var d = toDays(timestamp);\n  var c = getSunCoords(d);\n  var H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nfunction getSunlightDirection(timestamp, latitude, longitude) {\n  var _getSolarPosition = getSolarPosition(timestamp, latitude, longitude),\n      azimuth = _getSolarPosition.azimuth,\n      altitude = _getSolarPosition.altitude;\n\n  var azimuthN = azimuth + Math.PI;\n  return [-Math.sin(azimuthN), -Math.cos(azimuthN), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  return timestamp / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  var lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  var lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  var H = hourAngle;\n  var phi = latitudeInRadians;\n  var delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  var H = hourAngle;\n  var phi = latitudeInRadians;\n  var delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  var M = meanAnomaly;\n  var C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  var P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  var M = getSolarMeanAnomaly(dates);\n  var L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n//# sourceMappingURL=suncalc.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getSolarPosition","timestamp","latitude","longitude","longitudeWestInRadians","DEGREES_TO_RADIANS","phi","d","DAY_IN_MS","JD1970","JD2000","M","M0","M1","Math","sin","PI","asin","b","cos","e","L","H","THETA0","THETA1","atan2","rightAscension","tan","azimuth","declination","altitude","Object","defineProperty","value","getSunlightDirection","_getSolarPosition","azimuthN"]
}
