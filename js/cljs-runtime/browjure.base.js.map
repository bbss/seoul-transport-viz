{"version":3,"sources":["browjure/base.cljs"],"mappings":";;AAWA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAACC;;AAElB,AAAA,AAAMC;AAAN,AAAsB,AAAAC,AAAA,AAAAC,AAAmBJ;AAAnB,AAAA,AAAAG;AAAA,AAAA,AAAAA,AAAWE;AAAX,AAA4B,AAACA,AAAAA,AAAAA;;AAA7B;;;AAEtB,AAAKC,AACH,AAAAH,AAAc,AAAA,AAAiBK;AAA/B,AAAA,AAAAL;AAAA,AAAA,AAAAA,AAAWI;AAAX,AACE,AAAA,AAAeA;;AADjB;;;AAGF,AAAMO,AAAO,AAACC;AAAdN,AAEM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACW,AAEAd,AAEaA,AACJQ;AAPhBL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcO;AADd,AAAAH,AAAAJ,AAAA,AACmBQ;AADnB,AAAAJ,AAAAJ,AAAA,AAC2BS;AAD3B,AAAAL,AAAAJ,AAAA,AACmCU;AADnC,AASE,AAAKE,AAAWL;;AAChB,AAAKM,AAAWL;;AAChB,AAAKM,AAAWL;;AAChB,AAAKM,AAAWL;AAGlB,AAAA;AAAA,AAAA,AAAAM,AAAA,AAAAC,AAAAC,AAAOQ;AAAP,AAAA,AAAAP,AAAA,AAAA,AAAAC,AAAAH,AAAAC;AAAAG,AAAA,AAAAC,AAAAH,AAAA,AAAA;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAA,AAAAjB,AAAAiB,AAAA,AAAkCM;AAAlC,AAAAvB,AAAAiB,AAAA,AAAuCO;AAAvC,AAAAxB,AAAAiB,AAAA,AAA4CQ;AAA5C,AAAAzB,AAAAiB,AAAA,AAAkDS;AAAlD,AAAA1B,AAAAiB,AAAA,AAAwDU;AAAxD,AAAA;AACE,AAAMC,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACD,AAACC,AAAO,AAAA,AAAMH,AACcI,AACApC;AAEtCqC,AAAU,AAACC,AAAaT,AAAKC;AALnC,AAME,AAAAS,AAAMX;AAAN,AAAA,AAAAW;AAAA;AAGaR,AAIV,AAAA,AAAAkC,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAAD;AAHE,AAAAzB,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAA/C,AAAA,AAAAiD,AAAAF;AAAA,AAAA,AAAA/C;AAAA,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA,AAAAkD,AAAAH;AAAA,AAAAI,AAw5E0C,AAAAoG,AAAAxG;AAx5E1CK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAA5B,AAAA6B,AAAA,AAAA,AAAOW;AAAP,AAAAxC,AAAA6B,AAAA,AAAA,AAAoBY;AAApB,AAAA,AAAA,AAAAV,AAAAL,AAEWc,AACb,AAAA,AAAAE,AAAA,AAAA,AAAAG,AAAA,AAAA;AAAA,AAAAA;AAD2BL,AAC3B,AAAA,AAAAE,AAAA,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAEoBL,AACC;AAAKQ;AAAL,AACE,AAAMC,AAAW,AAACC,AAAMrC,AAAO0B,AAAa,AAAW,AAAUS;AAAjE,AACE,AAACG,AAAe9C,AAAK4C;;AACrB,AAACxC,AAAAA,AAAAA,AAAUwC,AAAAA;;;AANpC,AAAAJ;;;AAHE,AAAA,AAAAlB,AAAA;;;;AAAA;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAP,AAAA,AAAAQ,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAP,AAAA;;;AAAA,AAAAU,AAAA,AAAAC,AAAAlB;AAAA,AAAAnB,AAAAoC,AAAA,AAAA,AAAOI;AAAP,AAAAxC,AAAAoC,AAAA,AAAA,AAAoBK;AAApB,AAAA,AAAAH,AAEWE,AACb,AAAA,AAAAE,AAAA,AAAA,AAAAK,AAAA,AAAA;AAAA,AAAAA;AAD2BP,AAC3B,AAAA,AAAAE,AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAEoBP,AACC;AAAKQ;AAAL,AACE,AAAMC,AAAW,AAACC,AAAMrC,AAAO0B,AAAa,AAAW,AAAUS;AAAjE,AACE,AAACG,AAAe9C,AAAK4C;;AACrB,AAACxC,AAAAA,AAAAA,AAAUwC,AAAAA;;;AANpC,AAAAF;AAHE,AAAAd,AAAA,AAAAK,AAAApB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAiCJ;;;;;AAJtC,AAAA,AAAAG,AAAA,AAAA,AAAAD;;;;AAPJ,AAAA,AAAA,AAAAf;AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAAS,AAAAD,AAAA,AAAA;;AAAAA;;AAAAR;;;;AAAA;AAAA;AAAOU,AAsBP,AAAKiD,AACH,AAAA,AAAA,AAAA,AAAA,AAACnF;AAEH,AAAA,AAAMoF,AAAgBC;AAAtB,AACE,AAAA,AAAAC,AAAAC,AAACC;AAAD,AAAS,AAAAF,AAAAC;AACDE,AACA,AAACC,AAAK,AAAA,AAACC,AAAqB,AAAA,AAAA,AAACC,AAAuB,AAACC,AAAUR,AAEzD,AAAA,AAAA,AAACO,AAAuB,AAACE,AAAKT;;AAE9C,AAAKU,AAAU,AAAA,AAAC/F;AAEhB,AAAA,AAAMgG,AAAgBC;AAAtB,AAEE,AACE,AAAA,AAACC,AAAmB,AAAA,AAAOD;AAC3B,AAAI,AAAS,AAAQ1F,AACR,AAAA4F,AAAM,AAAA,AAAgB5F;AAAtB,AAAA,AAAA4F,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAEuB,AAAA,AAAA,AAAA,AAAIF;;AAF3BE;;;AAGT,AAACC,AAAMjB,AAAgBkB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIJ;;AACjC,AAAMK,AAAG,AAAAC,AAAI,AAAA,AAAY,AAAA,AAAUN;AAA1B,AAAA,AAAAM;AAAAA;;AAAoC,AAACT,AAAK,AAAA,AAAKG;;;AAAxD,AACE,AAAA,AAACO;AAAD,AAAgB,AAAI,AAAA,AAAC7D,AAAmE2D,AAAGL;;AACrE,AAAAQ,AAAC,AAAA,AAAM,AAAA,AAAM,AAAMhB,AAAU,AAAA,AAAA,AAACG,AAAuBU;AAArD,AAAA,AAAAG,AAAAA,AAAAA,AAAqFR,AAAAA;AAD3G;;AARR,AAWE,AAAA,AAACC,AAAgB,AAAA,AAAOD;AACxB,AAAMS,AACA,AAAA,AAAAC,AAACC;AAAD,AACE,AACE,AAAK,AAAAD,AAACE,AACD,AAAA,AAACX,AAAsB,AAAAS,AAACxC;AAC7B,AAAM2C,AAAe,AAAA,AAAA,AAAC1B;AAAtB,AACE,AAAA,AAAC2B,AAAQ,AAAA,AAAA,AAACC,AACQ,AAAAC,AAAgB,AAAAN,AAACO;AAAjB,AAAA,AAAAD,AAAAA,AAACH,AAAAA,AAAAA;AACF,AAAA,AAAAH,AAACQ;;AANtB,AAAAR;;;AAQDV;AACDmB,AACA,AAAA,AAAAC,AAACT;AAAD,AACE,AACE,AAAA,AAAK,AAAAS,AAACR,AACD,AAAA,AAAA1G,AAACS,AAAKuE,AAAgB,AAAAkC,AAAClD;AAC5B,AAAMmD,AAAU,AAAClC,AAAe,AAAA,AAAAjF,AAACS,AAAKuE,AAAgB,AAAAkC,AAAClD;AAAvD,AACE,AAAI,AAAemD;AACjB,AAAC5G,AAAM6G,AAAED,AAAU,AAAAD,AAAChD;;AACpB,AAAC3D,AAAM,AAAC0E,AAAe,AAAA,AAAAjF,AAACS,AAAKuE,AAAgB,AAAAkC,AAAClD,AACvC,AAAAkD,AAAChD;;;AAPd,AAQE,AAAK,AAAAgD,AAACR,AACD,AAAA,AAACX,AAAE,AAAAmB,AAAClD;AACT,AAAAqD,AAAAH;AAAAI,AAAA,AAAAtE,AAAAqE;AAAAE,AAAA,AAAAvD,AAAAsD;AAAAA,AAAA,AAAAE,AAAAF;AAAAC,AAAOE;AAAPF,AAAA,AAAAvD,AAAAsD;AAAAA,AAAA,AAAAE,AAAAF;AAAAC,AAASG;AAATJ,AAAmBK;AAAnB,AACE,AAAAC,AAAS,AAACC,AAAQ,AAAC7D,AAAM2D;AAAzB,AAAA,AAAAC,AAAAA,AAACF,AAAAA,AAAAA;;AAXL,AAAAR;;;;AAaDX;AA1BP,AA2BE,AAAA,AAAChG,AAAM,AAAA,AAAA,AAAC0E,AAA2CgC;;AAvCvD,AAwCE,AAAA,AAAClB,AAAkB,AAAA,AAAOD;AAC1B,AAACf,AAAe,AAAA,AAAA,AAAA,AAAIe,AAAwB,AAAA,AAAA,AAAA,AAAIA;;AAzClD,AA2CE,AAAMK,AAAG,AAACR,AAAK,AAAA,AAAKG;AAApB,AACE,AAAA,AAACtD,AAAsBsD;;AACvB,AAAAgC,AAAC,AAAA,AAAM,AAAA,AAAM,AAAMxC,AAAU,AAAA,AAAA,AAACG,AAAuBU;AAArD,AAAA,AAAA2B,AAAAA,AAAAA,AAAqFhC,AAAAA;;;;;;AAE3F,AAAA,AAAMiC,AAASC;AAAf,AACE,AAAA,AAACC,AAAOrC;;AACR,AAAM,AAAK,AAAA,AAACG,AAAa,AAAC/B,AAAM,AAAA,AAAQgE,AAC7B,AAAA,AAACE,AAAmB,AAAClE,AAAM,AAAC+C,AAAO,AAAA,AAAQiB;AADtD,AAEE,AAAAG,AAA+C,AAAA,AAAQH;AAAvD,AAAArG,AAAAwG,AAAA,AAAA,AAAOE;AAAPD,AAAA,AAAAzG,AAAAwG,AAAA,AAAA;AAAA,AAAAxG,AAAAyG,AAAA,AAAA,AAAoBE;AAApB,AAAA3G,AAAAyG,AAAA,AAAA,AAAmCG;AAAnC,AACE,AAAA,AAAAvI,AAACwC,AAAiBwC;;AAClB,AAAA,AAACxC,AAA4B,AAAA,AAACuD,AAAgB,AAAA,AAAOwC,AAAY,AAAA,AAAOA,AAAWA;;AACnF,AAAM,AAAA,AAACxC,AAAEuC;AAAT,AAAqC,AAACzC,AAAe0C;;AAArD;;;AALJ;;;AAOF,AAAA,AAAMC;AAAN,AACE,AAAC1I;;AACD,AAACmI,AAAOrI,AACA,AAAC6I,AACAvH,AAAQ6G;;AAEnB,AAACS;AAED,AAACnC,AACA;AAAA,AACE,AAAA,AAAA,AAAArG,AAACwC,AAAyCoD;;AAE1C,AAAM,AAAA,AAAA5F,AAAC0I,AAAK9C;AAAZ,AACE,AAAO,AAAA,AAAC+C,AACD,AAAKC;AAAL,AACE,AAAO,AAAOA,AACP,AAAKC;AAAL,AACE,AAACC,AAAM,AAACC,AAAI,AAAKC;AAAL,AAAQ,AAAC3C,AACA;AAAA,AACE,AAAA,AAAA4C,AAAO,AAACN,AAAS,AAAA,AAAA,AAAgBK;AAAjC,AACQ,AAAO,AAAAC,AACA,AAAKC;AAAL,AACE,AAAA,AAAC1G,AAAoCwG;;AACrC,AAACnD,AACA,AAACsD,AACA,AAAA,AAACC,AACDF;;;AACrB,AAAA,AAAOF;AAChB,AAACK,AAAMR;;;;AAhBvC;;AAJH","names":["js/browjure","js/browjure.base","js/browjure.base.router_","browjure.base/router_","cljs.core.atom","browjure.base/stop-router!","temp__5735__auto__","cljs.core/deref","stop-f","browjure.base/?csrf-token","el","js/document","map__90438","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","packer","taoensso.sente.packers.transit.get_transit_packer","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_","browjure.base/chsk","browjure.base/ch-chsk","browjure.base/chsk-send!","browjure.base/chsk-state","G__90442","props__82855__auto__","maybe-ref__82856__auto__","vec__90443","helix.core/extract-cljs-props","map__90446","cljs.core.nth","goog/DEBUG","G__90469","goog.object/set","browjure.base/control-component","type","path","value","style","onChange","on-change","sci.core.eval_string","cljs.core.pr_str","js/console.log","values","browjure.state/use-path-sub","G__90448","js/Error","iter__4529__auto__","s__90452","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__90454","cljs.core/chunk-buffer","i__90453","vec__90455","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__90451","cljs.core/chunk-rest","vec__90462","cljs.core/first","cljs.core/cons","cljs.core/rest","control-name","control-val","helix.core/get-react","obj90450","helix.impl.props/native-style","obj90459","obj90461","obj90466","obj90468","e","new-values","cljs.core.assoc","browjure.state/set-path-value","browjure.base/hiccup-registry","browjure.base/window-resolve","symbol","p1__90470#","p2__90471#","cljs.core.reduce","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","browjure.base/connected","browjure.base/handle-command","command","cljs.core._EQ_","G__90474","cljs.core.swap_BANG_","cljs.core/merge","id","or__4126__auto__","js/setTimeout","fexpr__90475","react-componentized","p1__90472#","clojure.walk/postwalk","cljs.core/vector?","make-component","cljs.core.into","cljs.core.concat","G__90476","cljs.core/second","cljs.core.drop","hiccup","p1__90473#","component","helix.core/$","vec__90477","seq__90478","first__90479","cljs.core/next","_","element","props","G__90480","cljs.core/clj->js","fexpr__90481","browjure.base/handler","msg","cljs.core/reset!","cljs.core.not_EQ_","vec__90482","vec__90485","sente-event","browjure-event","lib-event","browjure.base/start-router!","taoensso.sente/start-client-chsk-router!","cljs.core/not","js/fetch","response","number-of-commands","cljs.core.doall","cljs.core.map","i","p1__90488#","command-str","cognitect.transit/read","cognitect.transit.reader","cljs.core.range","cljs.core/chunk-first"],"sourcesContent":["(ns browjure.base\n  (:require\n   [browjure.state :as st :refer [use-path-sub set-path-value]]\n   [taoensso.sente  :as sente :refer (cb-success?)]\n   [taoensso.sente.packers.transit  :as sente-transit]\n   [cognitect.transit :as transit]\n   [react :as react]\n   [helix.core :refer [$ defnc]]\n   [sci.core :as sci]\n   [goog.object :as gobj]))\n\n(defonce router_ (atom nil))\n\n(defn stop-router! [] (when-let [stop-f @router_] (stop-f)))\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(let [packer (sente-transit/get-transit-packer)\n      {:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n       \"/chsk\" ; Must match server Ring routing URL\n       ?csrf-token\n       {:type   :ws\n        :csrf-token ?csrf-token\n        :packer packer})]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state)   ; Watchable, read-only atom\n  )\n\n(defnc control-component [{:keys [type path value style onChange]}]\n  (let [on-change (sci/eval-string\n                  (pr-str (aget onChange \"rep\"))\n                  {:bindings {'js/console.log js/console.log\n                              'js/document    js/document}\n                   :classes {:allow :all}})\n        values    (use-path-sub path value)]\n    (case type\n      \"edn-multi-checkbox\"\n      ($ :div\n         {:style style}\n         (for [[control-name control-val] values]\n           ($ :label\n              {:key control-name} control-name\n              ($ :input\n                 {:type \"checkbox\"\n                  :checked control-val\n                  :onChange (fn [e]\n                              (let [new-values (assoc values control-name (.-checked (.-target e)))]\n                                (set-path-value path new-values)\n                                (on-change new-values)))})))))))\n\n(def hiccup-registry\n  (atom {:browjure/control 'browjure.base/control-component}))\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(def connected (atom false))\n\n(defn handle-command [command]\n\n  (cond\n    (= :register-plugin (:type command))\n    (do (.append (.-head js/document)\n                 (doto (.createElement js/document \"script\")\n                   (.setAttribute \"type\" \"text/javascript\")\n                   (.setAttribute \"src\" (-> command :payload :base-path))))\n        (swap! hiccup-registry merge (-> command :payload :sablono :hiccup-tag->factory-symbol))\n        (let [id (or (:namespace (:payload command)) (name (:id command)))]\n          (js/setTimeout #(do (js/console.log \"calling base handler with register plugin command\" id command)\n                                ((aget (aget (aget js/window (clojure.string/replace id \"-\" \"_\")) \"base\") \"handler\") command))\n                           1000))) ;;need timeout to let library load?\n    (= :view-sablono (:type command))\n    (let [react-componentized\n          (clojure.walk/postwalk\n           #(cond\n              (and (vector? %)\n                   (= :react-fn-component (first %)))\n              (let [make-component (window-resolve 'clj-material-ui.base/make-component)]\n                (into [] (concat [:built-react-fn-component\n                                  (make-component (second %))]\n                                 (drop 2 %))))\n              :else %)\n           command)\n          hiccup\n          (clojure.walk/postwalk\n           #(cond\n              (and (vector? %)\n                   (get @hiccup-registry (first %)))\n              (let [component (window-resolve (get @hiccup-registry (first %)))]\n                (if (.-displayName component)\n                  (apply $ component (rest %))\n                  (apply (window-resolve (get @hiccup-registry (first %)))\n                         (rest %))))\n              (and (vector? %)\n                   (= (first %) :built-react-fn-component))\n              (let [[_ element & props] %]\n                (element (clj->js (first props))))\n              :else %)\n           react-componentized)]\n      (apply (window-resolve 'clj-sablono.base/handler) [hiccup]))\n    (= :set-path-value (:type command))\n    (set-path-value (-> command :payload :path) (-> command :payload :value))\n    :else\n    (let [id (name (:id command))]\n      (js/console.log \"else\" command)\n      ((aget (aget (aget js/window (clojure.string/replace id \"-\" \"_\")) \"base\") \"handler\") command))))\n\n(defn handler [msg]\n  (reset! connected true)\n  (when (and (= :chsk/recv (first (:event msg)))\n             (not= :chsk/ws-ping (first (second (:event msg)))))\n    (let [[sente-event [browjure-event lib-event]] (:event msg)]\n      (js/console.log  @hiccup-registry)\n      (js/console.log \"event type\" (= :view-sablono (:type lib-event)) (:type lib-event) lib-event)\n      (when (= browjure-event :event/echo) (handle-command lib-event)))))\n\n(defn start-router! []\n  (stop-router!)\n  (reset! router_\n          (sente/start-client-chsk-router!\n           ch-chsk handler)))\n\n(start-router!)\n\n(js/setTimeout\n (fn []\n   (js/console.log \"connected to back-end?\" @connected)\n   ;;when not connected in 5 seconds assume offline usage\n   (when (not @connected)\n     (.then (js/fetch \"commands.json\")\n            (fn [response]\n              (.then (.json response)\n                     (fn [number-of-commands]\n                       (doall (map (fn [i] (js/setTimeout\n                                            (fn []\n                                              (.then (js/fetch (str \"command-\" i \".json\"))\n                                                     #(.then (.text %)\n                                                             (fn [command-str]\n                                                               (js/console.log \"handling command: \" i)\n                                                               (handle-command\n                                                                (transit/read\n                                                                 (transit/reader :json)\n                                                                 command-str))))))\n                                            (* 100 i)))\n                                   (range number-of-commands)))))))))\n 10000)\n"]}