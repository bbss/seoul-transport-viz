shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$assemble_shaders=function(global,require,module$jscomp$1,exports){function assembleShader(gl,_ref){var id=_ref.id,source=_ref.source,type=_ref.type,modules=_ref.modules,_ref$defines=_ref.defines,defines=void 0===_ref$defines?{}:_ref$defines;_ref$defines=_ref.hookFunctions;_ref$defines=void 0===_ref$defines?[]:_ref$defines;var _ref$inject=_ref.inject,inject=void 0===_ref$inject?{}:_ref$inject;_ref$inject=_ref.transpileToGLSL100;
_ref$inject=void 0===_ref$inject?!1:_ref$inject;var _ref$prologue=_ref.prologue,prologue=void 0===_ref$prologue?!0:_ref$prologue;_ref=_ref.log;(0,_utils.assert)("string"===typeof source,"shader source must be a string");_ref$prologue=type===_constants.VERTEX_SHADER;var sourceLines=source.split("\n"),glslVersion=100,versionLine="",coreSource=source;0===sourceLines[0].indexOf("#version ")?(glslVersion=300,versionLine=sourceLines[0],coreSource=sourceLines.slice(1).join("\n")):versionLine="#version ".concat(glslVersion);
var allDefines={};modules.forEach(function(module){Object.assign(allDefines,module.getDefines())});Object.assign(allDefines,defines);gl=prologue?"".concat(versionLine,"\n").concat(getShaderName({id:id,source:source,type:type}),"\n").concat("\n#define SHADER_TYPE_".concat(SHADER_TYPE[type].toUpperCase(),"\n"),"\n").concat((0,_platformDefines.getPlatformShaderDefines)(gl),"\n").concat((0,_platformDefines.getVersionDefines)(gl,glslVersion,!_ref$prologue),"\n").concat(getApplicationDefines(allDefines),
"\n").concat(_ref$prologue?"":FRAGMENT_SHADER_PROLOGUE,"\n"):"".concat(versionLine,"\n");_ref$defines=normalizeHookFunctions(_ref$defines);id={};source={};defines={};for(var key in inject)prologue="string"===typeof inject[key]?{injection:inject[key],order:0}:inject[key],(sourceLines=key.match(/^(v|f)s:(#)?([\w-]+)$/))?(versionLine=sourceLines[3],sourceLines[2]?"decl"===versionLine?source[key]=[prologue]:defines[key]=[prologue]:id[key]=[prologue]):defines[key]=[prologue];key=!0;inject=!1;prologue=
void 0;try{for(var _iterator=modules[Symbol.iterator](),_step;!(key=(_step=_iterator.next()).done);key=!0){var module$jscomp$0=_step.value;_ref&&module$jscomp$0.checkDeprecations(coreSource,_ref);var moduleSource=module$jscomp$0.getModuleSource(type,glslVersion);gl+=moduleSource;var injections=module$jscomp$0.injections[type],_key;for(_key in injections){var _match=_key.match(/^(v|f)s:#([\w-]+)$/);if(_match){var injectionType="decl"===_match[2]?source:defines;injectionType[_key]=injectionType[_key]||
[];injectionType[_key].push(injections[_key])}else id[_key]=id[_key]||[],id[_key].push(injections[_key])}}}catch(err){inject=!0,prologue=err}finally{try{if(!key&&null!=_iterator["return"])_iterator["return"]()}finally{if(inject)throw prologue;}}gl+=INJECT_SHADER_DECLARATIONS;gl=(0,_injectShader["default"])(gl,type,source);gl+=getHookFunctions(_ref$defines[type],id);gl+=coreSource;gl=(0,_injectShader["default"])(gl,type,defines);return gl=(0,_transpileShader["default"])(gl,_ref$inject?100:glslVersion,
_ref$prologue)}function assembleGetUniforms(modules){return function(opts){var uniforms={},_iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=modules[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var moduleUniforms=_step2.value.getUniforms(opts,uniforms);Object.assign(uniforms,moduleUniforms)}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{if(!_iteratorNormalCompletion2&&
null!=_iterator2["return"])_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2;}}return uniforms}}function getShaderName(_ref3){var id=_ref3.id,source=_ref3.source;_ref3=_ref3.type;return id&&"string"===typeof id&&-1===source.indexOf("SHADER_NAME")?"\n#define SHADER_NAME ".concat(id,"_").concat(SHADER_TYPE[_ref3],"\n\n"):""}function getApplicationDefines(){var defines=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},count=0,sourceText="",define;for(define in defines){0===
count&&(sourceText+="\n// APPLICATION DEFINES\n");count++;var value=defines[define];if(value||Number.isFinite(value))sourceText+="#define ".concat(define.toUpperCase()," ").concat(defines[define],"\n")}0===count&&(sourceText+="\n");return sourceText}function getHookFunctions(hookFunctions,hookInjections){var result="",hookName;for(hookName in hookFunctions){var hookFunction=hookFunctions[hookName];result+="void ".concat(hookFunction.signature," {\n");hookFunction.header&&(result+="  ".concat(hookFunction.header));
if(hookInjections[hookName]){var injections=hookInjections[hookName];injections.sort(function(a,b){return a.order-b.order});var _iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=injections[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0)result+="  ".concat(_step3.value.injection,"\n")}catch(err){_didIteratorError3=!0,_iteratorError3=err}finally{try{if(!_iteratorNormalCompletion3&&
null!=_iterator3["return"])_iterator3["return"]()}finally{if(_didIteratorError3)throw _iteratorError3;}}}hookFunction.footer&&(result+="  ".concat(hookFunction.footer));result+="}\n"}return result}function normalizeHookFunctions(hookFunctions){var result={vs:{},fs:{}};hookFunctions.forEach(function(hook){if("string"!==typeof hook){var opts=hook;hook=opts.hook}else opts={};hook=hook.trim();var _hook$split=hook.split(":"),_hook$split2=(0,_slicedToArray2["default"])(_hook$split,2);_hook$split=_hook$split2[0];
_hook$split2=_hook$split2[1];hook=hook.replace(/\(.+/,"");result[_hook$split][hook]=Object.assign(opts,{signature:_hook$split2})});return result}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");module$jscomp$1=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:!0});exports.assembleShaders=function(gl,opts){var vs=opts.vs,fs=opts.fs,modules=(0,_resolveModules.resolveModules)(opts.modules||
[]);return{gl:gl,vs:assembleShader(gl,Object.assign({},opts,{source:vs,type:_constants.VERTEX_SHADER,modules:modules})),fs:assembleShader(gl,Object.assign({},opts,{source:fs,type:_constants.FRAGMENT_SHADER,modules:modules})),getUniforms:assembleGetUniforms(modules)}};var _slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray"));exports=global(require("module$node_modules$$babel$runtime$helpers$defineProperty"));var _constants=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$constants"),
_resolveModules=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$resolve_modules"),_platformDefines=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$platform_defines"),_injectShader=module$jscomp$1(require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$inject_shader")),_transpileShader=global(require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader")),_utils=require("module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$index"),
_SHADER_TYPE,INJECT_SHADER_DECLARATIONS="\n\n".concat(_injectShader.DECLARATION_INJECT_MARKER,"\n\n"),SHADER_TYPE=(_SHADER_TYPE={},(0,exports["default"])(_SHADER_TYPE,_constants.VERTEX_SHADER,"vertex"),(0,exports["default"])(_SHADER_TYPE,_constants.FRAGMENT_SHADER,"fragment"),_SHADER_TYPE),FRAGMENT_SHADER_PROLOGUE="precision highp float;\n\n"}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$assemble_shaders.js.map
