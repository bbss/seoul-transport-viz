{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$heatmap_layer$heatmap_layer_utils.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/heatmap-layer/heatmap-layer-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$heatmap_layer$heatmap_layer_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBounds = getBounds;\nexports.boundsContain = boundsContain;\nexports.packVertices = packVertices;\nexports.scaleToAspectRatio = scaleToAspectRatio;\nexports.getTextureCoordinates = getTextureCoordinates;\nexports.getTextureParams = getTextureParams;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nfunction getBounds(points) {\n  var x = points.map(function (p) {\n    return p[0];\n  });\n  var y = points.map(function (p) {\n    return p[1];\n  });\n  var xMin = Math.min.apply(null, x);\n  var xMax = Math.max.apply(null, x);\n  var yMin = Math.min.apply(null, y);\n  var yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n\n  return false;\n}\n\nvar scratchArray = new Float32Array(12);\n\nfunction packVertices(points) {\n  var dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var index = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var point = _step.value;\n\n      for (var i = 0; i < dimensions; i++) {\n        scratchArray[index++] = point[i] || 0;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return scratchArray;\n}\n\nfunction scaleToAspectRatio(boundingBox, width, height) {\n  var _boundingBox = (0, _slicedToArray2[\"default\"])(boundingBox, 4),\n      xMin = _boundingBox[0],\n      yMin = _boundingBox[1],\n      xMax = _boundingBox[2],\n      yMax = _boundingBox[3];\n\n  var currentWidth = xMax - xMin;\n  var currentHeight = yMax - yMin;\n  var newWidth = currentWidth;\n  var newHeight = currentHeight;\n\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  var xCenter = (xMax + xMin) / 2;\n  var yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\n\nfunction getTextureCoordinates(point, bounds) {\n  var _bounds = (0, _slicedToArray2[\"default\"])(bounds, 4),\n      xMin = _bounds[0],\n      yMin = _bounds[1],\n      xMax = _bounds[2],\n      yMax = _bounds[3];\n\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\nfunction getTextureParams(_ref) {\n  var gl = _ref.gl,\n      floatTargetSupport = _ref.floatTargetSupport;\n  return {\n    format: (0, _core.isWebGL2)(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}\n//# sourceMappingURL=heatmap-layer-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","getBounds","points","x","map","p","y","xMin","Math","min","apply","xMax","max","yMin","yMax","boundsContain","currentBounds","targetBounds","packVertices","dimensions","arguments","length","undefined","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","done","next","point","i","scratchArray","err","scaleToAspectRatio","boundingBox","width","height","_boundingBox","_slicedToArray2","currentWidth","currentHeight","newWidth","newHeight","xCenter","yCenter","getTextureCoordinates","bounds","_bounds","getTextureParams","_ref","gl","floatTargetSupport","format","_core","isWebGL2","type","Float32Array"]
}
