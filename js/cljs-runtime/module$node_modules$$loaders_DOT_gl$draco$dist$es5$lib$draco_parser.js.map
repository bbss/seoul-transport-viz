{
"version":3,
"file":"module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_parser.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/@loaders_DOT_gl/draco/dist/es5/lib/draco-parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_parser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _loaderUtils = require(\"@loaders.gl/loader-utils\");\n\nvar GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\nvar DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\nvar DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nvar DracoParser = function () {\n  function DracoParser(draco) {\n    (0, _classCallCheck2[\"default\"])(this, DracoParser);\n    this.draco = draco;\n    this.drawMode = 'TRIANGLE';\n  }\n\n  (0, _createClass2[\"default\"])(DracoParser, [{\n    key: \"destroy\",\n    value: function destroy() {}\n  }, {\n    key: \"destroyGeometry\",\n    value: function destroyGeometry(dracoGeometry) {\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry.dracoGeometry);\n      }\n    }\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(arrayBuffer, options) {\n      var buffer = new this.draco.DecoderBuffer();\n      buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n      var decoder = new this.draco.Decoder();\n      var data = {};\n      var dracoStatus;\n      var dracoGeometry;\n      var header;\n\n      try {\n        var geometryType = decoder.GetEncodedGeometryType(buffer);\n\n        switch (geometryType) {\n          case this.draco.TRIANGULAR_MESH:\n            dracoGeometry = new this.draco.Mesh();\n            dracoStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n            header = {\n              type: GEOMETRY_TYPE.TRIANGULAR_MESH,\n              faceCount: dracoGeometry.num_faces(),\n              attributeCount: dracoGeometry.num_attributes(),\n              vertexCount: dracoGeometry.num_points()\n            };\n            break;\n\n          case this.draco.POINT_CLOUD:\n            dracoGeometry = new this.draco.PointCloud();\n            dracoStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n            header = {\n              type: GEOMETRY_TYPE.POINT_CLOUD,\n              attributeCount: dracoGeometry.num_attributes(),\n              vertexCount: dracoGeometry.num_points()\n            };\n            break;\n\n          default:\n            throw new Error('Unknown DRACO geometry type.');\n        }\n\n        if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n          var message = \"DRACO decompression failed: \".concat(dracoStatus.error_msg());\n\n          if (dracoGeometry) {\n            this.draco.destroy(dracoGeometry);\n          }\n\n          throw new Error(message);\n        }\n\n        data.loaderData = {\n          header: header\n        };\n        this.extractDRACOGeometry(decoder, dracoGeometry, geometryType, data);\n        data.header = {\n          vertexCount: header.vertexCount,\n          boundingBox: (0, _loaderUtils.getMeshBoundingBox)(data.attributes)\n        };\n      } finally {\n        this.draco.destroy(decoder);\n        this.draco.destroy(buffer);\n      }\n\n      return data;\n    }\n  }, {\n    key: \"extractDRACOGeometry\",\n    value: function extractDRACOGeometry(decoder, dracoGeometry, geometryType, geometry) {\n      var attributes = this.getAttributes(decoder, dracoGeometry);\n      var positionAttribute = attributes.POSITION;\n\n      if (!positionAttribute) {\n        throw new Error('DRACO decompressor: No position attribute found.');\n      }\n\n      this.getPositionAttributeMetadata(positionAttribute);\n\n      if (geometryType === this.draco.TRIANGULAR_MESH) {\n        attributes.indices = this.drawMode === 'TRIANGLE_STRIP' ? this.getMeshStripIndices(decoder, dracoGeometry) : this.getMeshFaceIndices(decoder, dracoGeometry);\n        geometry.mode = this.drawMode === 'TRIANGLE_STRIP' ? 5 : 4;\n      } else {\n        geometry.mode = 0;\n      }\n\n      if (attributes.indices) {\n        geometry.indices = {\n          value: attributes.indices,\n          size: 1\n        };\n        delete attributes.indices;\n      }\n\n      geometry.attributes = attributes;\n      return geometry;\n    }\n  }, {\n    key: \"getPositionAttributeMetadata\",\n    value: function getPositionAttributeMetadata(positionAttribute) {\n      this.metadata = this.metadata || {};\n      this.metadata.attributes = this.metadata.attributes || {};\n      var posTransform = new this.draco.AttributeQuantizationTransform();\n\n      if (posTransform.InitFromAttribute(positionAttribute)) {\n        this.metadata.attributes.position.isQuantized = true;\n        this.metadata.attributes.position.maxRange = posTransform.range();\n        this.metadata.attributes.position.numQuantizationBits = posTransform.quantization_bits();\n        this.metadata.attributes.position.minValues = new Float32Array(3);\n\n        for (var i = 0; i < 3; ++i) {\n          this.metadata.attributes.position.minValues[i] = posTransform.min_value(i);\n        }\n      }\n\n      this.draco.destroy(posTransform);\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(decoder, dracoGeometry) {\n      var attributes = {};\n      var numPoints = dracoGeometry.num_points();\n\n      for (var attributeName in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n        var attributeType = this.draco[attributeName];\n        var attributeId = decoder.GetAttributeId(dracoGeometry, attributeType);\n\n        if (attributeId !== -1) {\n          var dracoAttribute = decoder.GetAttribute(dracoGeometry, attributeId);\n\n          var _this$getAttributeTyp = this.getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName),\n              typedArray = _this$getAttributeTyp.typedArray;\n\n          attributes[DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[attributeName]] = {\n            value: typedArray,\n            size: typedArray.length / numPoints\n          };\n        }\n      }\n\n      return attributes;\n    }\n  }, {\n    key: \"getMeshFaceIndices\",\n    value: function getMeshFaceIndices(decoder, dracoGeometry) {\n      var numFaces = dracoGeometry.num_faces();\n      var numIndices = numFaces * 3;\n      var indices = new Uint32Array(numIndices);\n      var dracoArray = new this.draco.DracoInt32Array();\n\n      for (var i = 0; i < numFaces; ++i) {\n        decoder.GetFaceFromMesh(dracoGeometry, i, dracoArray);\n        var index = i * 3;\n        indices[index] = dracoArray.GetValue(0);\n        indices[index + 1] = dracoArray.GetValue(1);\n        indices[index + 2] = dracoArray.GetValue(2);\n      }\n\n      this.draco.destroy(dracoArray);\n      return indices;\n    }\n  }, {\n    key: \"getMeshStripIndices\",\n    value: function getMeshStripIndices(decoder, dracoGeometry) {\n      var dracoArray = new this.draco.DracoInt32Array();\n      decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      var indices = new Uint32Array(dracoArray.size());\n\n      for (var i = 0; i < dracoArray.size(); ++i) {\n        indices[i] = dracoArray.GetValue(i);\n      }\n\n      this.draco.destroy(dracoArray);\n      return indices;\n    }\n  }, {\n    key: \"getAttributeTypedArray\",\n    value: function getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName) {\n      if (dracoAttribute.ptr === 0) {\n        var message = \"DRACO decode bad attribute \".concat(attributeName);\n        throw new Error(message);\n      }\n\n      var attributeType = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[dracoAttribute.data_type()];\n      var numComponents = dracoAttribute.num_components();\n      var numPoints = dracoGeometry.num_points();\n      var numValues = numPoints * numComponents;\n      var dracoArray;\n      var typedArray;\n\n      switch (attributeType) {\n        case Float32Array:\n          dracoArray = new this.draco.DracoFloat32Array();\n          decoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Float32Array(numValues);\n          break;\n\n        case Int8Array:\n          dracoArray = new this.draco.DracoInt8Array();\n          decoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int8Array(numValues);\n          break;\n\n        case Int16Array:\n          dracoArray = new this.draco.DracoInt16Array();\n          decoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int16Array(numValues);\n          break;\n\n        case Int32Array:\n          dracoArray = new this.draco.DracoInt32Array();\n          decoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Int32Array(numValues);\n          break;\n\n        case Uint8Array:\n          dracoArray = new this.draco.DracoUInt8Array();\n          decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint8Array(numValues);\n          break;\n\n        case Uint16Array:\n          dracoArray = new this.draco.DracoUInt16Array();\n          decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint16Array(numValues);\n          break;\n\n        case Uint32Array:\n          dracoArray = new this.draco.DracoUInt32Array();\n          decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n          typedArray = new Uint32Array(numValues);\n          break;\n\n        default:\n          var errorMsg = 'DRACO decoder: unexpected attribute type.';\n          throw new Error(errorMsg);\n      }\n\n      for (var i = 0; i < numValues; i++) {\n        typedArray[i] = dracoArray.GetValue(i);\n      }\n\n      this.draco.destroy(dracoArray);\n      return {\n        typedArray: typedArray,\n        components: numComponents\n      };\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(arrayBuffer, options) {\n      return this.parseSync(arrayBuffer, options);\n    }\n  }]);\n  return DracoParser;\n}();\n\nexports[\"default\"] = DracoParser;\n//# sourceMappingURL=draco-parser.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_loaderUtils","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","DracoParser","draco","drawMode","key","destroy","destroyGeometry","dracoGeometry","parseSync","arrayBuffer","options","buffer","DecoderBuffer","Init","byteLength","decoder","Decoder","data","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","dracoStatus","DecodeBufferToMesh","header","type","faceCount","num_faces","attributeCount","num_attributes","vertexCount","num_points","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","Error","ok","ptr","message","concat","error_msg","loaderData","extractDRACOGeometry","boundingBox","getMeshBoundingBox","attributes","geometry","getAttributes","positionAttribute","getPositionAttributeMetadata","indices","getMeshStripIndices","getMeshFaceIndices","mode","size","metadata","posTransform","AttributeQuantizationTransform","InitFromAttribute","position","isQuantized","i","maxRange","range","numQuantizationBits","quantization_bits","minValues","min_value","numPoints","attributeName","attributeId","GetAttributeId","attributeType","dracoAttribute","GetAttribute","typedArray","getAttributeTypedArray","_this$getAttributeTyp","length","numFaces","dracoArray","DracoInt32Array","GetFaceFromMesh","index","GetValue","GetTriangleStripsFromMesh","data_type","numComponents","num_components","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","errorMsg","components","decode"]
}
