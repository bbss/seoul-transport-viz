{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$array_utils.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ7HC,QAASA,cAAa,CAACC,IAAD,CAAO,CAAA,IACvBC,OAASD,IAAAC,OADc,CAEvBC,OAASF,IAAAE,OAFc,CAGvBC,WAAaH,IAAAI,MACbA,WAAAA,CAAuB,IAAK,EAApB,GAAAD,UAAA,CAAwB,CAAxB,CAA4BA,UAJb,KAKvBE,IAAML,IAAAK,IACNC,KAAAA,CAAUN,IAAAM,QACdD,IAAA,CAAMA,GAAN,EAAaH,MAAAK,OACb,KAAIC,aAAeP,MAAAM,OACAF,IAAfI,EAAqBL,UAEzB,IAAII,YAAJ,CAAmBC,GAAnB,CACEP,MAAAQ,IAAA,CAAWT,MAAAU,SAAA,CAAgB,CAAhB,CAAmBF,GAAnB,CAAX,CAA6CL,UAA7C,CADF,KAOA,IAFAF,MAAAQ,IAAA,CAAWT,MAAX,CAAmBG,UAAnB,CAEKE,CAAAA,IAAL,CAMA,IAAA,CAAOM,YAAP,CAAWH,GAAX,CAAA,CAGE,IAFA,IAAII;AAAQP,IAAA,CAAQM,YAAR,CAAWX,MAAX,CAAZ,CAESa,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,KAAAN,OAApB,CAAkCO,CAAA,EAAlC,CACEZ,MAAA,CAAOE,UAAP,CAAeQ,YAAf,CACA,CADoBC,KAAA,CAAMC,CAAN,CACpB,CAAAF,YAAA,EA7BuB,CAL7BG,MAAAC,eAAA,CAAsBlB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CmB,MAAO,CAAA,CADoC,CAA7C,CAGAnB,QAAAoB,SAAA,CAoCAA,QAAiB,CAACC,KAAD,CAAQ,CAAA,IACnBlB,OAASkB,KAAAlB,OADU,CAEnBC,OAASiB,KAAAjB,OAFU,CAGnBkB,KAAOD,KAAAC,KAHY,CAInBd,QAAUa,KAAAb,QAJS,CAKnBe,mBAAqBF,KAAAE,mBACrBC,MAAAA,CAAqBH,KAAAG,mBAEzB,IAAI,CAACC,KAAAC,QAAA,CAAcF,KAAd,CAAL,CAME,MALAvB,cAAA,CAAc,CACZE,OAAQA,MADI,CAEZC,OAAQA,MAFI,CAGZI,QAASA,OAHG,CAAd,CAKOJ,CAAAA,MAYT,KATA,IAAIuB,YAAc,CAAlB,CACIC,YAAc,CADlB,CAGIC,aAAerB,OAAfqB;AAA0B,QAAS,CAACf,CAAD,CAAIgB,KAAJ,CAAW,CAChD,MAAOtB,QAAA,CAAQM,CAAR,CAAYc,WAAZ,CAAyBE,KAAzB,CADyC,CAHlD,CAOIC,EAAIC,IAAAC,IAAA,CAASV,kBAAAd,OAAT,CAAoCe,KAAAf,OAApC,CAPR,CASSK,WAAI,CAAb,CAAgBA,UAAhB,CAAoBiB,CAApB,CAAuBjB,UAAA,EAAvB,CAA4B,CAC1B,IAAIoB,gBAAkBX,kBAAA,CAAmBT,UAAnB,CAAlBoB,CAA0CZ,IAA9C,CACIa,gBAAkBX,KAAA,CAAmBV,UAAnB,CAAlBqB,CAA0Cb,IAC9CrB,cAAA,CAAc,CACZE,OAAQA,MAAAU,SAAA,CAAgBc,WAAhB,CAA6BO,eAA7B,CADI,CAEZ9B,OAAQA,MAFI,CAGZE,MAAOsB,WAHK,CAIZrB,IAAK4B,eAJO,CAKZ3B,QAASqB,YALG,CAAd,CAOAF,YAAA,CAAcO,eACdN,YAAA,CAAcO,eAXY,CAcxBP,WAAJ,CAAkBxB,MAAAK,OAAlB,EACER,aAAA,CAAc,CACZE,OAAQ,EADI,CAEZC,OAAQA,MAFI;AAGZE,MAAOsB,WAHK,CAIZpB,QAASqB,YAJG,CAAd,CAQF,OAAOzB,OAjDgB,CA1CoG;",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/utils/array-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$array_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.padArray = padArray;\n\nfunction padArrayChunk(_ref) {\n  var source = _ref.source,\n      target = _ref.target,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? 0 : _ref$start,\n      end = _ref.end,\n      getData = _ref.getData;\n  end = end || target.length;\n  var sourceLength = source.length;\n  var targetLength = end - start;\n\n  if (sourceLength > targetLength) {\n    target.set(source.subarray(0, targetLength), start);\n    return;\n  }\n\n  target.set(source, start);\n\n  if (!getData) {\n    return;\n  }\n\n  var i = sourceLength;\n\n  while (i < targetLength) {\n    var datum = getData(i, source);\n\n    for (var j = 0; j < datum.length; j++) {\n      target[start + i] = datum[j];\n      i++;\n    }\n  }\n}\n\nfunction padArray(_ref2) {\n  var source = _ref2.source,\n      target = _ref2.target,\n      size = _ref2.size,\n      getData = _ref2.getData,\n      sourceStartIndices = _ref2.sourceStartIndices,\n      targetStartIndices = _ref2.targetStartIndices;\n\n  if (!Array.isArray(targetStartIndices)) {\n    padArrayChunk({\n      source: source,\n      target: target,\n      getData: getData\n    });\n    return target;\n  }\n\n  var sourceIndex = 0;\n  var targetIndex = 0;\n\n  var getChunkData = getData && function (i, chunk) {\n    return getData(i + targetIndex, chunk);\n  };\n\n  var n = Math.min(sourceStartIndices.length, targetStartIndices.length);\n\n  for (var i = 1; i < n; i++) {\n    var nextSourceIndex = sourceStartIndices[i] * size;\n    var nextTargetIndex = targetStartIndices[i] * size;\n    padArrayChunk({\n      source: source.subarray(sourceIndex, nextSourceIndex),\n      target: target,\n      start: targetIndex,\n      end: nextTargetIndex,\n      getData: getChunkData\n    });\n    sourceIndex = nextSourceIndex;\n    targetIndex = nextTargetIndex;\n  }\n\n  if (targetIndex < target.length) {\n    padArrayChunk({\n      source: [],\n      target: target,\n      start: targetIndex,\n      getData: getChunkData\n    });\n  }\n\n  return target;\n}\n//# sourceMappingURL=array-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","padArrayChunk","_ref","source","target","_ref$start","start","end","getData","length","sourceLength","targetLength","set","subarray","i","datum","j","Object","defineProperty","value","padArray","_ref2","size","sourceStartIndices","targetStartIndices","Array","isArray","sourceIndex","targetIndex","getChunkData","chunk","n","Math","min","nextSourceIndex","nextTargetIndex"]
}
