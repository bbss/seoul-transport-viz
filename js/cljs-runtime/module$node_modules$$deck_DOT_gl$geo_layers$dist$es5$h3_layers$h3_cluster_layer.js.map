{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$geo_layers$dist$es5$h3_layers$h3_cluster_layer.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/geo-layers/dist/es5/h3-layers/h3-cluster-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$geo_layers$dist$es5$h3_layers$h3_cluster_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _h3Js = require(\"h3-js\");\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _layers = require(\"@deck.gl/layers\");\n\nvar defaultProps = Object.assign({\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n}, _layers.PolygonLayer.defaultProps);\n\nvar H3ClusterLayer = function (_CompositeLayer) {\n  (0, _inherits2[\"default\"])(H3ClusterLayer, _CompositeLayer);\n\n  function H3ClusterLayer() {\n    (0, _classCallCheck2[\"default\"])(this, H3ClusterLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(H3ClusterLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n            getHexagons = props.getHexagons;\n        var polygons = [];\n\n        var _createIterable = (0, _core.createIterable)(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = (0, _h3Js.h3SetToMultiPolygon)(hexagons, true);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = multiPolygon[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          lineJointRounded = _this$props.lineJointRounded,\n          lineMiterLimit = _this$props.lineMiterLimit,\n          lineDashJustified = _this$props.lineDashJustified,\n          material = _this$props.material,\n          getFillColor = _this$props.getFillColor,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth,\n          getLineDashArray = _this$props.getLineDashArray,\n          getElevation = _this$props.getElevation,\n          updateTriggers = _this$props.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('cluster-region', _layers.PolygonLayer);\n      return new SubLayerClass({\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      }, this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers: updateTriggers\n      }), {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      });\n    }\n  }]);\n  return H3ClusterLayer;\n}(_core.CompositeLayer);\n\nexports[\"default\"] = H3ClusterLayer;\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n//# sourceMappingURL=h3-cluster-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_h3Js","_core","_layers","defaultProps","assign","getHexagons","type","d","hexagons","PolygonLayer","H3ClusterLayer","_CompositeLayer","apply","arguments","key","updateState","_ref","props","changeFlags","dataChanged","updateTriggers","data","polygons","_createIterable","createIterable","iterable","objectInfo","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","object","index","multiPolygon","h3SetToMultiPolygon","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","push","getSubLayerRow","polygon","err","setState","renderLayers","_this$props","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","getSubLayerClass","SubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","CompositeLayer","layerName"]
}
