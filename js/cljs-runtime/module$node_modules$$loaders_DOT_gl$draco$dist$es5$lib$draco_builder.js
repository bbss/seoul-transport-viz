shadow$provide.module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_builder=function(global,require,module,exports){function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=
null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function noop(){}function dracoInt8ArrayToArrayBuffer(dracoData){for(var byteLength=dracoData.size(),outputBuffer=
new ArrayBuffer(byteLength),outputData=new Int8Array(outputBuffer),i=0;i<byteLength;++i)outputData[i]=dracoData.GetValue(i);return outputBuffer}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),
_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP={POSITION:"POSITION",NORMAL:"NORMAL",COLOR_0:"COLOR",TEXCOORD_0:"TEX_COORD"};require=function(){function DracoBuilder(draco){var options=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};(0,_classCallCheck2["default"])(this,DracoBuilder);this.draco=draco;this.dracoEncoder=new this.draco.Encoder;
this.dracoMeshBuilder=new this.draco.MeshBuilder;this.log=options.log||noop}(0,_createClass2["default"])(DracoBuilder,[{key:"destroy",value:function(){this.destroyEncodedObject(this.dracoMeshBuilder);this.destroyEncodedObject(this.dracoEncoder);this.draco=this.dracoEncoder=this.dracoMeshBuilder=null}},{key:"destroyEncodedObject",value:function(object){object&&this.draco.destroy(object)}},{key:"encodeSync",value:function(mesh,options){this._setOptions(options);return options.pointcloud?this._encodePointCloud(mesh):
this._encodeMesh(mesh)}},{key:"_getAttributesFromMesh",value:function(mesh){var attributes=_objectSpread(_objectSpread({},mesh),mesh.attributes);mesh.indices&&(attributes.indices=mesh.indices);return attributes}},{key:"_encodePointCloud",value:function(pointcloud){pointcloud=this._getAttributesFromMesh(pointcloud);pointcloud=this._createDracoPointCloud(pointcloud);var dracoData=new this.draco.DracoInt8Array;try{var encodedLen=this.dracoEncoder.EncodePointCloudToDracoBuffer(pointcloud,!1,dracoData);
if(!(0<encodedLen))throw Error("Draco encoding failed.");this.log("DRACO encoded ".concat(pointcloud.num_points()," points\n        with ").concat(pointcloud.num_attributes()," attributes into ").concat(encodedLen," bytes"));return dracoInt8ArrayToArrayBuffer(dracoData)}finally{this.destroyEncodedObject(dracoData),this.destroyEncodedObject(pointcloud)}}},{key:"_encodeMesh",value:function(mesh){mesh=this._getAttributesFromMesh(mesh);mesh=this._createDracoMesh(mesh);var dracoData=new this.draco.DracoInt8Array;
try{var encodedLen=this.dracoEncoder.EncodeMeshToDracoBuffer(mesh,dracoData);if(0>=encodedLen)throw Error("Draco encoding failed.");this.log("DRACO encoded ".concat(mesh.num_points()," points\n        with ").concat(mesh.num_attributes()," attributes into ").concat(encodedLen," bytes"));return dracoInt8ArrayToArrayBuffer(dracoData)}finally{this.destroyEncodedObject(dracoData),this.destroyEncodedObject(mesh)}}},{key:"_setOptions",value:function(options){if("speed"in options){var _this$dracoEncoder;
(_this$dracoEncoder=this.dracoEncoder).SetSpeedOptions.apply(_this$dracoEncoder,(0,_toConsumableArray2["default"])(options.speed))}"method"in options&&this.dracoEncoder.SetEncodingMethod(this.draco[options.method]);if("quantization"in options)for(var attribute in options.quantization)this.dracoEncoder.SetAttributeQuantization(this.draco[attribute],options.quantization[attribute])}},{key:"_createDracoMesh",value:function(attributes){var dracoMesh=new this.draco.Mesh;try{var positions=this._getPositionAttribute(attributes);
if(!positions)throw Error("positions");var vertexCount=positions.length/3;for(attributeName in attributes){var attribute=attributes[attributeName];var attributeName=GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName]||attributeName;this._addAttributeToMesh(dracoMesh,attributeName,attribute,vertexCount)}}catch(error){throw this.destroyEncodedObject(dracoMesh),error;}return dracoMesh}},{key:"_createDracoPointCloud",value:function(attributes){var dracoPointCloud=new this.draco.PointCloud;try{var positions=
this._getPositionAttribute(attributes);if(!positions)throw Error("positions");var vertexCount=positions.length/3;for(attributeName in attributes){var attribute=attributes[attributeName];var attributeName=GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName]||attributeName;this._addAttributeToMesh(dracoPointCloud,attributeName,attribute,vertexCount)}}catch(error){throw this.destroyEncodedObject(dracoPointCloud),error;}return dracoPointCloud}},{key:"_addAttributeToMesh",value:function(dracoMesh,attributeName,
attribute,vertexCount){if(ArrayBuffer.isView(attribute)){var dracoAttributeType=this._getDracoAttributeType(attributeName,attribute),size=attribute.length/vertexCount;if("indices"===dracoAttributeType)vertexCount=attribute.length/3,this.log("Adding attribute ".concat(attributeName,", size ").concat(vertexCount)),this.dracoMeshBuilder.AddFacesToMesh(dracoMesh,vertexCount,attribute);else switch(this.log("Adding attribute ".concat(attributeName,", size ").concat(size)),attribute.constructor.name){case "Int8Array":this.dracoMeshBuilder.AddInt8Attribute(dracoMesh,
dracoAttributeType,vertexCount,size,attribute);break;case "Int16Array":this.dracoMeshBuilder.AddInt16Attribute(dracoMesh,dracoAttributeType,vertexCount,size,attribute);break;case "Int32Array":this.dracoMeshBuilder.AddInt32Attribute(dracoMesh,dracoAttributeType,vertexCount,size,attribute);break;case "Uint8Array":case "Uint8ClampedArray":this.dracoMeshBuilder.AddUInt8Attribute(dracoMesh,dracoAttributeType,vertexCount,size,attribute);break;case "Uint16Array":this.dracoMeshBuilder.AddUInt16Attribute(dracoMesh,
dracoAttributeType,vertexCount,size,attribute);break;case "Uint32Array":this.dracoMeshBuilder.AddUInt32Attribute(dracoMesh,dracoAttributeType,vertexCount,size,attribute);break;default:this.dracoMeshBuilder.AddFloatAttribute(dracoMesh,dracoAttributeType,vertexCount,size,attribute)}}}},{key:"_getDracoAttributeType",value:function(attributeName,attribute){switch(attributeName.toLowerCase()){case "indices":return"indices";case "position":case "positions":case "vertices":return this.draco.POSITION;case "normal":case "normals":return this.draco.NORMAL;
case "color":case "colors":return this.draco.COLOR;case "texCoord":case "texCoords":return this.draco.TEX_COORD;default:return this.draco.GENERIC}}},{key:"_getPositionAttribute",value:function(attributes){for(var attributeName in attributes){var attribute=attributes[attributeName];if(this._getDracoAttributeType(attributeName,attribute)===this.draco.POSITION)return attribute}return null}}]);return DracoBuilder}();exports["default"]=require}
//# sourceMappingURL=module$node_modules$$loaders_DOT_gl$draco$dist$es5$lib$draco_builder.js.map
