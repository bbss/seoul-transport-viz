{
"version":3,
"file":"module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$helpers$ellipsoid_transform.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@math_DOT_gl/geospatial/dist/es5/ellipsoid/helpers/ellipsoid-transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$geospatial$dist$es5$ellipsoid$helpers$ellipsoid_transform\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = localFrameToFixedFrame;\n\nvar _core = require(\"@math.gl/core\");\n\nvar EPSILON14 = 1e-14;\nvar scratchOrigin = new _core.Vector3();\nvar VECTOR_PRODUCT_LOCAL_FRAME = {\n  up: {\n    south: 'east',\n    north: 'west',\n    west: 'south',\n    east: 'north'\n  },\n  down: {\n    south: 'west',\n    north: 'east',\n    west: 'north',\n    east: 'south'\n  },\n  south: {\n    up: 'west',\n    down: 'east',\n    west: 'down',\n    east: 'up'\n  },\n  north: {\n    up: 'east',\n    down: 'west',\n    west: 'up',\n    east: 'down'\n  },\n  west: {\n    up: 'north',\n    down: 'south',\n    north: 'down',\n    south: 'up'\n  },\n  east: {\n    up: 'south',\n    down: 'north',\n    north: 'up',\n    south: 'down'\n  }\n};\nvar degeneratePositionLocalFrame = {\n  north: [-1, 0, 0],\n  east: [0, 1, 0],\n  up: [0, 0, 1],\n  south: [1, 0, 0],\n  west: [0, -1, 0],\n  down: [0, 0, -1]\n};\nvar scratchAxisVectors = {\n  east: new _core.Vector3(),\n  north: new _core.Vector3(),\n  up: new _core.Vector3(),\n  west: new _core.Vector3(),\n  south: new _core.Vector3(),\n  down: new _core.Vector3()\n};\nvar scratchVector1 = new _core.Vector3();\nvar scratchVector2 = new _core.Vector3();\nvar scratchVector3 = new _core.Vector3();\n\nfunction localFrameToFixedFrame(ellipsoid, firstAxis, secondAxis, thirdAxis, cartesianOrigin, result) {\n  var thirdAxisInferred = VECTOR_PRODUCT_LOCAL_FRAME[firstAxis] && VECTOR_PRODUCT_LOCAL_FRAME[firstAxis][secondAxis];\n  (0, _core.assert)(thirdAxisInferred && (!thirdAxis || thirdAxis === thirdAxisInferred));\n  var firstAxisVector;\n  var secondAxisVector;\n  var thirdAxisVector;\n  var origin = scratchOrigin.copy(cartesianOrigin);\n  var atPole = (0, _core.equals)(origin.x, 0.0, EPSILON14) && (0, _core.equals)(origin.y, 0.0, EPSILON14);\n\n  if (atPole) {\n    var sign = Math.sign(origin.z);\n    firstAxisVector = scratchVector1.fromArray(degeneratePositionLocalFrame[firstAxis]);\n\n    if (firstAxis !== 'east' && firstAxis !== 'west') {\n      firstAxisVector.scale(sign);\n    }\n\n    secondAxisVector = scratchVector2.fromArray(degeneratePositionLocalFrame[secondAxis]);\n\n    if (secondAxis !== 'east' && secondAxis !== 'west') {\n      secondAxisVector.scale(sign);\n    }\n\n    thirdAxisVector = scratchVector3.fromArray(degeneratePositionLocalFrame[thirdAxis]);\n\n    if (thirdAxis !== 'east' && thirdAxis !== 'west') {\n      thirdAxisVector.scale(sign);\n    }\n  } else {\n    var up = scratchAxisVectors.up,\n        east = scratchAxisVectors.east,\n        north = scratchAxisVectors.north;\n    east.set(-origin.y, origin.x, 0.0).normalize();\n    ellipsoid.geodeticSurfaceNormal(origin, up);\n    north.copy(up).cross(east);\n    var down = scratchAxisVectors.down,\n        west = scratchAxisVectors.west,\n        south = scratchAxisVectors.south;\n    down.copy(up).scale(-1);\n    west.copy(east).scale(-1);\n    south.copy(north).scale(-1);\n    firstAxisVector = scratchAxisVectors[firstAxis];\n    secondAxisVector = scratchAxisVectors[secondAxis];\n    thirdAxisVector = scratchAxisVectors[thirdAxis];\n  }\n\n  result[0] = firstAxisVector.x;\n  result[1] = firstAxisVector.y;\n  result[2] = firstAxisVector.z;\n  result[3] = 0.0;\n  result[4] = secondAxisVector.x;\n  result[5] = secondAxisVector.y;\n  result[6] = secondAxisVector.z;\n  result[7] = 0.0;\n  result[8] = thirdAxisVector.x;\n  result[9] = thirdAxisVector.y;\n  result[10] = thirdAxisVector.z;\n  result[11] = 0.0;\n  result[12] = origin.x;\n  result[13] = origin.y;\n  result[14] = origin.z;\n  result[15] = 1.0;\n  return result;\n}\n//# sourceMappingURL=ellipsoid-transform.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","localFrameToFixedFrame","ellipsoid","firstAxis","secondAxis","thirdAxis","cartesianOrigin","result","thirdAxisInferred","VECTOR_PRODUCT_LOCAL_FRAME","_core","assert","origin","scratchOrigin","copy","equals","x","EPSILON14","y","sign","Math","z","firstAxisVector","scratchVector1","fromArray","degeneratePositionLocalFrame","scale","secondAxisVector","scratchVector2","thirdAxisVector","scratchVector3","up","scratchAxisVectors","east","north","set","normalize","geodeticSurfaceNormal","cross","west","south","down","Vector3"]
}
