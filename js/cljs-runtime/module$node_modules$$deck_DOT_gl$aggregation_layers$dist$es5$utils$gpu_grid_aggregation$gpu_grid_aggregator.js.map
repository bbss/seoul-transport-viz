{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator.js",
"lineCount":35,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _shadertools = require(\"@luma.gl/shadertools\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregatorConstants = require(\"./gpu-grid-aggregator-constants\");\n\nvar _aggregationOperationUtils = require(\"../aggregation-operation-utils\");\n\nvar _aggregateToGridVs = _interopRequireDefault(require(\"./aggregate-to-grid-vs.glsl\"));\n\nvar _aggregateToGridFs = _interopRequireDefault(require(\"./aggregate-to-grid-fs.glsl\"));\n\nvar _aggregateAllVs = _interopRequireDefault(require(\"./aggregate-all-vs.glsl\"));\n\nvar _aggregateAllFs = _interopRequireDefault(require(\"./aggregate-all-fs.glsl\"));\n\nvar _transformMeanVs = _interopRequireDefault(require(\"./transform-mean-vs.glsl\"));\n\nvar _resourceUtils = require(\"./../resource-utils.js\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nvar ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\nvar REQUIRED_FEATURES = [_core.FEATURES.WEBGL2, _core.FEATURES.COLOR_ATTACHMENT_RGBA32F, _core.FEATURES.BLEND_EQUATION_MINMAX, _core.FEATURES.FLOAT_BLEND, _core.FEATURES.TEXTURE_FLOAT];\n\nvar GPUGridAggregator = function () {\n  (0, _createClass2[\"default\"])(GPUGridAggregator, null, [{\n    key: \"getAggregationData\",\n    value: function getAggregationData(_ref) {\n      var aggregationData = _ref.aggregationData,\n          maxData = _ref.maxData,\n          minData = _ref.minData,\n          maxMinData = _ref.maxMinData,\n          pixelIndex = _ref.pixelIndex;\n      var index = pixelIndex * _gpuGridAggregatorConstants.PIXEL_SIZE;\n      var results = {};\n\n      if (aggregationData) {\n        results.cellCount = aggregationData[index + 3];\n        results.cellWeight = aggregationData[index];\n      }\n\n      if (maxMinData) {\n        results.maxCellWieght = maxMinData[0];\n        results.minCellWeight = maxMinData[3];\n      } else {\n        if (maxData) {\n          results.maxCellWieght = maxData[0];\n          results.totalCount = maxData[3];\n        }\n\n        if (minData) {\n          results.minCellWeight = minData[0];\n          results.totalCount = maxData[3];\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"getCellData\",\n    value: function getCellData(_ref2) {\n      var countsData = _ref2.countsData,\n          _ref2$size = _ref2.size,\n          size = _ref2$size === void 0 ? 1 : _ref2$size;\n      var numCells = countsData.length / 4;\n      var cellWeights = new Float32Array(numCells * size);\n      var cellCounts = new Uint32Array(numCells);\n\n      for (var i = 0; i < numCells; i++) {\n        for (var sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n          cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n        }\n\n        cellCounts[i] = countsData[i * 4 + 3];\n      }\n\n      return {\n        cellCounts: cellCounts,\n        cellWeights: cellWeights\n      };\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return (0, _core.hasFeatures)(gl, REQUIRED_FEATURES);\n    }\n  }]);\n\n  function GPUGridAggregator(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck2[\"default\"])(this, GPUGridAggregator);\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n      resources: {},\n      results: {}\n    };\n    this._hasGPUSupport = (0, _core.isWebGL2)(gl) && (0, _core.hasFeatures)(this.gl, _core.FEATURES.BLEND_EQUATION_MINMAX, _core.FEATURES.COLOR_ATTACHMENT_RGBA32F, _core.FEATURES.TEXTURE_FLOAT);\n\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  (0, _createClass2[\"default\"])(GPUGridAggregator, [{\n    key: \"delete\",\n    value: function _delete() {\n      var gridAggregationModel = this.gridAggregationModel,\n          allAggregationModel = this.allAggregationModel,\n          meanTransform = this.meanTransform;\n      var _this$state = this.state,\n          textures = _this$state.textures,\n          framebuffers = _this$state.framebuffers,\n          maxMinFramebuffers = _this$state.maxMinFramebuffers,\n          minFramebuffers = _this$state.minFramebuffers,\n          maxFramebuffers = _this$state.maxFramebuffers,\n          meanTextures = _this$state.meanTextures,\n          resources = _this$state.resources;\n      gridAggregationModel && gridAggregationModel[\"delete\"]();\n      allAggregationModel && allAggregationModel[\"delete\"]();\n      meanTransform && meanTransform[\"delete\"]();\n      deleteResources([framebuffers, textures, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources]);\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setState({\n        results: {}\n      });\n\n      var aggregationParams = this._normalizeAggregationParams(opts);\n\n      if (!this._hasGPUSupport) {\n        _core2.log.log(1, 'GPUGridAggregator: not supported')();\n      }\n\n      return this._runAggregation(aggregationParams);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(weightId) {\n      var data = {};\n      var results = this.state.results;\n\n      if (!results[weightId].aggregationData) {\n        results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n      }\n\n      data.aggregationData = results[weightId].aggregationData;\n\n      for (var arrayName in ARRAY_BUFFER_MAP) {\n        var bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n        if (results[weightId][arrayName] || results[weightId][bufferName]) {\n          results[weightId][arrayName] = results[weightId][arrayName] || results[weightId][bufferName].getData();\n          data[arrayName] = results[weightId][arrayName];\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders() {\n      var shaderOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setState({\n        shaderOptions: shaderOptions,\n        modelDirty: true\n      });\n    }\n  }, {\n    key: \"_normalizeAggregationParams\",\n    value: function _normalizeAggregationParams(opts) {\n      var aggregationParams = Object.assign({}, _gpuGridAggregatorConstants.DEFAULT_RUN_PARAMS, opts);\n      var weights = aggregationParams.weights;\n\n      if (weights) {\n        aggregationParams.weights = normalizeWeightParams(weights);\n      }\n\n      return aggregationParams;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(updateObject) {\n      Object.assign(this.state, updateObject);\n    }\n  }, {\n    key: \"_getAggregateData\",\n    value: function _getAggregateData(opts) {\n      var results = {};\n      var _this$state2 = this.state,\n          textures = _this$state2.textures,\n          framebuffers = _this$state2.framebuffers,\n          maxMinFramebuffers = _this$state2.maxMinFramebuffers,\n          minFramebuffers = _this$state2.minFramebuffers,\n          maxFramebuffers = _this$state2.maxFramebuffers,\n          resources = _this$state2.resources;\n      var weights = opts.weights;\n\n      for (var id in weights) {\n        results[id] = {};\n        var _weights$id = weights[id],\n            needMin = _weights$id.needMin,\n            needMax = _weights$id.needMax,\n            combineMaxMin = _weights$id.combineMaxMin;\n        results[id].aggregationTexture = textures[id];\n        results[id].aggregationBuffer = (0, _core.readPixelsToBuffer)(framebuffers[id], {\n          target: weights[id].aggregationBuffer,\n          sourceType: 5126\n        });\n\n        if (needMin && needMax && combineMaxMin) {\n          results[id].maxMinBuffer = (0, _core.readPixelsToBuffer)(maxMinFramebuffers[id], {\n            target: weights[id].maxMinBuffer,\n            sourceType: 5126\n          });\n          results[id].maxMinTexture = resources[\"\".concat(id, \"-maxMinTexture\")];\n        } else {\n          if (needMin) {\n            results[id].minBuffer = (0, _core.readPixelsToBuffer)(minFramebuffers[id], {\n              target: weights[id].minBuffer,\n              sourceType: 5126\n            });\n            results[id].minTexture = resources[\"\".concat(id, \"-minTexture\")];\n          }\n\n          if (needMax) {\n            results[id].maxBuffer = (0, _core.readPixelsToBuffer)(maxFramebuffers[id], {\n              target: weights[id].maxBuffer,\n              sourceType: 5126\n            });\n            results[id].maxTexture = resources[\"\".concat(id, \"-maxTexture\")];\n          }\n        }\n      }\n\n      this._trackGPUResultBuffers(results, weights);\n\n      return results;\n    }\n  }, {\n    key: \"_renderAggregateData\",\n    value: function _renderAggregateData(opts) {\n      var cellSize = opts.cellSize,\n          projectPoints = opts.projectPoints,\n          attributes = opts.attributes,\n          moduleSettings = opts.moduleSettings,\n          numCol = opts.numCol,\n          numRow = opts.numRow,\n          weights = opts.weights,\n          translation = opts.translation,\n          scaling = opts.scaling;\n      var _this$state3 = this.state,\n          maxMinFramebuffers = _this$state3.maxMinFramebuffers,\n          minFramebuffers = _this$state3.minFramebuffers,\n          maxFramebuffers = _this$state3.maxFramebuffers;\n      var gridSize = [numCol, numRow];\n      var parameters = {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1]\n      };\n      var uniforms = {\n        cellSize: cellSize,\n        gridSize: gridSize,\n        projectPoints: projectPoints,\n        translation: translation,\n        scaling: scaling\n      };\n\n      for (var id in weights) {\n        var _weights$id2 = weights[id],\n            needMin = _weights$id2.needMin,\n            needMax = _weights$id2.needMax;\n        var combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n        this._renderToWeightsTexture({\n          id: id,\n          parameters: parameters,\n          moduleSettings: moduleSettings,\n          uniforms: uniforms,\n          gridSize: gridSize,\n          attributes: attributes,\n          weights: weights\n        });\n\n        if (combineMaxMin) {\n          this._renderToMaxMinTexture({\n            id: id,\n            parameters: Object.assign({}, parameters, {\n              blendEquation: _gpuGridAggregatorConstants.MAX_MIN_BLEND_EQUATION\n            }),\n            gridSize: gridSize,\n            minOrMaxFb: maxMinFramebuffers[id],\n            clearParams: {\n              clearColor: [0, 0, 0, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT]\n            },\n            combineMaxMin: combineMaxMin\n          });\n        } else {\n          if (needMin) {\n            this._renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: _gpuGridAggregatorConstants.MIN_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: minFramebuffers[id],\n              clearParams: {\n                clearColor: [_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, 0]\n              },\n              combineMaxMin: combineMaxMin\n            });\n          }\n\n          if (needMax) {\n            this._renderToMaxMinTexture({\n              id: id,\n              parameters: Object.assign({}, parameters, {\n                blendEquation: _gpuGridAggregatorConstants.MAX_BLEND_EQUATION\n              }),\n              gridSize: gridSize,\n              minOrMaxFb: maxFramebuffers[id],\n              clearParams: {\n                clearColor: [0, 0, 0, 0]\n              },\n              combineMaxMin: combineMaxMin\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_renderToMaxMinTexture\",\n    value: function _renderToMaxMinTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          gridSize = opts.gridSize,\n          minOrMaxFb = opts.minOrMaxFb,\n          combineMaxMin = opts.combineMaxMin,\n          _opts$clearParams = opts.clearParams,\n          clearParams = _opts$clearParams === void 0 ? {} : _opts$clearParams;\n      var framebuffers = this.state.framebuffers;\n      var gl = this.gl,\n          allAggregationModel = this.allAggregationModel;\n      minOrMaxFb.bind();\n      gl.viewport(0, 0, gridSize[0], gridSize[1]);\n      (0, _core.withParameters)(gl, clearParams, function () {\n        gl.clear(16384);\n      });\n      allAggregationModel.draw({\n        parameters: parameters,\n        uniforms: {\n          uSampler: framebuffers[id].texture,\n          gridSize: gridSize,\n          combineMaxMin: combineMaxMin\n        }\n      });\n      minOrMaxFb.unbind();\n    }\n  }, {\n    key: \"_renderToWeightsTexture\",\n    value: function _renderToWeightsTexture(opts) {\n      var id = opts.id,\n          parameters = opts.parameters,\n          moduleSettings = opts.moduleSettings,\n          uniforms = opts.uniforms,\n          gridSize = opts.gridSize,\n          weights = opts.weights;\n      var _this$state4 = this.state,\n          framebuffers = _this$state4.framebuffers,\n          equations = _this$state4.equations,\n          weightAttributes = _this$state4.weightAttributes;\n      var gl = this.gl,\n          gridAggregationModel = this.gridAggregationModel;\n      var operation = weights[id].operation;\n      framebuffers[id].bind();\n      gl.viewport(0, 0, gridSize[0], gridSize[1]);\n      var clearColor = operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MIN ? [_gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, _gpuGridAggregatorConstants.MAX_32_BIT_FLOAT, 0] : [0, 0, 0, 0];\n      (0, _core.withParameters)(gl, {\n        clearColor: clearColor\n      }, function () {\n        gl.clear(16384);\n      });\n      var attributes = {\n        weights: weightAttributes[id]\n      };\n      gridAggregationModel.draw({\n        parameters: Object.assign({}, parameters, {\n          blendEquation: equations[id]\n        }),\n        moduleSettings: moduleSettings,\n        uniforms: uniforms,\n        attributes: attributes\n      });\n      framebuffers[id].unbind();\n\n      if (operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MEAN) {\n        var _this$state5 = this.state,\n            meanTextures = _this$state5.meanTextures,\n            textures = _this$state5.textures;\n        var transformOptions = {\n          _sourceTextures: {\n            aggregationValues: meanTextures[id]\n          },\n          _targetTexture: textures[id],\n          elementCount: textures[id].width * textures[id].height\n        };\n\n        if (this.meanTransform) {\n          this.meanTransform.update(transformOptions);\n        } else {\n          this.meanTransform = getMeanTransform(gl, transformOptions);\n        }\n\n        this.meanTransform.run({\n          parameters: {\n            blend: false,\n            depthTest: false\n          }\n        });\n        framebuffers[id].attach((0, _defineProperty2[\"default\"])({}, 36064, textures[id]));\n      }\n    }\n  }, {\n    key: \"_runAggregation\",\n    value: function _runAggregation(opts) {\n      this._updateModels(opts);\n\n      this._setupFramebuffers(opts);\n\n      this._renderAggregateData(opts);\n\n      var results = this._getAggregateData(opts);\n\n      this.setState({\n        results: results\n      });\n      return results;\n    }\n  }, {\n    key: \"_setupFramebuffers\",\n    value: function _setupFramebuffers(opts) {\n      var _this$state6 = this.state,\n          textures = _this$state6.textures,\n          framebuffers = _this$state6.framebuffers,\n          maxMinFramebuffers = _this$state6.maxMinFramebuffers,\n          minFramebuffers = _this$state6.minFramebuffers,\n          maxFramebuffers = _this$state6.maxFramebuffers,\n          meanTextures = _this$state6.meanTextures,\n          equations = _this$state6.equations;\n      var weights = opts.weights;\n      var numCol = opts.numCol,\n          numRow = opts.numRow;\n      var framebufferSize = {\n        width: numCol,\n        height: numRow\n      };\n\n      for (var id in weights) {\n        var _weights$id3 = weights[id],\n            needMin = _weights$id3.needMin,\n            needMax = _weights$id3.needMax,\n            combineMaxMin = _weights$id3.combineMaxMin,\n            operation = _weights$id3.operation;\n        textures[id] = weights[id].aggregationTexture || textures[id] || (0, _resourceUtils.getFloatTexture)(this.gl, {\n          id: \"\".concat(id, \"-texture\"),\n          width: numCol,\n          height: numRow\n        });\n        textures[id].resize(framebufferSize);\n        var texture = textures[id];\n\n        if (operation === _aggregationOperationUtils.AGGREGATION_OPERATION.MEAN) {\n          meanTextures[id] = meanTextures[id] || (0, _resourceUtils.getFloatTexture)(this.gl, {\n            id: \"\".concat(id, \"-mean-texture\"),\n            width: numCol,\n            height: numRow\n          });\n          meanTextures[id].resize(framebufferSize);\n          texture = meanTextures[id];\n        }\n\n        if (framebuffers[id]) {\n          framebuffers[id].attach((0, _defineProperty2[\"default\"])({}, 36064, texture));\n        } else {\n          framebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n            id: \"\".concat(id, \"-fb\"),\n            width: numCol,\n            height: numRow,\n            texture: texture\n          });\n        }\n\n        framebuffers[id].resize(framebufferSize);\n        equations[id] = _gpuGridAggregatorConstants.EQUATION_MAP[operation] || _gpuGridAggregatorConstants.EQUATION_MAP.SUM;\n\n        if (needMin || needMax) {\n          if (needMin && needMax && combineMaxMin) {\n            if (!maxMinFramebuffers[id]) {\n              texture = weights[id].maxMinTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxMinTexture\"));\n              maxMinFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                id: \"\".concat(id, \"-maxMinFb\"),\n                texture: texture\n              });\n            }\n          } else {\n            if (needMin) {\n              if (!minFramebuffers[id]) {\n                texture = weights[id].minTexture || this._getMinMaxTexture(\"\".concat(id, \"-minTexture\"));\n                minFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                  id: \"\".concat(id, \"-minFb\"),\n                  texture: texture\n                });\n              }\n            }\n\n            if (needMax) {\n              if (!maxFramebuffers[id]) {\n                texture = weights[id].maxTexture || this._getMinMaxTexture(\"\".concat(id, \"-maxTexture\"));\n                maxFramebuffers[id] = (0, _resourceUtils.getFramebuffer)(this.gl, {\n                  id: \"\".concat(id, \"-maxFb\"),\n                  texture: texture\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getMinMaxTexture\",\n    value: function _getMinMaxTexture(name) {\n      var resources = this.state.resources;\n\n      if (!resources[name]) {\n        resources[name] = (0, _resourceUtils.getFloatTexture)(this.gl, {\n          id: \"resourceName\"\n        });\n      }\n\n      return resources[name];\n    }\n  }, {\n    key: \"_setupModels\",\n    value: function _setupModels() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$numCol = _ref3.numCol,\n          numCol = _ref3$numCol === void 0 ? 0 : _ref3$numCol,\n          _ref3$numRow = _ref3.numRow,\n          numRow = _ref3$numRow === void 0 ? 0 : _ref3$numRow;\n\n      var gl = this.gl;\n      var shaderOptions = this.state.shaderOptions;\n\n      if (this.gridAggregationModel) {\n        this.gridAggregationModel[\"delete\"]();\n      }\n\n      this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n\n      if (!this.allAggregationModel) {\n        var instanceCount = numCol * numRow;\n        this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n      }\n    }\n  }, {\n    key: \"_setupWeightAttributes\",\n    value: function _setupWeightAttributes(opts) {\n      var weightAttributes = this.state.weightAttributes;\n      var weights = opts.weights;\n\n      for (var id in weights) {\n        weightAttributes[id] = opts.attributes[id];\n      }\n    }\n  }, {\n    key: \"_trackGPUResultBuffers\",\n    value: function _trackGPUResultBuffers(results, weights) {\n      var resources = this.state.resources;\n\n      for (var id in results) {\n        if (results[id]) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = BUFFER_NAMES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var bufferName = _step.value;\n\n              if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n                var name = \"gpu-result-\".concat(id, \"-\").concat(bufferName);\n\n                if (resources[name]) {\n                  resources[name][\"delete\"]();\n                }\n\n                resources[name] = results[id][bufferName];\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateModels\",\n    value: function _updateModels(opts) {\n      var vertexCount = opts.vertexCount,\n          attributes = opts.attributes,\n          numCol = opts.numCol,\n          numRow = opts.numRow;\n      var modelDirty = this.state.modelDirty;\n\n      if (modelDirty) {\n        this._setupModels(opts);\n\n        this.setState({\n          modelDirty: false\n        });\n      }\n\n      this._setupWeightAttributes(opts);\n\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(attributes);\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }]);\n  return GPUGridAggregator;\n}();\n\nexports[\"default\"] = GPUGridAggregator;\n\nfunction normalizeWeightParams(weights) {\n  var result = {};\n\n  for (var id in weights) {\n    result[id] = Object.assign({}, _gpuGridAggregatorConstants.DEFAULT_WEIGHT_PARAMS, weights[id]);\n  }\n\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(function (obj) {\n    for (var name in obj) {\n      obj[name][\"delete\"]();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  var shaders = (0, _core2._mergeShaders)({\n    vs: _aggregateToGridVs[\"default\"],\n    fs: _aggregateToGridFs[\"default\"],\n    modules: [_shadertools.fp64arithmetic, _core2.project32]\n  }, shaderOptions);\n  return new _core.Model(gl, _objectSpread({\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: 0\n  }, shaders));\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new _core.Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: _aggregateAllVs[\"default\"],\n    fs: _aggregateAllFs[\"default\"],\n    modules: [_shadertools.fp64arithmetic],\n    vertexCount: 1,\n    drawMode: 0,\n    isInstanced: true,\n    instanceCount: instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new _core.Transform(gl, Object.assign({}, {\n    vs: _transformMeanVs[\"default\"],\n    _targetTextureVarying: 'meanValues'\n  }, opts));\n}\n//# sourceMappingURL=gpu-grid-aggregator.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","deleteResources","resources","Array","isArray","obj","name","_interopRequireDefault","value","_classCallCheck2","_createClass2","_core","_shadertools","_core2","_gpuGridAggregatorConstants","_aggregationOperationUtils","_aggregateToGridVs","_aggregateToGridFs","_aggregateAllVs","_aggregateAllFs","_transformMeanVs","_resourceUtils","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","gl","opts","undefined","id","state","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","results","_hasGPUSupport","isWebGL2","hasFeatures","_setupModels","getAggregationData","_ref","aggregationData","index","pixelIndex","PIXEL_SIZE","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","getCellData","_ref2","countsData","_ref2$size","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","sizeIndex","isSupported","_delete","gridAggregationModel","allAggregationModel","meanTransform","_this$state","run","setState","aggregationParams","_normalizeAggregationParams","log","_runAggregation","getData","weightId","data","aggregationBuffer","arrayName","bufferName","updateShaders","shaderOptions","modelDirty","assign","DEFAULT_RUN_PARAMS","weights","result","DEFAULT_WEIGHT_PARAMS","updateObject","_getAggregateData","_this$state2","_weights$id","needMin","needMax","combineMaxMin","aggregationTexture","readPixelsToBuffer","sourceType","maxMinBuffer","maxMinTexture","concat","minBuffer","minTexture","maxBuffer","maxTexture","_trackGPUResultBuffers","_renderAggregateData","attributes","moduleSettings","_this$state3","gridSize","numCol","numRow","parameters","blend","depthTest","blendFunc","uniforms","cellSize","projectPoints","translation","scaling","_weights$id2","_renderToWeightsTexture","_renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","_opts$clearParams","bind","viewport","withParameters","clear","draw","uSampler","texture","unbind","_this$state4","operation","AGGREGATION_OPERATION","MIN","MEAN","_this$state5","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","width","height","update","Transform","vs","_targetTextureVarying","attach","_updateModels","_setupFramebuffers","_this$state6","framebufferSize","_weights$id3","getFloatTexture","resize","getFramebuffer","EQUATION_MAP","SUM","_getMinMaxTexture","_ref3","_ref3$numCol","_ref3$numRow","shaders","_mergeShaders","fs","modules","fp64arithmetic","project32","Model","vertexCount","drawMode","isInstanced","instanceCount","position","_setupWeightAttributes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","done","next","err","setVertexCount","setAttributes","setInstanceCount"]
}
