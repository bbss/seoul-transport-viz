shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$scale_utils=function(global,require,module,exports){function getScale(domain,range,scaleFunction){scaleFunction.domain=function(){return domain};scaleFunction.range=function(){return range};return scaleFunction}function getQuantizeScale(domain,range){return getScale(domain,range,function(value){return quantizeScale(domain,range,value)})}function getLinearScale(domain,range){return getScale(domain,range,function(value){return linearScale(domain,
range,value)})}function getQuantileScale(domain,range){for(var sortedDomain=domain.sort(ascending),i=0,n=Math.max(1,range.length),thresholds=Array(n-1);++i<n;)thresholds[i-1]=threshold(sortedDomain,i/n);sortedDomain=function(value){for(var lo=0,hi=thresholds.length;lo<hi;){var mid=lo+hi>>>1;0<thresholds[mid]-value?hi=mid:lo=mid+1}return range[lo]};sortedDomain.thresholds=function(){return thresholds};return getScale(domain,range,sortedDomain)}function ascending(a,b){return a-b}function threshold(domain,
fraction){var domainLength=domain.length;if(0>=fraction||2>domainLength)return domain[0];if(1<=fraction)return domain[domainLength-1];fraction*=domainLength-1;domainLength=Math.floor(fraction);var low=domain[domainLength];return low+(domain[domainLength+1]-low)*(fraction-domainLength)}function getOrdinalScale(domain,range){var domainMap=new Map,uniqueDomain=[],_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=domain[Symbol.iterator](),_step;!(_iteratorNormalCompletion=
(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var d$jscomp$0=_step.value,key$jscomp$0="".concat(d$jscomp$0);domainMap.has(key$jscomp$0)||domainMap.set(key$jscomp$0,uniqueDomain.push(d$jscomp$0))}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&null!=_iterator["return"])_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError;}}return getScale(domain,range,function(value){var key="".concat(value),d=domainMap.get(key);void 0===
d&&(d=uniqueDomain.push(value),domainMap.set(key,d));return range[(d-1)%range.length]})}function quantizeScale(domain,range,value){var domainRange=domain[1]-domain[0];return 0>=domainRange?(_core.log.warn("quantizeScale: invalid domain, returning range[0]")(),range[0]):range[Math.max(Math.min(Math.floor((value-domain[0])/(domainRange/range.length)),range.length-1),0)]}function linearScale(domain,range,value){return(value-domain[0])/(domain[1]-domain[0])*(range[1]-range[0])+range[0]}function notNullOrUndefined(d){return void 0!==
d&&null!==d}function unique(values){var results=[];values.forEach(function(v){!results.includes(v)&&notNullOrUndefined(v)&&results.push(v)});return results}function getTruthyValues(data,valueAccessor){return("function"===typeof valueAccessor?data.map(valueAccessor):data).filter(notNullOrUndefined)}function getLinearDomain(data,valueAccessor){data=getTruthyValues(data,valueAccessor).sort();return data.length?[data[0],data[data.length-1]]:[0,0]}function getOrdinalDomain(data,valueAccessor){return unique(getTruthyValues(data,
valueAccessor))}Object.defineProperty(exports,"__esModule",{value:!0});exports.getScale=getScale;exports.getQuantizeScale=getQuantizeScale;exports.getLinearScale=getLinearScale;exports.getQuantileScale=getQuantileScale;exports.getOrdinalScale=getOrdinalScale;exports.quantizeScale=quantizeScale;exports.linearScale=linearScale;exports.unique=unique;exports.getLinearDomain=getLinearDomain;exports.getQuantileDomain=function(data,valueAccessor){return getTruthyValues(data,valueAccessor)};exports.getOrdinalDomain=
getOrdinalDomain;exports.getScaleDomain=function(scaleType,data,valueAccessor){switch(scaleType){case "quantize":case "linear":return getLinearDomain(data,valueAccessor);case "quantile":return getTruthyValues(data,valueAccessor);case "ordinal":return getOrdinalDomain(data,valueAccessor);default:return getLinearDomain(data,valueAccessor)}};exports.clamp=function(value,min,max){return Math.max(min,Math.min(max,value))};exports.getScaleFunctionByScaleType=function(scaleType){switch(scaleType){case "quantize":return getQuantizeScale;
case "linear":return getLinearScale;case "quantile":return getQuantileScale;case "ordinal":return getOrdinalScale;default:return getQuantizeScale}};var _core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index")}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$scale_utils.js.map
