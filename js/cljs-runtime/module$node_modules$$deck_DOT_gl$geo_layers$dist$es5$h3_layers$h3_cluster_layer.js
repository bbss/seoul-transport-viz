shadow$provide.module$node_modules$$deck_DOT_gl$geo_layers$dist$es5$h3_layers$h3_cluster_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=
global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_h3Js=require("module$node_modules$h3_js$dist$browser$h3_js"),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_layers=require("module$node_modules$$deck_DOT_gl$layers$dist$es5$index");require=Object.assign({getHexagons:{type:"accessor",
value:function(d){return d.hexagons}}},_layers.PolygonLayer.defaultProps);global=function(_CompositeLayer){function H3ClusterLayer(){(0,_classCallCheck2["default"])(this,H3ClusterLayer);return(0,_possibleConstructorReturn2["default"])(this,(0,_getPrototypeOf2["default"])(H3ClusterLayer).apply(this,arguments))}(0,_inherits2["default"])(H3ClusterLayer,_CompositeLayer);(0,_createClass2["default"])(H3ClusterLayer,[{key:"updateState",value:function(_ref){var props=_ref.props;_ref=_ref.changeFlags;if(_ref.dataChanged||
_ref.updateTriggers&&_ref.updateTriggers.getHexagons){var data=props.data;props=props.getHexagons;_ref=[];data=(0,_core.createIterable)(data);var iterable=data.iterable;data=data.objectInfo;var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=iterable[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var object=_step.value;data.index++;var hexagons=props(object,data),multiPolygon=(0,_h3Js.h3SetToMultiPolygon)(hexagons,
!0);iterable=!0;var _didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=multiPolygon[Symbol.iterator](),_step2;!(iterable=(_step2=_iterator2.next()).done);iterable=!0)_ref.push(this.getSubLayerRow({polygon:_step2.value},object,data.index))}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{if(!iterable&&null!=_iterator2["return"])_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2;}}}}catch(err$432){_didIteratorError=!0,_iteratorError=err$432}finally{try{if(!_iteratorNormalCompletion&&
null!=_iterator["return"])_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError;}}this.setState({polygons:_ref})}}},{key:"renderLayers",value:function(){var _this$props=this.props,elevationScale=_this$props.elevationScale,extruded=_this$props.extruded,wireframe=_this$props.wireframe,filled=_this$props.filled,stroked=_this$props.stroked,lineWidthScale=_this$props.lineWidthScale,lineWidthMinPixels=_this$props.lineWidthMinPixels,lineWidthMaxPixels=_this$props.lineWidthMaxPixels,lineJointRounded=
_this$props.lineJointRounded,lineMiterLimit=_this$props.lineMiterLimit,lineDashJustified=_this$props.lineDashJustified,material=_this$props.material,getFillColor=_this$props.getFillColor,getLineColor=_this$props.getLineColor,getLineWidth=_this$props.getLineWidth,getLineDashArray=_this$props.getLineDashArray,getElevation=_this$props.getElevation;_this$props=_this$props.updateTriggers;return new (this.getSubLayerClass("cluster-region",_layers.PolygonLayer))({filled:filled,wireframe:wireframe,extruded:extruded,
elevationScale:elevationScale,stroked:stroked,lineWidthScale:lineWidthScale,lineWidthMinPixels:lineWidthMinPixels,lineWidthMaxPixels:lineWidthMaxPixels,lineJointRounded:lineJointRounded,lineMiterLimit:lineMiterLimit,lineDashJustified:lineDashJustified,material:material,getFillColor:this.getSubLayerAccessor(getFillColor),getLineColor:this.getSubLayerAccessor(getLineColor),getLineWidth:this.getSubLayerAccessor(getLineWidth),getLineDashArray:this.getSubLayerAccessor(getLineDashArray),getElevation:this.getSubLayerAccessor(getElevation)},
this.getSubLayerProps({id:"cluster-region",updateTriggers:_this$props}),{data:this.state.polygons,getPolygon:function(d){return d.polygon}})}}]);return H3ClusterLayer}(_core.CompositeLayer);exports["default"]=global;global.defaultProps=require;global.layerName="H3ClusterLayer"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$geo_layers$dist$es5$h3_layers$h3_cluster_layer.js.map
