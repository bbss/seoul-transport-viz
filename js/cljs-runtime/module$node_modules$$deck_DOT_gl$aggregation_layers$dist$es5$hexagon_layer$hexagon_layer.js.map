{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$hexagon_layer$hexagon_layer.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/hexagon-layer/hexagon-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$hexagon_layer$hexagon_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _layers = require(\"@deck.gl/layers\");\n\nvar _colorUtils = require(\"../utils/color-utils\");\n\nvar _hexagonAggregator = require(\"./hexagon-aggregator\");\n\nvar _cpuAggregator = _interopRequireDefault(require(\"../utils/cpu-aggregator\"));\n\nvar _aggregationLayer = _interopRequireDefault(require(\"../aggregation-layer\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction nop() {}\n\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: _colorUtils.defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: _hexagonAggregator.pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\n\nvar HexagonLayer = function (_AggregationLayer) {\n  (0, _inherits2[\"default\"])(HexagonLayer, _AggregationLayer);\n\n  function HexagonLayer() {\n    (0, _classCallCheck2[\"default\"])(this, HexagonLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(HexagonLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(HexagonLayer, [{\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new _cpuAggregator[\"default\"]({\n        getAggregator: function getAggregator(props) {\n          return props.hexagonAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.radius;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state,\n        hexagonVertices: null\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HexagonLayer.prototype), \"updateState\", this).call(this, opts);\n      var _this$state = this.state,\n          cpuAggregator = _this$state.cpuAggregator,\n          oldVertices = _this$state.hexagonVertices;\n\n      if (opts.changeFlags.propsOrDataChanged) {\n        this.setState({\n          aggregatorState: cpuAggregator.updateState(opts, {\n            viewport: this.context.viewport,\n            attributes: this.getAttributes()\n          })\n        });\n      }\n\n      var _ref2 = cpuAggregator.state.layerData || {},\n          hexagonVertices = _ref2.hexagonVertices;\n\n      if (hexagonVertices && oldVertices !== hexagonVertices) {\n        var vertices = this.convertLatLngToMeterOffset(hexagonVertices);\n\n        if (vertices) {\n          this.setState({\n            hexagonVertices: hexagonVertices,\n            vertices: vertices\n          });\n        }\n      } else {\n        this.updateRadiusAngle();\n      }\n    }\n  }, {\n    key: \"updateRadiusAngle\",\n    value: function updateRadiusAngle(vertices) {\n      var viewport = this.context.viewport;\n\n      var _viewport$getDistance = viewport.getDistanceScales(),\n          unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n\n      var cpuAggregator = this.state.cpuAggregator;\n\n      if (cpuAggregator.state.layerData && cpuAggregator.state.layerData.radiusCommon) {\n        var radiusCommon = cpuAggregator.state.layerData.radiusCommon;\n        var radius = radiusCommon / unitsPerMeter[0];\n        this.setState({\n          angle: 90,\n          radius: radius\n        });\n      }\n    }\n  }, {\n    key: \"convertLatLngToMeterOffset\",\n    value: function convertLatLngToMeterOffset(hexagonVertices) {\n      var viewport = this.context.viewport;\n\n      if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n        var vertex0 = hexagonVertices[0];\n        var vertex3 = hexagonVertices[3];\n        var centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n        var centroidFlat = viewport.projectFlat(centroid);\n\n        var _viewport$getDistance2 = viewport.getDistanceScales(centroid),\n            metersPerUnit = _viewport$getDistance2.metersPerUnit;\n\n        var vertices = hexagonVertices.map(function (vt) {\n          var vtFlat = viewport.projectFlat(vt);\n          return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n        });\n        return vertices;\n      }\n\n      _core.log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$state2 = this.state,\n          angle = _this$state2.angle,\n          radius = _this$state2.radius,\n          cpuAggregator = _this$state2.cpuAggregator,\n          vertices = _this$state2.vertices;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell', _layers.ColumnLayer);\n\n      var updateTriggers = this._getSublayerUpdateTriggers();\n\n      var geometry = vertices && vertices.length ? {\n        vertices: vertices,\n        radius: 1\n      } : {\n        radius: radius,\n        angle: angle\n      };\n      return new SubLayerClass(_objectSpread({}, geometry, {\n        diskResolution: 6,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        coverage: coverage,\n        material: material,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }), this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: cpuAggregator.state.layerData.data\n      });\n    }\n  }]);\n  return HexagonLayer;\n}(_aggregationLayer[\"default\"]);\n\nexports[\"default\"] = HexagonLayer;\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n//# sourceMappingURL=hexagon-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","nop","_interopRequireDefault","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_core","_layers","_colorUtils","_hexagonAggregator","_cpuAggregator","_aggregationLayer","defaultProps","colorDomain","colorRange","defaultColorRange","getColorValue","type","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","pointToHexbin","getPosition","position","material","_filterData","optional","HexagonLayer","_AggregationLayer","shouldUpdateState","_ref","changeFlags","somethingChanged","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","hexagonVertices","getAttributeManager","attributeManager","add","positions","size","accessor","updateState","opts","prototype","call","_this$state","oldVertices","propsOrDataChanged","setState","viewport","context","attributes","getAttributes","layerData","vertices","convertLatLngToMeterOffset","updateRadiusAngle","unitsPerMeter","getDistanceScales","_viewport$getDistance","radiusCommon","angle","Array","isArray","vertex0","vertex3","centroid","centroidFlat","projectFlat","metersPerUnit","_viewport$getDistance2","map","vt","vtFlat","log","error","getPickingInfo","_ref3","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","_this$props","transitions","_this$state2","SubLayerClass","getSubLayerClass","ColumnLayer","updateTriggers","geometry","diskResolution","getFillColor","bind","getElevation","getSubLayerProps","id","data","layerName"]
}
