shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$icon_layer$icon_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=
global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_core2=require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_iconLayerVertex=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$icon_layer$icon_layer_vertex_glsl")),
_iconLayerFragment=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$icon_layer$icon_layer_fragment_glsl")),_iconManager=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$icon_layer$icon_manager")),DEFAULT_COLOR=[0,0,0,255];require={iconAtlas:{type:"object",value:null,async:!0},iconMapping:{type:"object",value:{},async:!0},sizeScale:{type:"number",value:1,min:0},billboard:!0,sizeUnits:"pixels",sizeMinPixels:{type:"number",min:0,value:0},sizeMaxPixels:{type:"number",min:0,
value:Number.MAX_SAFE_INTEGER},alphaCutoff:{type:"number",value:.05,min:0,max:1},getPosition:{type:"accessor",value:function(x){return x.position}},getIcon:{type:"accessor",value:function(x){return x.icon}},getColor:{type:"accessor",value:DEFAULT_COLOR},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]}};global=function(_Layer){function IconLayer(){(0,_classCallCheck2["default"])(this,IconLayer);return(0,_possibleConstructorReturn2["default"])(this,
(0,_getPrototypeOf2["default"])(IconLayer).apply(this,arguments))}(0,_inherits2["default"])(IconLayer,_Layer);(0,_createClass2["default"])(IconLayer,[{key:"getShaders",value:function(){return(0,_get2["default"])((0,_getPrototypeOf2["default"])(IconLayer.prototype),"getShaders",this).call(this,{vs:_iconLayerVertex["default"],fs:_iconLayerFragment["default"],modules:[_core.project32,_core.picking]})}},{key:"initializeState",value:function(){var _this=this;this.state={iconManager:new _iconManager["default"](this.context.gl,
{onUpdate:function(){return _this._onUpdate()}})};this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceOffsets:{size:2,accessor:"getIcon",transform:this.getInstanceOffset},instanceIconFrames:{size:4,accessor:"getIcon",transform:this.getInstanceIconFrame},instanceColorModes:{size:1,type:5121,accessor:"getIcon",transform:this.getInstanceColorMode},
instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,transition:!0,accessor:"getColor",defaultValue:DEFAULT_COLOR},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instancePixelOffset:{size:2,transition:!0,accessor:"getPixelOffset"}})}},{key:"updateState",value:function(_ref){var oldProps=_ref.oldProps,props=_ref.props,changeFlags=_ref.changeFlags;(0,_get2["default"])((0,_getPrototypeOf2["default"])(IconLayer.prototype),"updateState",this).call(this,{props:props,oldProps:oldProps,
changeFlags:changeFlags});_ref=this.getAttributeManager();var iconAtlas=props.iconAtlas,iconMapping=props.iconMapping,data=props.data,getIcon=props.getIcon,iconManager=this.state.iconManager;iconManager.setProps({loadOptions:props.loadOptions});var iconMappingChanged=!1;iconAtlas||this.internalState.isAsyncPropLoading("iconAtlas")?(oldProps.iconAtlas!==props.iconAtlas&&iconManager.setProps({iconAtlas:iconAtlas,autoPacking:!1}),oldProps.iconMapping!==props.iconMapping&&(iconManager.setProps({iconMapping:iconMapping}),
iconMappingChanged=!0)):iconManager.setProps({autoPacking:!0});if(changeFlags.dataChanged||changeFlags.updateTriggersChanged&&(changeFlags.updateTriggersChanged.all||changeFlags.updateTriggersChanged.getIcon))iconManager.setProps({data:data,getIcon:getIcon}),iconMappingChanged=!0;iconMappingChanged&&(_ref.invalidate("instanceOffsets"),_ref.invalidate("instanceIconFrames"),_ref.invalidate("instanceColorModes"));if(changeFlags.extensionsChanged){oldProps=this.context.gl;if(this.state.model)this.state.model["delete"]();
this.setState({model:this._getModel(oldProps)});_ref.invalidateAll()}}},{key:"finalizeState",value:function(){(0,_get2["default"])((0,_getPrototypeOf2["default"])(IconLayer.prototype),"finalizeState",this).call(this);this.state.iconManager.finalize()}},{key:"draw",value:function(_ref2){_ref2=_ref2.uniforms;var _this$props=this.props,sizeScale=_this$props.sizeScale,sizeMinPixels=_this$props.sizeMinPixels,sizeMaxPixels=_this$props.sizeMaxPixels,sizeUnits=_this$props.sizeUnits,billboard=_this$props.billboard;
_this$props=_this$props.alphaCutoff;var viewport=this.context.viewport,iconsTexture=this.state.iconManager.getTexture();iconsTexture&&iconsTexture.loaded&&this.state.model.setUniforms(Object.assign({},_ref2,{iconsTexture:iconsTexture,iconsTextureDim:[iconsTexture.width,iconsTexture.height],sizeScale:sizeScale*("pixels"===sizeUnits?viewport.metersPerPixel:1),sizeMinPixels:sizeMinPixels,sizeMaxPixels:sizeMaxPixels,billboard:billboard,alphaCutoff:_this$props})).draw()}},{key:"_getModel",value:function(gl){return new _core2.Model(gl,
Object.assign({},this.getShaders(),{id:this.props.id,geometry:new _core2.Geometry({drawMode:6,attributes:{positions:{size:2,value:new Float32Array([-1,-1,-1,1,1,1,1,-1])}}}),isInstanced:!0}))}},{key:"_onUpdate",value:function(){this.setNeedsRedraw()}},{key:"getInstanceOffset",value:function(icon){icon=this.state.iconManager.getIconMapping(icon);return[icon.width/2-icon.anchorX||0,icon.height/2-icon.anchorY||0]}},{key:"getInstanceColorMode",value:function(icon){return this.state.iconManager.getIconMapping(icon).mask?
1:0}},{key:"getInstanceIconFrame",value:function(icon){icon=this.state.iconManager.getIconMapping(icon);return[icon.x||0,icon.y||0,icon.width||0,icon.height||0]}},{key:"isLoaded",get:function(){return(0,_get2["default"])((0,_getPrototypeOf2["default"])(IconLayer.prototype),"isLoaded",this)&&this.state.iconManager.isLoaded}}]);return IconLayer}(_core.Layer);exports["default"]=global;global.layerName="IconLayer";global.defaultProps=require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$icon_layer$icon_layer.js.map
