{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$marching_squares.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/contour-layer/marching-squares.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$marching_squares\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCode = getCode;\nexports.getVertices = getVertices;\nexports.CONTOUR_TYPE = void 0;\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _marchingSquaresCodes = require(\"./marching-squares-codes\");\n\nvar CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\nexports.CONTOUR_TYPE = CONTOUR_TYPE;\nvar DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\n\nfunction getVertexCode(weight, threshold) {\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n\n    return weight < threshold[1] ? 1 : 2;\n  }\n\n  return weight >= threshold ? 1 : 0;\n}\n\nfunction getCode(opts) {\n  var cellWeights = opts.cellWeights,\n      x = opts.x,\n      y = opts.y,\n      width = opts.width,\n      height = opts.height;\n  var threshold = opts.threshold;\n\n  if (opts.thresholdValue) {\n    _core.log.deprecated('thresholdValue', 'threshold')();\n\n    threshold = opts.thresholdValue;\n  }\n\n  var isLeftBoundary = x < 0;\n  var isRightBoundary = x >= width - 1;\n  var isBottomBoundary = y < 0;\n  var isTopBoundary = y >= height - 1;\n  var isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n  var weights = {};\n  var codes = {};\n\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n\n  var top = codes.top,\n      topRight = codes.topRight,\n      right = codes.right,\n      current = codes.current;\n  var code = -1;\n\n  if (Number.isFinite(threshold)) {\n    code = top << 3 | topRight << 2 | right << 1 | current;\n  }\n\n  if (Array.isArray(threshold)) {\n    code = top << 6 | topRight << 4 | right << 2 | current;\n  }\n\n  var meanCode = 0;\n\n  if (!isBoundary) {\n    meanCode = getVertexCode((weights.top + weights.topRight + weights.right + weights.current) / 4, threshold);\n  }\n\n  return {\n    code: code,\n    meanCode: meanCode\n  };\n}\n\nfunction getVertices(opts) {\n  var gridOrigin = opts.gridOrigin,\n      cellSize = opts.cellSize,\n      x = opts.x,\n      y = opts.y,\n      code = opts.code,\n      meanCode = opts.meanCode,\n      _opts$type = opts.type,\n      type = _opts$type === void 0 ? CONTOUR_TYPE.ISO_LINES : _opts$type;\n  var thresholdData = Object.assign({}, DEFAULT_THRESHOLD_DATA, opts.thresholdData);\n  var offsets = type === CONTOUR_TYPE.ISO_BANDS ? _marchingSquaresCodes.ISOBANDS_CODE_OFFSET_MAP[code] : _marchingSquaresCodes.ISOLINES_CODE_OFFSET_MAP[code];\n\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n\n  var vZ = thresholdData.zIndex * thresholdData.zOffset;\n  var rX = (x + 1) * cellSize[0];\n  var rY = (y + 1) * cellSize[1];\n  var refVertexX = gridOrigin[0] + rX;\n  var refVertexY = gridOrigin[1] + rY;\n\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    var polygons = [];\n    offsets.forEach(function (polygonOffsets) {\n      var polygon = [];\n      polygonOffsets.forEach(function (xyOffset) {\n        var vX = refVertexX + xyOffset[0] * cellSize[0];\n        var vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n\n  var lines = [];\n  offsets.forEach(function (xyOffsets) {\n    xyOffsets.forEach(function (offset) {\n      var vX = refVertexX + offset[0] * cellSize[0];\n      var vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}\n//# sourceMappingURL=marching-squares.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getVertexCode","weight","threshold","Array","isArray","Object","defineProperty","value","getCode","opts","cellWeights","x","y","width","height","thresholdValue","_core","log","deprecated","isLeftBoundary","isRightBoundary","isBottomBoundary","isTopBoundary","isBoundary","top","topRight","right","current","code","Number","isFinite","meanCode","getVertices","gridOrigin","cellSize","_opts$type","type","CONTOUR_TYPE","ISO_LINES","thresholdData","assign","DEFAULT_THRESHOLD_DATA","offsets","ISO_BANDS","_marchingSquaresCodes","ISOBANDS_CODE_OFFSET_MAP","ISOLINES_CODE_OFFSET_MAP","vZ","zIndex","zOffset","refVertexX","refVertexY","polygons","forEach","polygonOffsets","polygon","xyOffset","push","lines","xyOffsets","offset"]
}
