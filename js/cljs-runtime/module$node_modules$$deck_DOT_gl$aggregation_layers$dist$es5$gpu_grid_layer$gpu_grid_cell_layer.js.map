{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_cell_layer.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/gpu-grid-layer/gpu-grid-cell-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_cell_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _core2 = require(\"@luma.gl/core\");\n\nvar _shadertools = require(\"@luma.gl/shadertools\");\n\nvar _colorUtils = require(\"../utils/color-utils\");\n\nvar _gpuGridCellLayerVertex = _interopRequireDefault(require(\"./gpu-grid-cell-layer-vertex.glsl\"));\n\nvar _gpuGridCellLayerFragment = _interopRequireDefault(require(\"./gpu-grid-cell-layer-fragment.glsl\"));\n\nvar COLOR_DATA_UBO_INDEX = 0;\nvar ELEVATION_DATA_UBO_INDEX = 1;\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: _colorUtils.defaultColorRange,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  gridSize: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  gridOrigin: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  gridOffset: {\n    type: 'array',\n    min: 0,\n    value: [0, 0]\n  },\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  offset: {\n    type: 'array',\n    min: 0,\n    value: [1, 1]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: true,\n  material: true\n};\n\nvar GPUGridCellLayer = function (_Layer) {\n  (0, _inherits2[\"default\"])(GPUGridCellLayer, _Layer);\n\n  function GPUGridCellLayer() {\n    (0, _classCallCheck2[\"default\"])(this, GPUGridCellLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(GPUGridCellLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(GPUGridCellLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridCellLayer.prototype), \"getShaders\", this).call(this, {\n        vs: _gpuGridCellLayerVertex[\"default\"],\n        fs: _gpuGridCellLayerFragment[\"default\"],\n        modules: [_core.project32, _core.gouraudLighting, _core.picking, _shadertools.fp64arithmetic]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        colors: {\n          size: 4,\n          noAlloc: true\n        },\n        elevations: {\n          size: 4,\n          noAlloc: true\n        }\n      });\n\n      var model = this._getModel(gl);\n\n      this._setupUniformBuffer(model);\n\n      this.setState({\n        model: model\n      });\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new _core2.Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new _core2.CubeGeometry(),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n          cellSize = _this$props.cellSize,\n          offset = _this$props.offset,\n          extruded = _this$props.extruded,\n          elevationScale = _this$props.elevationScale,\n          coverage = _this$props.coverage,\n          gridSize = _this$props.gridSize,\n          gridOrigin = _this$props.gridOrigin,\n          gridOffset = _this$props.gridOffset,\n          elevationRange = _this$props.elevationRange,\n          colorMaxMinBuffer = _this$props.colorMaxMinBuffer,\n          elevationMaxMinBuffer = _this$props.elevationMaxMinBuffer;\n      var gridOriginLow = [(0, _core.fp64LowPart)(gridOrigin[0]), (0, _core.fp64LowPart)(gridOrigin[1])];\n      var gridOffsetLow = [(0, _core.fp64LowPart)(gridOffset[0]), (0, _core.fp64LowPart)(gridOffset[1])];\n      var domainUniforms = this.getDomainUniforms();\n      var colorRange = (0, _colorUtils.colorRangeToFlatArray)(this.props.colorRange);\n      this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n      this.state.model.setUniforms(Object.assign({}, uniforms, domainUniforms, {\n        cellSize: cellSize,\n        offset: offset,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        coverage: coverage,\n        gridSize: gridSize,\n        gridOrigin: gridOrigin,\n        gridOriginLow: gridOriginLow,\n        gridOffset: gridOffset,\n        gridOffsetLow: gridOffsetLow,\n        colorRange: colorRange,\n        elevationRange: elevationRange\n      })).draw();\n      this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    }\n  }, {\n    key: \"bindUniformBuffers\",\n    value: function bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.bind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.bind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"unbindUniformBuffers\",\n    value: function unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n      colorMaxMinBuffer.unbind({\n        target: 35345,\n        index: COLOR_DATA_UBO_INDEX\n      });\n      elevationMaxMinBuffer.unbind({\n        target: 35345,\n        index: ELEVATION_DATA_UBO_INDEX\n      });\n    }\n  }, {\n    key: \"getDomainUniforms\",\n    value: function getDomainUniforms() {\n      var _this$props2 = this.props,\n          colorDomain = _this$props2.colorDomain,\n          elevationDomain = _this$props2.elevationDomain;\n      var domainUniforms = {};\n\n      if (colorDomain !== null) {\n        domainUniforms.colorDomainValid = true;\n        domainUniforms.colorDomain = colorDomain;\n      } else {\n        domainUniforms.colorDomainValid = false;\n      }\n\n      if (elevationDomain !== null) {\n        domainUniforms.elevationDomainValid = true;\n        domainUniforms.elevationDomain = elevationDomain;\n      } else {\n        domainUniforms.elevationDomainValid = false;\n      }\n\n      return domainUniforms;\n    }\n  }, {\n    key: \"_setupUniformBuffer\",\n    value: function _setupUniformBuffer(model) {\n      var gl = this.context.gl;\n      var programHandle = model.program.handle;\n      var colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n      var elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n      gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n      gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n    }\n  }]);\n  return GPUGridCellLayer;\n}(_core.Layer);\n\nexports[\"default\"] = GPUGridCellLayer;\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n//# sourceMappingURL=gpu-grid-cell-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_core","_core2","_shadertools","_colorUtils","_gpuGridCellLayerVertex","_gpuGridCellLayerFragment","defaultProps","colorDomain","colorRange","defaultColorRange","elevationDomain","elevationRange","elevationScale","type","min","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","_Layer","apply","arguments","key","getShaders","prototype","call","vs","fs","modules","project32","gouraudLighting","picking","fp64arithmetic","initializeState","gl","context","getAttributeManager","attributeManager","addInstanced","colors","size","noAlloc","elevations","model","_getModel","_setupUniformBuffer","setState","Model","assign","id","props","geometry","CubeGeometry","isInstanced","draw","_ref","uniforms","_this$props","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","fp64LowPart","gridOffsetLow","domainUniforms","getDomainUniforms","colorRangeToFlatArray","bindUniformBuffers","state","setUniforms","unbindUniformBuffers","bind","target","index","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","unbind","_this$props2","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","Layer","layerName"]
}
