shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _defineProperty2=global(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=
global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_layers=require("module$node_modules$$deck_DOT_gl$layers$dist$es5$index"),
_contourUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_utils"),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_gpuGridAggregator=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator")),_aggregationOperationUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$aggregation_operation_utils"),_gridAggregationUtils=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$grid_aggregation_utils"),
DEFAULT_COLOR=[255,255,255,255],DIMENSIONS={data:{props:["cellSize"]},weights:{props:["aggregation"],accessors:["getWeight"]}};require=function(_GridAggregationLayer){function ContourLayer(){(0,_classCallCheck2["default"])(this,ContourLayer);return(0,_possibleConstructorReturn2["default"])(this,(0,_getPrototypeOf2["default"])(ContourLayer).apply(this,arguments))}(0,_inherits2["default"])(ContourLayer,_GridAggregationLayer);(0,_createClass2["default"])(ContourLayer,[{key:"initializeState",value:function(){var _attributeManager$add;
(0,_get2["default"])((0,_getPrototypeOf2["default"])(ContourLayer.prototype),"initializeState",this).call(this,{dimensions:DIMENSIONS});this.setState({contourData:{},projectPoints:!1,weights:{count:{size:1,operation:_aggregationOperationUtils.AGGREGATION_OPERATION.SUM}}});this.getAttributeManager().add((_attributeManager$add={},(0,_defineProperty2["default"])(_attributeManager$add,"positions",{size:3,accessor:"getPosition",type:5130,fp64:this.use64bitPositions()}),(0,_defineProperty2["default"])(_attributeManager$add,
"count",{size:3,accessor:"getWeight"}),_attributeManager$add))}},{key:"updateState",value:function(opts){(0,_get2["default"])((0,_getPrototypeOf2["default"])(ContourLayer.prototype),"updateState",this).call(this,opts);var contoursChanged=!1,oldProps=opts.oldProps,props=opts.props,aggregationDirty=this.state.aggregationDirty;if(oldProps.contours!==props.contours||oldProps.zOffset!==props.zOffset)contoursChanged=!0,this._updateThresholdData(opts.props);0<this.getNumInstances()&&(aggregationDirty||contoursChanged)&&
this._generateContours()}},{key:"renderLayers",value:function(){var _this$state$contourDa=this.state.contourData,contourSegments=_this$state$contourDa.contourSegments;_this$state$contourDa=_this$state$contourDa.contourPolygons;var LinesSubLayerClass=this.getSubLayerClass("lines",_layers.LineLayer),BandsSubLayerClass=this.getSubLayerClass("bands",_layers.SolidPolygonLayer);contourSegments=contourSegments&&0<contourSegments.length&&new LinesSubLayerClass(this.getSubLayerProps({id:"lines"}),{data:this.state.contourData.contourSegments,
getSourcePosition:function(d){return d.start},getTargetPosition:function(d){return d.end},getColor:function(d){return d.contour.color||DEFAULT_COLOR},getWidth:function(d){return d.contour.strokeWidth||1}});_this$state$contourDa=_this$state$contourDa&&0<_this$state$contourDa.length&&new BandsSubLayerClass(this.getSubLayerProps({id:"bands"}),{data:this.state.contourData.contourPolygons,getPolygon:function(d){return d.vertices},getFillColor:function(d){return d.contour.color||DEFAULT_COLOR}});return[contourSegments,
_this$state$contourDa]}},{key:"updateAggregationState",value:function(opts){var props=opts.props,cellSize=props.cellSize,coordinateSystem=props.coordinateSystem,viewport=this.context.viewport,cellSizeChanged=opts.oldProps.cellSize!==cellSize,gpuAggregation=props.gpuAggregation;this.state.gpuAggregation!==props.gpuAggregation&&gpuAggregation&&!_gpuGridAggregator["default"].isSupported(this.context.gl)&&(_core.log.warn("GPU Grid Aggregation not supported, falling back to CPU")(),gpuAggregation=!1);
props=gpuAggregation!==this.state.gpuAggregation;this.setState({gpuAggregation:gpuAggregation});var dimensions=this.state.dimensions,positionsChanged=this.isAttributeChanged("positions"),data=dimensions.data;dimensions=dimensions.weights;var boundingBox=this.state.boundingBox;positionsChanged&&(boundingBox=(0,_gridAggregationUtils.getBoundingBox)(this.getAttributes(),this.getNumInstances()),this.setState({boundingBox:boundingBox}));if(positionsChanged||cellSizeChanged){var _getGridParams=(0,_gridAggregationUtils.getGridParams)(boundingBox,
cellSize,viewport,coordinateSystem);cellSize=_getGridParams.gridOffset;coordinateSystem=_getGridParams.translation;viewport=_getGridParams.width;cellSizeChanged=_getGridParams.height;var numCol=_getGridParams.numCol;_getGridParams=_getGridParams.numRow;this.allocateResources(_getGridParams,numCol);this.setState({gridOffset:cellSize,boundingBox:boundingBox,translation:coordinateSystem,posOffset:coordinateSystem.slice(),gridOrigin:[-1*coordinateSystem[0],-1*coordinateSystem[1]],width:viewport,height:cellSizeChanged,
numCol:numCol,numRow:_getGridParams})}gpuAggregation=positionsChanged||props||this.isAggregationDirty(opts,{dimension:data,compareAll:gpuAggregation});(props=this.isAggregationDirty(opts,{dimension:dimensions}))&&this._updateAccessors(opts);(gpuAggregation||props)&&this._resetResults();this.setState({aggregationDataDirty:gpuAggregation,aggregationWeightsDirty:props})}},{key:"_updateAccessors",value:function(opts){var _opts$props=opts.props;opts=_opts$props.getWeight;_opts$props=_opts$props.aggregation;
var count=this.state.weights.count;count&&(count.getWeight=opts,count.operation=_aggregationOperationUtils.AGGREGATION_OPERATION[_opts$props]);this.setState({getValue:(0,_aggregationOperationUtils.getValueFunc)(_opts$props,opts)})}},{key:"_resetResults",value:function(){var count=this.state.weights.count;count&&(count.aggregationData=null)}},{key:"_generateContours",value:function(){var _this$state=this.state,numCol=_this$state.numCol,numRow=_this$state.numRow,gridOrigin=_this$state.gridOrigin,gridOffset=
_this$state.gridOffset;_this$state=_this$state.thresholdData;var count=this.state.weights.count,aggregationData=count.aggregationData;aggregationData||(aggregationData=count.aggregationBuffer.getData(),count.aggregationData=aggregationData);count=_gpuGridAggregator["default"].getCellData({countsData:aggregationData}).cellWeights;numCol=(0,_contourUtils.generateContours)({thresholdData:_this$state,cellWeights:count,gridSize:[numCol,numRow],gridOrigin:gridOrigin,cellSize:[gridOffset.xOffset,gridOffset.yOffset]});
this.setState({contourData:numCol})}},{key:"_updateThresholdData",value:function(props){var contours=props.contours;props=props.zOffset;for(var count=contours.length,thresholdData=Array(count),i=0;i<count;i++){var contour=contours[i];thresholdData[i]={contour:contour,zIndex:contour.zIndex||i,zOffset:props}}this.setState({thresholdData:thresholdData})}}]);return ContourLayer}(global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$grid_aggregation_layer"))["default"]);exports["default"]=
require;require.layerName="ContourLayer";require.defaultProps={cellSize:{type:"number",min:1,max:1E3,value:1E3},getPosition:{type:"accessor",value:function(x){return x.position}},getWeight:{type:"accessor",value:function(x){return 1}},gpuAggregation:!0,aggregation:"SUM",contours:[{threshold:1}],zOffset:.005}}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_layer.js.map
