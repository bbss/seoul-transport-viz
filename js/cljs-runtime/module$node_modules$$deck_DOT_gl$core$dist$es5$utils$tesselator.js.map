{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$tesselator.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/utils/tesselator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$tesselator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _iterableUtils = require(\"./iterable-utils\");\n\nvar _typedArrayManager = _interopRequireDefault(require(\"./typed-array-manager\"));\n\nvar _assert = _interopRequireDefault(require(\"./assert\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar Tesselator = function () {\n  function Tesselator() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck2[\"default\"])(this, Tesselator);\n    var _opts$attributes = opts.attributes,\n        attributes = _opts$attributes === void 0 ? {} : _opts$attributes;\n    this.typedArrayManager = _typedArrayManager[\"default\"];\n    this.indexStarts = null;\n    this.vertexStarts = null;\n    this.vertexCount = 0;\n    this.instanceCount = 0;\n    this.attributes = {};\n    this._attributeDefs = attributes;\n    this.opts = opts;\n    this.updateGeometry(opts);\n    Object.seal(this);\n  }\n\n  (0, _createClass2[\"default\"])(Tesselator, [{\n    key: \"updateGeometry\",\n    value: function updateGeometry(opts) {\n      Object.assign(this.opts, opts);\n      var _this$opts = this.opts,\n          data = _this$opts.data,\n          _this$opts$buffers = _this$opts.buffers,\n          buffers = _this$opts$buffers === void 0 ? {} : _this$opts$buffers,\n          getGeometry = _this$opts.getGeometry,\n          geometryBuffer = _this$opts.geometryBuffer,\n          positionFormat = _this$opts.positionFormat,\n          dataChanged = _this$opts.dataChanged,\n          _this$opts$normalize = _this$opts.normalize,\n          normalize = _this$opts$normalize === void 0 ? true : _this$opts$normalize;\n      this.data = data;\n      this.getGeometry = getGeometry;\n      this.positionSize = geometryBuffer && geometryBuffer.size || (positionFormat === 'XY' ? 2 : 3);\n      this.buffers = buffers;\n      this.normalize = normalize;\n\n      if (geometryBuffer) {\n        (0, _assert[\"default\"])(data.startIndices, 'binary data missing startIndices');\n        this.getGeometry = this.getGeometryFromBuffer(geometryBuffer);\n\n        if (!normalize) {\n          buffers.positions = geometryBuffer;\n        }\n      }\n\n      this.geometryBuffer = buffers.positions;\n\n      if (Array.isArray(dataChanged)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = dataChanged[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dataRange = _step.value;\n\n            this._rebuildGeometry(dataRange);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        this._rebuildGeometry();\n      }\n    }\n  }, {\n    key: \"updatePartialGeometry\",\n    value: function updatePartialGeometry(_ref) {\n      var startRow = _ref.startRow,\n          endRow = _ref.endRow;\n\n      this._rebuildGeometry({\n        startRow: startRow,\n        endRow: endRow\n      });\n    }\n  }, {\n    key: \"normalizeGeometry\",\n    value: function normalizeGeometry(geometry) {\n      return geometry;\n    }\n  }, {\n    key: \"updateGeometryAttributes\",\n    value: function updateGeometryAttributes(geometry, startIndex, size) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"getGeometrySize\",\n    value: function getGeometrySize(geometry) {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"getGeometryFromBuffer\",\n    value: function getGeometryFromBuffer(geometryBuffer) {\n      var value = geometryBuffer.value || geometryBuffer;\n      (0, _assert[\"default\"])(ArrayBuffer.isView(value), 'cannot read geometries');\n      return (0, _iterableUtils.getAccessorFromBuffer)(value, {\n        size: this.positionSize,\n        offset: geometryBuffer.offset,\n        stride: geometryBuffer.stride,\n        startIndices: this.data.startIndices\n      });\n    }\n  }, {\n    key: \"_allocate\",\n    value: function _allocate(instanceCount, copy) {\n      var attributes = this.attributes,\n          buffers = this.buffers,\n          _attributeDefs = this._attributeDefs,\n          typedArrayManager = this.typedArrayManager;\n\n      for (var name in _attributeDefs) {\n        if (name in buffers) {\n          typedArrayManager.release(attributes[name]);\n          attributes[name] = null;\n        } else {\n          var def = _attributeDefs[name];\n          def.copy = copy;\n          attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n        }\n      }\n    }\n  }, {\n    key: \"_forEachGeometry\",\n    value: function _forEachGeometry(visitor, startRow, endRow) {\n      var data = this.data,\n          getGeometry = this.getGeometry;\n\n      var _createIterable = (0, _iterableUtils.createIterable)(data, startRow, endRow),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = iterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var object = _step2.value;\n          objectInfo.index++;\n          var geometry = getGeometry(object, objectInfo);\n          visitor(geometry, objectInfo.index);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_rebuildGeometry\",\n    value: function _rebuildGeometry(dataRange) {\n      var _this = this;\n\n      if (!this.data || !this.getGeometry) {\n        return;\n      }\n\n      var indexStarts = this.indexStarts,\n          vertexStarts = this.vertexStarts,\n          instanceCount = this.instanceCount;\n      var data = this.data,\n          geometryBuffer = this.geometryBuffer;\n\n      var _ref2 = dataRange || {},\n          _ref2$startRow = _ref2.startRow,\n          startRow = _ref2$startRow === void 0 ? 0 : _ref2$startRow,\n          _ref2$endRow = _ref2.endRow,\n          endRow = _ref2$endRow === void 0 ? Infinity : _ref2$endRow;\n\n      var normalizedData = {};\n\n      if (!dataRange) {\n        indexStarts = [0];\n        vertexStarts = [0];\n      }\n\n      if (this.normalize || !geometryBuffer) {\n        this._forEachGeometry(function (geometry, dataIndex) {\n          geometry = _this.normalizeGeometry(geometry);\n          normalizedData[dataIndex] = geometry;\n          vertexStarts[dataIndex + 1] = vertexStarts[dataIndex] + _this.getGeometrySize(geometry);\n        }, startRow, endRow);\n\n        instanceCount = vertexStarts[vertexStarts.length - 1];\n      } else if (geometryBuffer.buffer instanceof _core.Buffer) {\n        var byteStride = geometryBuffer.stride || this.positionSize * 4;\n        vertexStarts = data.startIndices;\n        instanceCount = vertexStarts[data.length] || geometryBuffer.buffer.byteLength / byteStride;\n      } else {\n        var bufferValue = geometryBuffer.value || geometryBuffer;\n        var elementStride = geometryBuffer.stride / bufferValue.BYTES_PER_ELEMENT || this.positionSize;\n        vertexStarts = data.startIndices;\n        instanceCount = vertexStarts[data.length] || bufferValue.length / elementStride;\n      }\n\n      this._allocate(instanceCount, Boolean(dataRange));\n\n      this.indexStarts = indexStarts;\n      this.vertexStarts = vertexStarts;\n      this.instanceCount = instanceCount;\n      var context = {};\n\n      this._forEachGeometry(function (geometry, dataIndex) {\n        geometry = normalizedData[dataIndex] || geometry;\n        context.vertexStart = vertexStarts[dataIndex];\n        context.indexStart = indexStarts[dataIndex];\n        var vertexEnd = dataIndex < vertexStarts.length - 1 ? vertexStarts[dataIndex + 1] : instanceCount;\n        context.geometrySize = vertexEnd - vertexStarts[dataIndex];\n        context.geometryIndex = dataIndex;\n\n        _this.updateGeometryAttributes(geometry, context);\n      }, startRow, endRow);\n\n      this.vertexCount = indexStarts[indexStarts.length - 1];\n    }\n  }]);\n  return Tesselator;\n}();\n\nexports[\"default\"] = Tesselator;\n//# sourceMappingURL=tesselator.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_iterableUtils","_typedArrayManager","_assert","_core","Tesselator","opts","arguments","length","undefined","_opts$attributes","attributes","typedArrayManager","vertexStarts","indexStarts","instanceCount","vertexCount","_attributeDefs","updateGeometry","seal","key","assign","_this$opts","data","_this$opts$buffers","buffers","getGeometry","geometryBuffer","positionFormat","dataChanged","_this$opts$normalize","normalize","positionSize","size","startIndices","getGeometryFromBuffer","positions","Array","isArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","done","next","_rebuildGeometry","err","updatePartialGeometry","_ref","startRow","endRow","normalizeGeometry","geometry","updateGeometryAttributes","startIndex","Error","getGeometrySize","ArrayBuffer","isView","getAccessorFromBuffer","offset","stride","_allocate","copy","name","release","def","allocate","_forEachGeometry","visitor","_createIterable","createIterable","iterable","objectInfo","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","object","index","dataRange","_this","_ref2","_ref2$startRow","_ref2$endRow","Infinity","normalizedData","dataIndex","buffer","Buffer","byteStride","byteLength","bufferValue","elementStride","BYTES_PER_ELEMENT","context","vertexStart","indexStart","geometrySize","vertexEnd","geometryIndex"]
}
