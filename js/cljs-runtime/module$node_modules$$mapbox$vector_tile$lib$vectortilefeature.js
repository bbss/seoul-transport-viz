shadow$provide.module$node_modules$$mapbox$vector_tile$lib$vectortilefeature=function(global,require,module,exports){function VectorTileFeature(pbf,end,extent,keys,values){this.properties={};this.extent=extent;this.type=0;this._pbf=pbf;this._geometry=-1;this._keys=keys;this._values=values;pbf.readFields(readFeature,this,end)}function readFeature(tag,feature,pbf){if(1==tag)feature.id=pbf.readVarint();else if(2==tag)for(tag=pbf.readVarint()+pbf.pos;pbf.pos<tag;){var key=feature._keys[pbf.readVarint()],
value=feature._values[pbf.readVarint()];feature.properties[key]=value}else 3==tag?feature.type=pbf.readVarint():4==tag&&(feature._geometry=pbf.pos)}function classifyRings(rings){var len=rings.length;if(1>=len)return[rings];for(var polygons=[],polygon,ccw,i=0;i<len;i++){var p2,ring=rings[i],sum=0,i$jscomp$0=0,len$jscomp$0=ring.length;for(p2=len$jscomp$0-1;i$jscomp$0<len$jscomp$0;p2=i$jscomp$0++){var area=ring[i$jscomp$0];p2=ring[p2];sum+=(p2.x-area.x)*(area.y+p2.y)}area=sum;0!==area&&(void 0===ccw&&
(ccw=0>area),ccw===0>area?(polygon&&polygons.push(polygon),polygon=[rings[i]]):polygon.push(rings[i]))}polygon&&polygons.push(polygon);return polygons}var Point=require("module$node_modules$$mapbox$point_geometry$index");module.exports=VectorTileFeature;VectorTileFeature.types=["Unknown","Point","LineString","Polygon"];VectorTileFeature.prototype.loadGeometry=function(){var pbf=this._pbf;pbf.pos=this._geometry;for(var end=pbf.readVarint()+pbf.pos,cmd=1,length=0,x=0,y=0,lines=[],line;pbf.pos<end;)if(0>=
length&&(length=pbf.readVarint(),cmd=length&7,length>>=3),length--,1===cmd||2===cmd)x+=pbf.readSVarint(),y+=pbf.readSVarint(),1===cmd&&(line&&lines.push(line),line=[]),line.push(new Point(x,y));else if(7===cmd)line&&line.push(line[0].clone());else throw Error("unknown command "+cmd);line&&lines.push(line);return lines};VectorTileFeature.prototype.bbox=function(){var pbf=this._pbf;pbf.pos=this._geometry;for(var end=pbf.readVarint()+pbf.pos,cmd=1,length=0,x=0,y=0,x1=Infinity,x2=-Infinity,y1=Infinity,
y2=-Infinity;pbf.pos<end;)if(0>=length&&(length=pbf.readVarint(),cmd=length&7,length>>=3),length--,1===cmd||2===cmd)x+=pbf.readSVarint(),y+=pbf.readSVarint(),x<x1&&(x1=x),x>x2&&(x2=x),y<y1&&(y1=y),y>y2&&(y2=y);else if(7!==cmd)throw Error("unknown command "+cmd);return[x1,y1,x2,y2]};VectorTileFeature.prototype.toGeoJSON=function(x,y,z){function project(line){for(var j=0;j<line.length;j++){var p=line[j];line[j]=[360*(p.x+x0)/size-180,360/Math.PI*Math.atan(Math.exp((180-360*(p.y+y0)/size)*Math.PI/180))-
90]}}var size=this.extent*Math.pow(2,z),x0=this.extent*x,y0=this.extent*y;x=this.loadGeometry();y=VectorTileFeature.types[this.type];switch(this.type){case 1:var j$jscomp$0=[];for(z=0;z<x.length;z++)j$jscomp$0[z]=x[z][0];x=j$jscomp$0;project(x);break;case 2:for(z=0;z<x.length;z++)project(x[z]);break;case 3:for(x=classifyRings(x),z=0;z<x.length;z++)for(j$jscomp$0=0;j$jscomp$0<x[z].length;j$jscomp$0++)project(x[z][j$jscomp$0])}1===x.length?x=x[0]:y="Multi"+y;x={type:"Feature",geometry:{type:y,coordinates:x},
properties:this.properties};"id"in this&&(x.id=this.id);return x}}
//# sourceMappingURL=module$node_modules$$mapbox$vector_tile$lib$vectortilefeature.js.map
