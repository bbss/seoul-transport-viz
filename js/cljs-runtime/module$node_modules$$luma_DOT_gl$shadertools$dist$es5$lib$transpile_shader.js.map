{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,2EAAA,CAA+F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGvIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CAEAI,QAAwB,CAACC,MAAD,CAASC,iBAAT,CAA4BC,QAA5B,CAAsC,CAC5D,OAAQD,iBAAR,EACE,KAAK,GAAL,CACE,MAAOC,SAAA,CAAoCF,MAaxCG,QAAA,CAAe,6CAAf,CAA8D,mBAA9D,CAAAA,QAAA,CAA2F,+BAA3F,CAA4H,OAA5H,CAAAA,QAAA,CAA6I,6BAA7I,CAA4K,QAA5K,CAAAA,QAAA,CAA8L,gBAA9L;AAAgN,UAAhN,CAAAA,QAAA,CAAoO,mBAApO,CAAyP,UAAzP,CAAAA,QAAA,CAA6Q,sBAA7Q,CAAqS,aAArS,CAAAA,QAAA,CAA4T,wBAA5T,CAAsV,aAAtV,CAbI,CAAyEH,MAiB7EG,QAAA,CAAe,6CAAf,CAA8D,mBAA9D,CAAAA,QAAA,CAA2F,6BAA3F,CAA0H,OAA1H,CAAAA,QAAA,CAA2I,gBAA3I,CAA6J,UAA7J,CAAAA,QAAA,CAAiL,kBAAjL,CAAqM,UAArM,CAAAA,QAAA,CAAyN,sBAAzN,CAAiP,aAAjP,CAAAA,QAAA,CAAwQ,wBAAxQ,CAAkS,aAAlS,CAfL,MAAK,GAAL,CACS,GAAAD,QAAA,CAAW,MAAA,CAAAF,MAkBfG,QAAA,CAAe,4BAAf;AAA6C,cAA7C,CAAAA,QAAA,CAAqE,wBAArE,CAA+F,cAA/F,CAAAA,QAAA,CAAuH,yBAAvH,CAAkJ,YAAlJ,CAAAA,QAAA,CAAwK,cAAxK,CAAwL,YAAxL,CAAAA,QAAA,CAA8M,iBAA9M,CAAiO,kBAAjO,CAlBI,KAyBX,IAHAH,MACII,CAvBqDJ,MAsBhDG,QAAA,CAAe,4BAAf,CAA6C,cAA7C,CAAAA,QAAA,CAAqE,mBAArE,CAA0F,UAA1F,CAAAA,QAAA,CAA8G,cAA9G,CAA8H,YAA9H,CAAAA,QAAA,CAAoJ,iBAApJ,CAAuK,kBAAvK,CACLC,CAAAA,iBAAAA,CAAcJ,MAAAK,MAAA,CAAaC,eAAb,CAElB,CACMC,iBACJ,CADiBH,iBAAA,CAAY,CAAZ,CACjB,CAAAJ,MAAA,CAASA,MAAAG,QAAA,CAAeG,eAAf;AAAgC,EAAhC,CAAAH,QAAA,CAA4C,IAAIK,MAAJ,CAAW,KAAAC,OAAA,CAAaF,iBAAb,CAAyB,KAAzB,CAAX,CAA4C,GAA5C,CAA5C,CAA8F,cAA9F,CA3BP,OAAO,OAET,SACE,KAAUG,MAAJ,CAAU,uBAAAD,OAAA,CAA+BR,iBAA/B,CAAV,CAAN,CARJ,CAD4D,CAa9D,KAAIK,gBAAkB,4CArBiH;",
"sources":["node_modules/@luma_DOT_gl/shadertools/dist/es5/lib/transpile-shader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = transpileShader;\n\nfunction transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n\n    default:\n      throw new Error(\"unknown GLSL version \".concat(targetGLSLVersion));\n  }\n}\n\nvar FS_OUTPUT_REGEX = /^[ \\t]*out[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\s+/m;\n\nfunction convertVertexShaderTo300(source) {\n  return source.replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n').replace(/^[ \\t]*attribute[ \\t]+(.+;)/gm, 'in $1').replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'out $1').replace(/\\btexture2D\\(/g, 'texture(').replace(/\\btextureCube\\(+/g, 'texture(').replace(/\\btexture2DLodEXT\\(/g, 'textureLod(').replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source.replace(/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n').replace(/^[ \\t]*varying[ \\t]+(.+;)/gm, 'in $1').replace(/\\btexture2D\\(/g, 'texture(').replace(/\\btextureCube\\(/g, 'texture(').replace(/\\btexture2DLodEXT\\(/g, 'textureLod(').replace(/\\btextureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertVertexShaderTo100(source) {\n  return source.replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100').replace(/^[ \\t]*in[ \\t]+(.+;)/gm, 'attribute $1').replace(/^[ \\t]*out[ \\t]+(.+;)/gm, 'varying $1').replace(/\\btexture\\(/g, 'texture2D(').replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  source = source.replace(/^#version[ \\t]+300[ \\t]+es/, '#version 100').replace(/^[ \\t]*in[ \\t]+/gm, 'varying ').replace(/\\btexture\\(/g, 'texture2D(').replace(/\\btextureLod\\(/g, 'texture2DLodEXT(');\n  var outputMatch = source.match(FS_OUTPUT_REGEX);\n\n  if (outputMatch) {\n    var outputName = outputMatch[1];\n    source = source.replace(FS_OUTPUT_REGEX, '').replace(new RegExp(\"\\\\b\".concat(outputName, \"\\\\b\"), 'g'), 'gl_FragColor');\n  }\n\n  return source;\n}\n//# sourceMappingURL=transpile-shader.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","transpileShader","source","targetGLSLVersion","isVertex","replace","outputMatch","match","FS_OUTPUT_REGEX","outputName","RegExp","concat","Error"]
}
