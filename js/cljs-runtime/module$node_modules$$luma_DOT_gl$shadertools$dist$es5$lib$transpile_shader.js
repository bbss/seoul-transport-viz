shadow$provide.module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=function(source,targetGLSLVersion,isVertex){switch(targetGLSLVersion){case 300:return isVertex?source.replace(/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,"#version 300 es\n").replace(/^[ \t]*attribute[ \t]+(.+;)/gm,"in $1").replace(/^[ \t]*varying[ \t]+(.+;)/gm,"out $1").replace(/\btexture2D\(/g,
"texture(").replace(/\btextureCube\(+/g,"texture(").replace(/\btexture2DLodEXT\(/g,"textureLod(").replace(/\btextureCubeLodEXT\(/g,"textureLod("):source.replace(/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,"#version 300 es\n").replace(/^[ \t]*varying[ \t]+(.+;)/gm,"in $1").replace(/\btexture2D\(/g,"texture(").replace(/\btextureCube\(/g,"texture(").replace(/\btexture2DLodEXT\(/g,"textureLod(").replace(/\btextureCubeLodEXT\(/g,"textureLod(");case 100:if(isVertex)source=source.replace(/^#version[ \t]+300[ \t]+es/,
"#version 100").replace(/^[ \t]*in[ \t]+(.+;)/gm,"attribute $1").replace(/^[ \t]*out[ \t]+(.+;)/gm,"varying $1").replace(/\btexture\(/g,"texture2D(").replace(/\btextureLod\(/g,"texture2DLodEXT(");else if(source=source.replace(/^#version[ \t]+300[ \t]+es/,"#version 100").replace(/^[ \t]*in[ \t]+/gm,"varying ").replace(/\btexture\(/g,"texture2D(").replace(/\btextureLod\(/g,"texture2DLodEXT("),targetGLSLVersion=source.match(FS_OUTPUT_REGEX))targetGLSLVersion=targetGLSLVersion[1],source=source.replace(FS_OUTPUT_REGEX,
"").replace(new RegExp("\\b".concat(targetGLSLVersion,"\\b"),"g"),"gl_FragColor");return source;default:throw Error("unknown GLSL version ".concat(targetGLSLVersion));}};var FS_OUTPUT_REGEX=/^[ \t]*out[ \t]+vec4[ \t]+(\w+)[ \t]*;\s+/m}
//# sourceMappingURL=module$node_modules$$luma_DOT_gl$shadertools$dist$es5$lib$transpile_shader.js.map
