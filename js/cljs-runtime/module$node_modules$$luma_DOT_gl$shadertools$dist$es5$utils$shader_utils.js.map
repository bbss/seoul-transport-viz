{
"version":3,
"file":"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$shader_utils.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@luma_DOT_gl/shadertools/dist/es5/utils/shader-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$luma_DOT_gl$shadertools$dist$es5$utils$shader_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQualifierDetails = getQualifierDetails;\nexports.getPassthroughFS = getPassthroughFS;\nexports.typeToChannelSuffix = typeToChannelSuffix;\nexports.typeToChannelCount = typeToChannelCount;\nexports.convertToVec4 = convertToVec4;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _utils = require(\"../utils\");\n\nvar FS100 = \"void main() {gl_FragColor = vec4(0);}\";\nvar FS_GLES = \"out vec4 transform_output;\\nvoid main() {\\n  transform_output = vec4(0);\\n}\";\nvar FS300 = \"#version 300 es\\n\".concat(FS_GLES);\n\nfunction getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  var words = line.replace(/^\\s+/, '').split(/\\s+/);\n\n  var _words = (0, _slicedToArray2[\"default\"])(words, 3),\n      qualifier = _words[0],\n      type = _words[1],\n      definition = _words[2];\n\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n\n  var name = definition.split(';')[0];\n  return {\n    qualifier: qualifier,\n    type: type,\n    name: name\n  };\n}\n\nfunction getPassthroughFS() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$version = _ref.version,\n      version = _ref$version === void 0 ? 100 : _ref$version,\n      input = _ref.input,\n      inputType = _ref.inputType,\n      output = _ref.output;\n\n  if (!input) {\n    if (version === 300) {\n      return FS300;\n    } else if (version > 300) {\n      return \"#version \".concat(version, \"\\n\").concat(FS_GLES);\n    }\n\n    return FS100;\n  }\n\n  var outputValue = convertToVec4(input, inputType);\n\n  if (version >= 300) {\n    return \"#version \".concat(version, \" \").concat(version === 300 ? 'es' : '', \"\\nin \").concat(inputType, \" \").concat(input, \";\\nout vec4 \").concat(output, \";\\nvoid main() {\\n  \").concat(output, \" = \").concat(outputValue, \";\\n}\");\n  }\n\n  return \"varying \".concat(inputType, \" \").concat(input, \";\\nvoid main() {\\n  gl_FragColor = \").concat(outputValue, \";\\n}\");\n}\n\nfunction typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n\n    case 'vec2':\n      return 'xy';\n\n    case 'vec3':\n      return 'xyz';\n\n    case 'vec4':\n      return 'xyzw';\n\n    default:\n      (0, _utils.assert)(false);\n      return null;\n  }\n}\n\nfunction typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n\n    case 'vec2':\n      return 2;\n\n    case 'vec3':\n      return 3;\n\n    case 'vec4':\n      return 4;\n\n    default:\n      (0, _utils.assert)(false);\n      return null;\n  }\n}\n\nfunction convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return \"vec4(\".concat(variable, \", 0.0, 0.0, 1.0)\");\n\n    case 'vec2':\n      return \"vec4(\".concat(variable, \", 0.0, 1.0)\");\n\n    case 'vec3':\n      return \"vec4(\".concat(variable, \", 1.0)\");\n\n    case 'vec4':\n      return variable;\n\n    default:\n      (0, _utils.assert)(false);\n      return null;\n  }\n}\n//# sourceMappingURL=shader-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","convertToVec4","variable","type","concat","_utils","assert","_interopRequireDefault","Object","defineProperty","value","getQualifierDetails","line","qualifiers","Array","isArray","words","replace","split","_words","_slicedToArray2","qualifier","definition","includes","name","getPassthroughFS","_ref","arguments","length","undefined","_ref$version","version","input","inputType","output","FS300","FS_GLES","FS100","outputValue","typeToChannelSuffix","typeToChannelCount"]
}
