shadow$provide.module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$grid_aggregation_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=
global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits"));module=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$aggregation_layer"));var _gpuGridAggregator=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$gpu_grid_aggregation$gpu_grid_aggregator")),
_core=require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_core2=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_binSorter=global(require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$utils$bin_sorter")),_gridAggregator=require("module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$cpu_grid_layer$grid_aggregator");require=function(_AggregationLayer){function GridAggregationLayer(){(0,_classCallCheck2["default"])(this,GridAggregationLayer);return(0,
_possibleConstructorReturn2["default"])(this,(0,_getPrototypeOf2["default"])(GridAggregationLayer).apply(this,arguments))}(0,_inherits2["default"])(GridAggregationLayer,_AggregationLayer);(0,_createClass2["default"])(GridAggregationLayer,[{key:"initializeState",value:function(_ref){_ref=_ref.dimensions;var gl=this.context.gl;(0,_get2["default"])((0,_getPrototypeOf2["default"])(GridAggregationLayer.prototype),"initializeState",this).call(this,_ref);this.setState({layerData:{},gpuGridAggregator:new _gpuGridAggregator["default"](gl,
{id:"".concat(this.id,"-gpu-aggregator")}),cpuGridAggregator:_gridAggregator.pointToDensityGridDataCPU})}},{key:"updateState",value:function(opts){(0,_get2["default"])((0,_getPrototypeOf2["default"])(GridAggregationLayer.prototype),"updateState",this).call(this,opts);this.updateAggregationState(opts);var _this$state=this.state,aggregationDataDirty=_this$state.aggregationDataDirty,aggregationWeightsDirty=_this$state.aggregationWeightsDirty;_this$state=_this$state.gpuAggregation;if(!(0>=this.getNumInstances())){var aggregationDirty=
!1;if(aggregationDataDirty||_this$state&&aggregationWeightsDirty)this._updateAggregation(opts),aggregationDirty=!0;_this$state||!aggregationDataDirty&&!aggregationWeightsDirty||(this._updateWeightBins(),this._uploadAggregationResults(),aggregationDirty=!0);this.setState({aggregationDirty:aggregationDirty})}}},{key:"finalizeState",value:function(){var count=this.state.weights.count;if(count&&count.aggregationBuffer)count.aggregationBuffer["delete"]();if(count=this.state.gpuGridAggregator)count["delete"]();
(0,_get2["default"])((0,_getPrototypeOf2["default"])(GridAggregationLayer.prototype),"finalizeState",this).call(this)}},{key:"updateShaders",value:function(shaders){this.state.gpuAggregation&&this.state.gpuGridAggregator.updateShaders(shaders)}},{key:"updateAggregationState",value:function(opts){_core2.log.assert(!1)}},{key:"allocateResources",value:function(numRow,numCol){if(this.state.numRow!==numRow||this.state.numCol!==numCol){numRow=numCol*numRow*16;numCol=this.context.gl;var weights=this.state.weights,
name;for(name in weights){var weight=weights[name];if(weight.aggregationBuffer)weight.aggregationBuffer["delete"]();weight.aggregationBuffer=new _core.Buffer(numCol,{byteLength:numRow,accessor:{size:4,type:5126,divisor:1}})}}}},{key:"updateResults",value:function(_ref2){var aggregationData=_ref2.aggregationData,maxMinData=_ref2.maxMinData,maxData=_ref2.maxData;_ref2=_ref2.minData;var count=this.state.weights.count;count&&(count.aggregationData=aggregationData,count.maxMinData=maxMinData,count.maxData=
maxData,count.minData=_ref2)}},{key:"_updateAggregation",value:function(opts){var _this$state2=this.state,cpuGridAggregator=_this$state2.cpuGridAggregator,gpuGridAggregator=_this$state2.gpuGridAggregator,gridOffset=_this$state2.gridOffset,posOffset=_this$state2.posOffset,_this$state2$translat=_this$state2.translation;_this$state2$translat=void 0===_this$state2$translat?[0,0]:_this$state2$translat;var _this$state2$scaling=_this$state2.scaling;_this$state2$scaling=void 0===_this$state2$scaling?[0,0,
0]:_this$state2$scaling;var boundingBox=_this$state2.boundingBox,projectPoints=_this$state2.projectPoints,gpuAggregation=_this$state2.gpuAggregation,numCol=_this$state2.numCol;_this$state2=_this$state2.numRow;opts=opts.props;var viewport=this.context.viewport,attributes=this.getAttributes(),vertexCount=this.getNumInstances();gpuAggregation?gpuGridAggregator.run({weights:this.state.weights,cellSize:[gridOffset.xOffset,gridOffset.yOffset],numCol:numCol,numRow:_this$state2,translation:_this$state2$translat,
scaling:_this$state2$scaling,vertexCount:vertexCount,projectPoints:projectPoints,attributes:attributes,moduleSettings:this.getModuleSettings()}):(cpuGridAggregator=cpuGridAggregator(opts,{gridOffset:gridOffset,projectPoints:projectPoints,attributes:attributes,viewport:viewport,posOffset:posOffset,boundingBox:boundingBox}),this.setState({layerData:cpuGridAggregator}))}},{key:"_updateWeightBins",value:function(){var sortedBins=new _binSorter["default"](this.state.layerData.data||[],{getValue:this.state.getValue});
this.setState({sortedBins:sortedBins})}},{key:"_uploadAggregationResults",value:function(){var _this$state3=this.state,numCol=_this$state3.numCol,data=this.state.layerData.data,_this$state$sortedBin=this.state.sortedBins,aggregatedBins=_this$state$sortedBin.aggregatedBins,minValue=_this$state$sortedBin.minValue,maxValue=_this$state$sortedBin.maxValue;_this$state$sortedBin=_this$state$sortedBin.totalCount;_this$state3=(new Float32Array(numCol*_this$state3.numRow*4)).fill(0);var _iteratorNormalCompletion=
!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=aggregatedBins[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var bin=_step.value,_data$bin$i=data[bin.i],counts=bin.counts,cellIndex=4*(_data$bin$i.lonIdx+_data$bin$i.latIdx*numCol);_this$state3[cellIndex]=bin.value;_this$state3[cellIndex+4-1]=counts}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{if(!_iteratorNormalCompletion&&null!=_iterator["return"])_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError;
}}numCol=new Float32Array([maxValue,0,0,minValue]);maxValue=new Float32Array([maxValue,0,0,_this$state$sortedBin]);minValue=new Float32Array([minValue,0,0,_this$state$sortedBin]);this.updateResults({aggregationData:_this$state3,maxMinData:numCol,maxData:maxValue,minData:minValue})}}]);return GridAggregationLayer}(module["default"]);exports["default"]=require;require.layerName="GridAggregationLayer"}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$grid_aggregation_layer.js.map
