shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$bitmap_layer$bitmap_layer=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),_possibleConstructorReturn2=
global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_get2=global(require("module$node_modules$$babel$runtime$helpers$get")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits"));module=global(require("module$node_modules$$babel$runtime$helpers$defineProperty"));var _core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_core2=
require("module$node_modules$$luma_DOT_gl$core$dist$es5$index"),_createMesh2=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$bitmap_layer$create_mesh")),_bitmapLayerVertex=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$bitmap_layer$bitmap_layer_vertex")),_bitmapLayerFragment=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$bitmap_layer$bitmap_layer_fragment")),_DEFAULT_TEXTURE_PARA,DEFAULT_TEXTURE_PARAMETERS=(_DEFAULT_TEXTURE_PARA={},(0,module["default"])(_DEFAULT_TEXTURE_PARA,
10241,9987),(0,module["default"])(_DEFAULT_TEXTURE_PARA,10240,9729),(0,module["default"])(_DEFAULT_TEXTURE_PARA,10242,33071),(0,module["default"])(_DEFAULT_TEXTURE_PARA,10243,33071),_DEFAULT_TEXTURE_PARA);require=function(_Layer){function BitmapLayer(){(0,_classCallCheck2["default"])(this,BitmapLayer);return(0,_possibleConstructorReturn2["default"])(this,(0,_getPrototypeOf2["default"])(BitmapLayer).apply(this,arguments))}(0,_inherits2["default"])(BitmapLayer,_Layer);(0,_createClass2["default"])(BitmapLayer,
[{key:"getShaders",value:function(){return(0,_get2["default"])((0,_getPrototypeOf2["default"])(BitmapLayer.prototype),"getShaders",this).call(this,{vs:_bitmapLayerVertex["default"],fs:_bitmapLayerFragment["default"],modules:[_core.project32,_core.picking]})}},{key:"initializeState",value:function(){var _this=this,attributeManager=this.getAttributeManager();attributeManager.remove(["instancePickingColors"]);attributeManager.add({indices:{size:1,isIndexed:!0,update:function(attribute){return attribute.value=
_this.state.mesh.indices},noAlloc:!0},positions:{size:3,type:5130,fp64:this.use64bitPositions(),update:function(attribute){return attribute.value=_this.state.mesh.positions},noAlloc:!0},texCoords:{size:2,update:function(attribute){return attribute.value=_this.state.mesh.texCoords},noAlloc:!0}})}},{key:"updateState",value:function(_ref){var props=_ref.props,oldProps=_ref.oldProps;if(_ref.changeFlags.extensionsChanged){_ref=this.context.gl;if(this.state.model)this.state.model["delete"]();this.setState({model:this._getModel(_ref)});
this.getAttributeManager().invalidateAll()}props.image!==oldProps.image&&this.loadTexture(props.image);_ref=this.getAttributeManager();if(props.bounds!==oldProps.bounds){props=this.state.mesh;oldProps=this._createMesh();this.state.model.setVertexCount(oldProps.vertexCount);for(var key in oldProps)props&&props[key]!==oldProps[key]&&_ref.invalidate(key);this.setState({mesh:oldProps})}}},{key:"finalizeState",value:function(){(0,_get2["default"])((0,_getPrototypeOf2["default"])(BitmapLayer.prototype),
"finalizeState",this).call(this);if(this.state.bitmapTexture)this.state.bitmapTexture["delete"]()}},{key:"_createMesh",value:function(){var bounds=this.props.bounds,normalizedBounds=bounds;Number.isFinite(bounds[0])&&(normalizedBounds=[[bounds[0],bounds[1]],[bounds[0],bounds[3]],[bounds[2],bounds[3]],[bounds[2],bounds[1]]]);return(0,_createMesh2["default"])(normalizedBounds,this.context.viewport.resolution)}},{key:"_getModel",value:function(gl){return gl?new _core2.Model(gl,Object.assign({},this.getShaders(),
{id:this.props.id,geometry:new _core2.Geometry({drawMode:4,vertexCount:6}),isInstanced:!1})):null}},{key:"draw",value:function(opts){opts=opts.uniforms;var _this$state=this.state,bitmapTexture=_this$state.bitmapTexture;_this$state=_this$state.model;var _this$props=this.props,image=_this$props.image,desaturate=_this$props.desaturate,transparentColor=_this$props.transparentColor;_this$props=_this$props.tintColor;bitmapTexture&&image instanceof HTMLVideoElement&&image.readyState>HTMLVideoElement.HAVE_METADATA&&
(bitmapTexture.width!==image.videoWidth||bitmapTexture.height!==image.videoHeight?(bitmapTexture.resize({width:image.videoWidth,height:image.videoHeight,mipmaps:!0}),bitmapTexture.setSubImageData({data:image,paramters:DEFAULT_TEXTURE_PARAMETERS})):bitmapTexture.setSubImageData({data:image}),bitmapTexture.generateMipmap());bitmapTexture&&_this$state&&_this$state.setUniforms(Object.assign({},opts,{bitmapTexture:bitmapTexture,desaturate:desaturate,transparentColor:transparentColor.map(function(x){return x/
255}),tintColor:_this$props.slice(0,3).map(function(x){return x/255})})).draw()}},{key:"loadTexture",value:function(image){var gl=this.context.gl;if(this.state.bitmapTexture)this.state.bitmapTexture["delete"]();image instanceof _core2.Texture2D?this.setState({bitmapTexture:image}):image instanceof HTMLVideoElement?this.setState({bitmapTexture:new _core2.Texture2D(gl,{width:1,height:1,parameters:DEFAULT_TEXTURE_PARAMETERS,mipmaps:!1})}):image&&this.setState({bitmapTexture:new _core2.Texture2D(gl,{data:image,
parameters:DEFAULT_TEXTURE_PARAMETERS})})}}]);return BitmapLayer}(_core.Layer);exports["default"]=require;require.layerName="BitmapLayer";require.defaultProps={image:{type:"object",value:null,async:!0},bounds:{type:"array",value:[1,0,0,1],compare:!0},desaturate:{type:"number",min:0,max:1,value:0},transparentColor:{type:"color",value:[0,0,0,0]},tintColor:{type:"color",value:[255,255,255]}}}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$bitmap_layer$bitmap_layer.js.map
