shadow$provide.module$node_modules$$deck_DOT_gl$layers$dist$es5$geojson_layer$geojson_layer=function(global,require,module,exports){function getCoordinates(f){return f.geometry.coordinates}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),
_possibleConstructorReturn2=global(require("module$node_modules$$babel$runtime$helpers$possibleConstructorReturn")),_getPrototypeOf2=global(require("module$node_modules$$babel$runtime$helpers$getPrototypeOf")),_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_core=require("module$node_modules$$deck_DOT_gl$core$dist$es5$index"),_scatterplotLayer=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$scatterplot_layer$scatterplot_layer")),_pathLayer=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$path_layer$path_layer")),
_solidPolygonLayer=global(require("module$node_modules$$deck_DOT_gl$layers$dist$es5$solid_polygon_layer$solid_polygon_layer")),_utils=require("module$node_modules$$deck_DOT_gl$layers$dist$es5$utils"),_geojson=require("module$node_modules$$deck_DOT_gl$layers$dist$es5$geojson_layer$geojson");require={stroked:!0,filled:!0,extruded:!1,wireframe:!1,lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,lineJointRounded:!1,lineMiterLimit:4,elevationScale:1,
pointRadiusUnits:"meters",pointRadiusScale:1,pointRadiusMinPixels:0,pointRadiusMaxPixels:Number.MAX_SAFE_INTEGER,getLineColor:{type:"accessor",value:[0,0,0,255]},getFillColor:{type:"accessor",value:[0,0,0,255]},getRadius:{type:"accessor",value:1},getLineWidth:{type:"accessor",value:1},getElevation:{type:"accessor",value:1E3},material:!0};global=function(_CompositeLayer){function GeoJsonLayer(){(0,_classCallCheck2["default"])(this,GeoJsonLayer);return(0,_possibleConstructorReturn2["default"])(this,
(0,_getPrototypeOf2["default"])(GeoJsonLayer).apply(this,arguments))}(0,_inherits2["default"])(GeoJsonLayer,_CompositeLayer);(0,_createClass2["default"])(GeoJsonLayer,[{key:"initializeState",value:function(){this.state={features:{}};this.props.getLineDashArray&&_core.log.removed("getLineDashArray","PathStyleExtension")()}},{key:"updateState",value:function(_ref){var props=_ref.props;_ref=_ref.changeFlags;if(_ref.dataChanged){props=(0,_geojson.getGeojsonFeatures)(props.data);var wrapFeature=this.getSubLayerRow.bind(this);
if(Array.isArray(_ref.dataChanged)){var oldFeatures=this.state.features,newFeatures={},featuresDiff={};for(key in oldFeatures)newFeatures[key]=oldFeatures[key].slice(),featuresDiff[key]=[];var key=!0;var _didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=_ref.dataChanged[Symbol.iterator](),_step;!(key=(_step=_iterator.next()).done);key=!0){var dataRange=_step.value,partialFeatures=(0,_geojson.separateGeojsonFeatures)(props,wrapFeature,dataRange),_key;for(_key in oldFeatures)featuresDiff[_key].push((0,
_utils.replaceInRange)({data:newFeatures[_key],getIndex:function(f){return f.__source.index},dataRange:dataRange,replace:partialFeatures[_key]}))}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{if(!key&&null!=_iterator["return"])_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError;}}this.setState({features:newFeatures,featuresDiff:featuresDiff})}else this.setState({features:(0,_geojson.separateGeojsonFeatures)(props,wrapFeature),featuresDiff:{}})}}},{key:"renderLayers",
value:function(){var _this$state=this.state,features=_this$state.features,featuresDiff=_this$state.featuresDiff;_this$state=features.pointFeatures;var lineFeatures=features.lineFeatures,polygonFeatures=features.polygonFeatures,polygonOutlineFeatures=features.polygonOutlineFeatures,_this$props=this.props,stroked=_this$props.stroked,filled=_this$props.filled;features=_this$props.extruded;var wireframe=_this$props.wireframe,material=_this$props.material;_this$props=_this$props.transitions;var _this$props2=
this.props,lineWidthUnits=_this$props2.lineWidthUnits,lineWidthScale=_this$props2.lineWidthScale,lineWidthMinPixels=_this$props2.lineWidthMinPixels,lineWidthMaxPixels=_this$props2.lineWidthMaxPixels,lineJointRounded=_this$props2.lineJointRounded,lineMiterLimit=_this$props2.lineMiterLimit,pointRadiusUnits=_this$props2.pointRadiusUnits,pointRadiusScale=_this$props2.pointRadiusScale,pointRadiusMinPixels=_this$props2.pointRadiusMinPixels,pointRadiusMaxPixels=_this$props2.pointRadiusMaxPixels,elevationScale=
_this$props2.elevationScale,lineDashJustified=_this$props2.lineDashJustified,_this$props3=this.props;_this$props2=_this$props3.getLineColor;var getFillColor=_this$props3.getFillColor,getRadius=_this$props3.getRadius,getLineWidth=_this$props3.getLineWidth,getLineDashArray=_this$props3.getLineDashArray,getElevation=_this$props3.getElevation;_this$props3=_this$props3.updateTriggers;var PolygonFillLayer=this.getSubLayerClass("polygons-fill",_solidPolygonLayer["default"]),PolygonStrokeLayer=this.getSubLayerClass("polygons-stroke",
_pathLayer["default"]),LineStringsLayer=this.getSubLayerClass("line-strings",_pathLayer["default"]),PointsLayer=this.getSubLayerClass("points",_scatterplotLayer["default"]);polygonFeatures=this.shouldRenderSubLayer("polygons-fill",polygonFeatures)&&new PolygonFillLayer({_dataDiff:featuresDiff.polygonFeatures&&function(){return featuresDiff.polygonFeatures},extruded:features,elevationScale:elevationScale,filled:filled,wireframe:wireframe,material:material,getElevation:this.getSubLayerAccessor(getElevation),
getFillColor:this.getSubLayerAccessor(getFillColor),getLineColor:this.getSubLayerAccessor(_this$props2),transitions:_this$props&&{getPolygon:_this$props.geometry,getElevation:_this$props.getElevation,getFillColor:_this$props.getFillColor,getLineColor:_this$props.getLineColor}},this.getSubLayerProps({id:"polygons-fill",updateTriggers:{getElevation:_this$props3.getElevation,getFillColor:_this$props3.getFillColor,getLineColor:_this$props3.getLineColor}}),{data:polygonFeatures,getPolygon:getCoordinates});
polygonOutlineFeatures=!features&&stroked&&this.shouldRenderSubLayer("polygons-stroke",polygonOutlineFeatures)&&new PolygonStrokeLayer({_dataDiff:featuresDiff.polygonOutlineFeatures&&function(){return featuresDiff.polygonOutlineFeatures},widthUnits:lineWidthUnits,widthScale:lineWidthScale,widthMinPixels:lineWidthMinPixels,widthMaxPixels:lineWidthMaxPixels,rounded:lineJointRounded,miterLimit:lineMiterLimit,dashJustified:lineDashJustified,getColor:this.getSubLayerAccessor(_this$props2),getWidth:this.getSubLayerAccessor(getLineWidth),
getDashArray:this.getSubLayerAccessor(getLineDashArray),transitions:_this$props&&{getPath:_this$props.geometry,getColor:_this$props.getLineColor,getWidth:_this$props.getLineWidth}},this.getSubLayerProps({id:"polygons-stroke",updateTriggers:{getColor:_this$props3.getLineColor,getWidth:_this$props3.getLineWidth,getDashArray:_this$props3.getLineDashArray}}),{data:polygonOutlineFeatures,getPath:getCoordinates});lineFeatures=this.shouldRenderSubLayer("linestrings",lineFeatures)&&new LineStringsLayer({_dataDiff:featuresDiff.lineFeatures&&
function(){return featuresDiff.lineFeatures},widthUnits:lineWidthUnits,widthScale:lineWidthScale,widthMinPixels:lineWidthMinPixels,widthMaxPixels:lineWidthMaxPixels,rounded:lineJointRounded,miterLimit:lineMiterLimit,dashJustified:lineDashJustified,getColor:this.getSubLayerAccessor(_this$props2),getWidth:this.getSubLayerAccessor(getLineWidth),getDashArray:this.getSubLayerAccessor(getLineDashArray),transitions:_this$props&&{getPath:_this$props.geometry,getColor:_this$props.getLineColor,getWidth:_this$props.getLineWidth}},
this.getSubLayerProps({id:"line-strings",updateTriggers:{getColor:_this$props3.getLineColor,getWidth:_this$props3.getLineWidth,getDashArray:_this$props3.getLineDashArray}}),{data:lineFeatures,getPath:getCoordinates});_this$state=this.shouldRenderSubLayer("points",_this$state)&&new PointsLayer({_dataDiff:featuresDiff.pointFeatures&&function(){return featuresDiff.pointFeatures},stroked:stroked,filled:filled,radiusUnits:pointRadiusUnits,radiusScale:pointRadiusScale,radiusMinPixels:pointRadiusMinPixels,
radiusMaxPixels:pointRadiusMaxPixels,lineWidthUnits:lineWidthUnits,lineWidthScale:lineWidthScale,lineWidthMinPixels:lineWidthMinPixels,lineWidthMaxPixels:lineWidthMaxPixels,getFillColor:this.getSubLayerAccessor(getFillColor),getLineColor:this.getSubLayerAccessor(_this$props2),getRadius:this.getSubLayerAccessor(getRadius),getLineWidth:this.getSubLayerAccessor(getLineWidth),transitions:_this$props&&{getPosition:_this$props.geometry,getFillColor:_this$props.getFillColor,getLineColor:_this$props.getLineColor,
getRadius:_this$props.getRadius,getLineWidth:_this$props.getLineWidth}},this.getSubLayerProps({id:"points",updateTriggers:{getFillColor:_this$props3.getFillColor,getLineColor:_this$props3.getLineColor,getRadius:_this$props3.getRadius,getLineWidth:_this$props3.getLineWidth}}),{data:_this$state,getPosition:getCoordinates,highlightedObjectIndex:this._getHighlightedIndex(_this$state)});return[!features&&polygonFeatures,polygonOutlineFeatures,lineFeatures,_this$state,features&&polygonFeatures]}},{key:"_getHighlightedIndex",
value:function(data){var highlightedObjectIndex=this.props.highlightedObjectIndex;return Number.isFinite(highlightedObjectIndex)?data.findIndex(function(d){return d.__source.index===highlightedObjectIndex}):null}}]);return GeoJsonLayer}(_core.CompositeLayer);exports["default"]=global;global.layerName="GeoJsonLayer";global.defaultProps=require}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$layers$dist$es5$geojson_layer$geojson_layer.js.map
