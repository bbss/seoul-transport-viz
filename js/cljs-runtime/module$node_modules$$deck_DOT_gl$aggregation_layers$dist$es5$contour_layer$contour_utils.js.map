{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_utils.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/contour-layer/contour-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateContours = generateContours;\n\nvar _marchingSquares = require(\"./marching-squares\");\n\nfunction generateContours(_ref) {\n  var thresholdData = _ref.thresholdData,\n      colors = _ref.colors,\n      cellWeights = _ref.cellWeights,\n      gridSize = _ref.gridSize,\n      gridOrigin = _ref.gridOrigin,\n      cellSize = _ref.cellSize;\n  var contourSegments = [];\n  var contourPolygons = [];\n  var width = gridSize[0];\n  var height = gridSize[1];\n  var segmentIndex = 0;\n  var polygonIndex = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = thresholdData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var data = _step.value;\n      var contour = data.contour;\n      var threshold = contour.threshold;\n\n      for (var x = -1; x < width; x++) {\n        for (var y = -1; y < height; y++) {\n          var _getCode = (0, _marchingSquares.getCode)({\n            cellWeights: cellWeights,\n            threshold: threshold,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          }),\n              code = _getCode.code,\n              meanCode = _getCode.meanCode;\n\n          var opts = {\n            gridOrigin: gridOrigin,\n            cellSize: cellSize,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            code: code,\n            meanCode: meanCode,\n            thresholdData: data\n          };\n\n          if (Array.isArray(threshold)) {\n            opts.type = _marchingSquares.CONTOUR_TYPE.ISO_BANDS;\n            var polygons = (0, _marchingSquares.getVertices)(opts);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = polygons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var polygon = _step2.value;\n                contourPolygons[polygonIndex++] = {\n                  vertices: polygon,\n                  contour: contour\n                };\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          } else {\n            opts.type = _marchingSquares.CONTOUR_TYPE.ISO_LINES;\n            var vertices = (0, _marchingSquares.getVertices)(opts);\n\n            for (var i = 0; i < vertices.length; i += 2) {\n              contourSegments[segmentIndex++] = {\n                start: vertices[i],\n                end: vertices[i + 1],\n                contour: contour\n              };\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    contourSegments: contourSegments,\n    contourPolygons: contourPolygons\n  };\n}\n//# sourceMappingURL=contour-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","generateContours","_ref","thresholdData","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","contourPolygons","width","height","segmentIndex","polygonIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","data","contour","threshold","x","y","_getCode","_marchingSquares","getCode","opts","code","meanCode","Array","isArray","type","CONTOUR_TYPE","ISO_BANDS","polygons","getVertices","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","polygon","vertices","err","ISO_LINES","i","length","start","end"]
}
