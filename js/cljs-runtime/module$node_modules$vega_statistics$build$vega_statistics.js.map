{
"version":3,
"file":"module$node_modules$vega_statistics$build$vega_statistics.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/vega-statistics/build/vega-statistics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_statistics$build$vega_statistics\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n  (global = global || self, factory(global.vega = {}, global.d3));\n}(this, (function (exports, d3Array) { 'use strict';\n\n  function* numbers(values, valueof) {\n    if (valueof == null) {\n      for (let value of values) {\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        value = valueof(value, ++index, values);\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function quantiles(array, p, f) {\n    var values = Float64Array.from(numbers(array, f));\n\n    // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n    values.sort(d3Array.ascending);\n\n    return p.map(_ => d3Array.quantileSorted(values, _));\n  }\n\n  function quartiles(array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  // Scott, D. W. (1992) Multivariate Density Estimation:\n  // Theory, Practice, and Visualization. Wiley.\n  function estimateBandwidth(array, f) {\n    var n = array.length,\n        v = d3Array.deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34;\n\n    v = Math.min(v, h) || v || Math.abs(q[0]) || 1;\n\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin(_) {\n    // determine range\n    var maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2],\n        min  = _.extent[0],\n        max  = _.extent[1],\n        span = _.span || (max - min) || Math.abs(min) || 1,\n        step, level, minstep, precision, v, i, n, eps;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n      for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n      step = _.steps[Math.max(0, i-1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(\n        minstep,\n        Math.pow(base, Math.round(Math.log(span) / logb) - level)\n      );\n\n      // increase step size if too many bins\n      while (Math.ceil(span/step) > maxb) { step *= base; }\n\n      // decrease step size if allowed\n      for (i=0, n=div.length; i<n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    }\n\n    // update precision, min and max\n    v = Math.log(step);\n    precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n    eps = Math.pow(base, -precision - 1);\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop:  max === min ? min + step : max,\n      step:  step\n    };\n  }\n\n  exports.random = Math.random;\n\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI(array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n\n    var values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples,\n        a, i, j, mu;\n\n    for (j=0, mu=Array(m); j<m; ++j) {\n      for (a=0, i=0; i<n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n      mu[j] = a / n;\n    }\n\n    mu.sort(d3Array.ascending);\n\n    return [\n      d3Array.quantile(mu, alpha/2),\n      d3Array.quantile(mu, 1-(alpha/2))\n    ];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin(array, step, smooth, f) {\n    f = f || (_ => _);\n\n    let i = 0, j = 1,\n        n = array.length,\n        v = new Float64Array(n),\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j<n; ++j) {\n      x = f(array[j]);\n      if (x >= w) {\n        b = (a + b) / 2;\n        for (; i<j; ++i) v[i] = b;\n        w = x + step;\n        a = x;\n      }\n      b = x;\n    }\n\n    b = (a + b) / 2;\n    for (; i<j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  }\n\n  // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n  function smoothing(v, thresh) {\n    let n = v.length,\n        a = 0,\n        b = 1,\n        c, d;\n\n    // get left stack\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n      while (v[b] === v[c]) ++c;\n\n      // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n      if (v[b] - v[b-1] < thresh) {\n        d = b + ((a + c - b - b) >> 1);\n        while (d < b) v[d++] = v[b];\n        while (d > b) v[d--] = v[a];\n      }\n\n      // update left stack indices\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function lcg(seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function() {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    var dist = {},\n        a, b, d;\n\n    dist.min = function(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    };\n\n    dist.max = function(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    };\n\n    dist.sample = function() {\n      return a + Math.floor(d * exports.random());\n    };\n\n    dist.pdf = function(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    };\n\n    dist.cdf = function(x) {\n      var v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    };\n\n    dist.icdf = function(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    };\n\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let x = 0, y = 0, rds, c;\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n      x *= c;\n      nextSample = y * c;\n    }\n    return mean + x * stdev;\n  }\n\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  }\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let cd,\n        z = (value - mean) / stdev,\n        Z = Math.abs(z);\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      let sum, exp = Math.exp(-Z * Z / 2);\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  }\n\n  // Approximation of Probit function using inverse error function.\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  }\n\n  // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = - Math.log((1 - x) * (1 + x)), p;\n\n    if (w < 6.25) {\n        w -= 3.125;\n        p =  -3.6444120640178196996e-21;\n        p =   -1.685059138182016589e-19 + p * w;\n        p =   1.2858480715256400167e-18 + p * w;\n        p =    1.115787767802518096e-17 + p * w;\n        p =   -1.333171662854620906e-16 + p * w;\n        p =   2.0972767875968561637e-17 + p * w;\n        p =   6.6376381343583238325e-15 + p * w;\n        p =  -4.0545662729752068639e-14 + p * w;\n        p =  -8.1519341976054721522e-14 + p * w;\n        p =   2.6335093153082322977e-12 + p * w;\n        p =  -1.2975133253453532498e-11 + p * w;\n        p =  -5.4154120542946279317e-11 + p * w;\n        p =    1.051212273321532285e-09 + p * w;\n        p =  -4.1126339803469836976e-09 + p * w;\n        p =  -2.9070369957882005086e-08 + p * w;\n        p =   4.2347877827932403518e-07 + p * w;\n        p =  -1.3654692000834678645e-06 + p * w;\n        p =  -1.3882523362786468719e-05 + p * w;\n        p =    0.0001867342080340571352 + p * w;\n        p =  -0.00074070253416626697512 + p * w;\n        p =   -0.0060336708714301490533 + p * w;\n        p =      0.24015818242558961693 + p * w;\n        p =       1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n        w = Math.sqrt(w) - 3.25;\n        p =   2.2137376921775787049e-09;\n        p =   9.0756561938885390979e-08 + p * w;\n        p =  -2.7517406297064545428e-07 + p * w;\n        p =   1.8239629214389227755e-08 + p * w;\n        p =   1.5027403968909827627e-06 + p * w;\n        p =   -4.013867526981545969e-06 + p * w;\n        p =   2.9234449089955446044e-06 + p * w;\n        p =   1.2475304481671778723e-05 + p * w;\n        p =  -4.7318229009055733981e-05 + p * w;\n        p =   6.8284851459573175448e-05 + p * w;\n        p =   2.4031110387097893999e-05 + p * w;\n        p =   -0.0003550375203628474796 + p * w;\n        p =   0.00095328937973738049703 + p * w;\n        p =   -0.0016882755560235047313 + p * w;\n        p =    0.0024914420961078508066 + p * w;\n        p =   -0.0037512085075692412107 + p * w;\n        p =     0.005370914553590063617 + p * w;\n        p =       1.0052589676941592334 + p * w;\n        p =       3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n        w = Math.sqrt(w) - 5.0;\n        p =  -2.7109920616438573243e-11;\n        p =  -2.5556418169965252055e-10 + p * w;\n        p =   1.5076572693500548083e-09 + p * w;\n        p =  -3.7894654401267369937e-09 + p * w;\n        p =   7.6157012080783393804e-09 + p * w;\n        p =  -1.4960026627149240478e-08 + p * w;\n        p =   2.9147953450901080826e-08 + p * w;\n        p =  -6.7711997758452339498e-08 + p * w;\n        p =   2.2900482228026654717e-07 + p * w;\n        p =  -9.9298272942317002539e-07 + p * w;\n        p =   4.5260625972231537039e-06 + p * w;\n        p =  -1.9681778105531670567e-05 + p * w;\n        p =   7.5995277030017761139e-05 + p * w;\n        p =  -0.00021503011930044477347 + p * w;\n        p =  -0.00013871931833623122026 + p * w;\n        p =       1.0103004648645343977 + p * w;\n        p =       4.8499064014085844221 + p * w;\n    } else {\n        p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function gaussian(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleNormal(mu, sigma),\n          pdf: value => densityNormal(value, mu, sigma),\n          cdf: value => cumulativeNormal(value, mu, sigma),\n          icdf: p => quantileNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  // TODO: support for additional kernels?\n  function kde(support, bandwidth) {\n    var kernel = gaussian(),\n        dist = {},\n        n = 0;\n\n    dist.data = function(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    };\n\n    dist.bandwidth = function(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    };\n\n    dist.sample = function() {\n      return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    };\n\n    dist.cdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    };\n\n    dist.icdf = function() {\n      throw Error('KDE icdf not supported.');\n    };\n\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n\n  function lognormal(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleLogNormal(mu, sigma),\n          pdf: value => densityLogNormal(value, mu, sigma),\n          cdf: value => cumulativeLogNormal(value, mu, sigma),\n          icdf: p => quantileLogNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture(dists, weights) {\n    var dist = {}, m = 0, w;\n\n    function normalize(x) {\n      var w = [], sum = 0, i;\n      for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n      for (i=0; i<m; ++i) { w[i] /= sum; }\n      return w;\n    }\n\n    dist.weights = function(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    };\n\n    dist.distributions = function(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    };\n\n    dist.sample = function() {\n      var r = exports.random(),\n          d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    };\n\n    dist.cdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    };\n\n    dist.icdf = function() {\n      throw Error('Mixture icdf not supported.');\n    };\n\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return min + (max - min) * exports.random();\n  }\n\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (value >= min && value <= max) ? 1 / (max - min) : 0;\n  }\n\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n  }\n\n  function uniform(min, max) {\n    var a, b,\n        dist = {\n          min: function(_) {\n            if (arguments.length) {\n              a = _ || 0;\n              return dist;\n            } else {\n              return a;\n            }\n          },\n          max: function(_) {\n            if (arguments.length) {\n              b = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return b;\n            }\n          },\n          sample: () => sampleUniform(a, b),\n          pdf: value => densityUniform(value, a, b),\n          cdf: value => cumulativeUniform(value, a, b),\n          icdf: p => quantileUniform(p, a, b)\n        };\n\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return dist.min(min).max(max);\n  }\n\n  // Ordinary Least Squares\n  function ols(uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d), v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const n = data.length,\n          X = new Float64Array(n),\n          Y = new Float64Array(n);\n\n    // extract values, calculate means\n    let i = 0, ux = 0, uy = 0, xv, yv, d;\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    }\n\n    // mean center the data\n    for (i=0; i<n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n\n    return [X, Y, ux, uy];\n  }\n\n  function visitPoints(data, x, y, callback) {\n    let i = -1, u, v;\n\n    for (let d of data) {\n      u = x(d);\n      v = y(d);\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function rSquared(data, x, y, uY, predict) {\n    let SSE = 0, SST = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n\n    return 1 - SSE / SST;\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function linear(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function log(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function exp(data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n          predict = x => Math.exp(c0 + c1 * (x - ux));\n\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function pow(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function quad(data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length;\n\n    let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n        i, dx, dy, x2;\n\n    for (i=0; i<n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n\n    const X2X2 = X4 - (X2 * X2),\n          d = (X2 * X2X2 - X3 * X3),\n          a = (X2Y * X2 - XY * X3) / d,\n          b = (XY * X2X2 - X2Y * X3) / d,\n          c = -a * X2,\n          predict = x => {\n            x = x - ux;\n            return a * x * x + b * x + c + uy;\n          };\n\n    // transform coefficients back from mean-centered space\n    return {\n      coef: [\n        c - b * ux + a * ux * ux + uy,\n        b - 2 * a * ux,\n        a\n      ],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n  function poly(data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return linear(data, x, y);\n    if (order === 2) return quad(data, x, y);\n\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n\n    let i, j, l, v, c;\n\n    for (i=0; i<k; ++i) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j=0; j<k; ++j) {\n        for (l=0, v=0; l<n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n            x -= ux;\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n            for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          };\n\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c;\n\n    // initialize to zero\n    for (i=0; i<k; ++i) z[i] = 0;\n\n    // polynomial expansion\n    for (i=k-1; i>=0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n      for (j=1; j<=i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n        z[i-j] += v * Math.pow(x, j) * c;\n      }\n    }\n\n    // bias term\n    z[0] += y;\n\n    return z;\n  }\n\n  // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon = 1e-12;\n\n  // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n  function loess(data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n          yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters; ) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0,\n            denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = d3Array.median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i){\n        arg = residuals[i] / (6 * medianResidual);\n        // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n      }\n    }\n\n    return output(xv, yhat, ux, uy);\n  }\n\n  // weighting kernel for local regression\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  }\n\n  // advance sliding window interval of nearest neighbors\n  function updateInterval(xv, i, interval) {\n    let val = xv[i],\n        left = interval[0],\n        right = interval[1] + 1;\n\n    if (right >= xv.length) return;\n\n    // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  }\n\n  // generate smoothed output points\n  // average points with repeated x values\n  function output(xv, yhat, ux, uy) {\n    const n = xv.length, out = [];\n    let i = 0, cnt = 0, prev = [], v;\n\n    for (; i<n; ++i) {\n      v = xv[i] + ux;\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / (++cnt);\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n    prev[1] += uy;\n\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.1 degrees\n  const MIN_RADIANS = 0.1 * Math.PI / 180;\n\n  // Adaptively sample an interpolated function over a domain extent\n  function sampleCurve(f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + (i / minSteps) * span));\n      }\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + (i / minSteps) * span));\n      }\n    }\n\n    let p0 = prev[0],\n        p1 = next[next.length - 1];\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function angleDelta(p, q, r) {\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n    return Math.abs(a0 - a1);\n  }\n\n  exports.bandwidthNRD = estimateBandwidth;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.dotbin = dotbin;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.regressionExp = exp;\n  exports.regressionLinear = linear;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow;\n  exports.regressionQuad = quad;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.setRandom = setRandom;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","vega","d3","d3Array","numbers","values","valueof","index","value","quantiles","array","p","f","Float64Array","from","sort","ascending","map","_","quantileSorted","quartiles","estimateBandwidth","n","length","v","deviation","q","Math","min","abs","pow","smoothing","thresh","a","b","c","d","sampleNormal","mean","stdev","nextSample","x","NaN","random","y","rds","sqrt","log","densityNormal","z","exp","SQRT2PI","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","Infinity","SQRT2","gaussian","mu","sigma","dist","arguments","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","max","densityUniform","cumulativeUniform","quantileUniform","ols","uX","uY","uXY","uX2","delta","slope","points","data","filter","u","X","Y","i","ux","uy","xv","yv","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","quad","X3","X4","X2Y","x2","X2X2","uncenter","k","Array","j","gaussianElimination","matrix","r","t","PI","MIN_RADIANS","bandwidthNRD","bin","maxb","maxbins","base","logb","div","divide","extent","span","step","steps","level","ceil","minstep","round","eps","precision","nice","undefined","floor","start","stop","bootstrapCI","samples","alpha","quantile","dotbin","smooth","randomInteger","integer","dist.min","dist.max","dist.sample","dist.pdf","dist.cdf","dist.icdf","randomKDE","kde","support","bandwidth","kernel","dist.data","dist.bandwidth","Error","randomLCG","lcg","seed","randomLogNormal","lognormal","randomMixture","mixture","dists","weights","m","dist.weights","sum","distributions","dist.distributions","randomNormal","randomUniform","uniform","regressionExp","YL","XYL","ly","xy","c0","c1","regressionLinear","regressionLoess","loess","bw","yhat","residuals","robustWeights","fill","iter","maxiters","interval","i0","i1","W","denom","edge","xk","yk","xkw","val","left","right","medianResidual","median","epsilon","arg","out","cnt","prev","push","regressionLog","regressionPoly","poly","order","lhs","rhs","l","regressionPow","YS","lx","regressionQuad","sampleCurve","minSteps","maxSteps","point","minX","maxX","next","p0","p1","pm","atan2","a0","a1","pop","setRandom","Object","defineProperty"]
}
