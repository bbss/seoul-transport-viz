{
"version":3,
"file":"module$node_modules$$math_DOT_gl$culling$dist$es5$algorithms$bounding_sphere_from_points.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,yFAAA,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjJC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAE7BI,OAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAA,CAAQ,SAAR,CAAA,CAoBAK,QAAqC,CAACC,SAAD,CAAY,CAC/C,IAAIC,OAA4B,CAAnB,CAAAC,SAAAC,OAAA,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,IAAIG,eAAA,CAAgB,SAAhB,CAErF,IAAI,CAACL,SAAL,EAAuC,CAAvC,GAAkBA,SAAAG,OAAlB,CACE,MAAOF,OAAAK,iBAAA,CAAwB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAxB,CAAmC,CAAnC,CAGT,KAAIC;AAAaC,oBAAAC,KAAA,CAA0BT,SAAA,CAAU,CAAV,CAA1B,CAAjB,CACIU,KAAOC,cAAAF,KAAA,CAAoBF,UAApB,CADX,CAEIK,KAAOC,cAAAJ,KAAA,CAAoBF,UAApB,CAFX,CAGIO,KAAOC,cAAAN,KAAA,CAAoBF,UAApB,CAHX,CAIIS,KAAOC,cAAAR,KAAA,CAAoBF,UAApB,CAJX,CAKIW,KAAOC,cAAAV,KAAA,CAAoBF,UAApB,CALX,CAMIa,KAAOC,cAAAZ,KAAA,CAAoBF,UAApB,CANX,CAOIe,0BAA4B,CAAA,CAPhC,CAQIC,kBAAoB,CAAA,CARxB,CASIC,eAAiBpB,IAAAA,EAErB,IAAI,CACF,IADE,IACOqB,UAAYzB,SAAA,CAAU0B,MAAAC,SAAV,CAAA,EADnB,CACiDC,KAAnD,CAA0D,EAAEN,yBAAF,CAA8BO,CAACD,KAADC,CAASJ,SAAAK,KAAA,EAATD,MAA9B,CAA1D,CAA0HP,yBAA1H,CAAsJ,CAAA,CAAtJ,CAA4J,CAE1Jf,UAAAE,KAAA,CADemB,KAAA9B,MACf,CACA;IAAIiC,EAAIxB,UAAAwB,EAAR,CACIC,EAAIzB,UAAAyB,EADR,CAEIC,EAAI1B,UAAA0B,EAEJF,EAAJ,CAAQrB,IAAAqB,EAAR,EACExB,UAAAE,KAAA,CAAgBC,IAAhB,CAGEqB,EAAJ,CAAQf,IAAAe,EAAR,EACExB,UAAAE,KAAA,CAAgBO,IAAhB,CAGEgB,EAAJ,CAAQpB,IAAAoB,EAAR,EACEzB,UAAAE,KAAA,CAAgBG,IAAhB,CAGEoB,EAAJ,CAAQd,IAAAc,EAAR,EACEzB,UAAAE,KAAA,CAAgBS,IAAhB,CAGEe,EAAJ,CAAQnB,IAAAmB,EAAR,EACE1B,UAAAE,KAAA,CAAgBK,IAAhB,CAGEmB,EAAJ,CAAQb,IAAAa,EAAR,EACE1B,UAAAE,KAAA,CAAgBW,IAAhB,CA5BwJ,CAD1J,CAgCF,MAAOc,GAAP,CAAY,CACZX,iBACA,CADoB,CAAA,CACpB,CAAAC,cAAA,CAAiBU,GAFL,CAhCd,OAmCU,CACR,GAAI,CACF,GAAI,CAACZ,yBAAL,EAAyD,IAAzD,EAAkCG,SAAA,CAAU,QAAV,CAAlC,CACEA,SAAA,CAAU,QAAV,CAAA,EAFA,CAAJ,OAIU,CACR,GAAIF,iBAAJ,CACE,KAAMC,eAAN,CAFM,CALF,CAYNW,KAAAA,CAAQC,iBAAA3B,KAAA,CAAuBO,IAAvB,CAAAqB,SAAA,CAAsC3B,IAAtC,CAAA4B,iBAAA,EACRC;yBAAAA,CAAQH,iBAAA3B,KAAA,CAAuBS,IAAvB,CAAAmB,SAAA,CAAsCzB,IAAtC,CAAA0B,iBAAA,EACRE,UAAAA,CAAQJ,iBAAA3B,KAAA,CAAuBW,IAAvB,CAAAiB,SAAA,CAAsCvB,IAAtC,CAAAwB,iBAAA,EACRG,kBAAAA,CAAY/B,IACZgC,eAAAA,CAAY1B,IAGZuB,0BAAJ,CAAYI,KAAZ,GACEA,KAEA,CAFUJ,yBAEV,CADAE,iBACA,CADY7B,IACZ,CAAA8B,cAAA,CAAYxB,IAHd,CAMIsB,UAAJ,CAAYG,KAAZ,GAEEF,iBACA,CADY3B,IACZ,CAAA4B,cAAA,CAAYtB,IAHd,CAMIwB,0BAAAA,CAAeC,sBACnBD,0BAAAb,EAAA,CAA+C,EAA/C,EAAkBU,iBAAAV,EAAlB,CAAgCW,cAAAX,EAAhC,CACAa,0BAAAZ,EAAA;AAA+C,EAA/C,EAAkBS,iBAAAT,EAAlB,CAAgCU,cAAAV,EAAhC,CACAY,0BAAAX,EAAA,CAA+C,EAA/C,EAAkBQ,iBAAAR,EAAlB,CAAgCS,cAAAT,EAAhC,CACIa,kBAAAA,CAAgBV,iBAAA3B,KAAA,CAAuBiC,cAAvB,CAAAL,SAAA,CAA2CO,yBAA3C,CAAAN,iBAAA,EAChBS,eAAAA,CAAeC,IAAAC,KAAA,CAAUH,iBAAV,CACfI,UAAAA,CAAWC,kBACfD,UAAAnB,EAAA,CAAarB,IAAAqB,EACbmB,UAAAlB,EAAA,CAAapB,IAAAoB,EACbkB,UAAAjB,EAAA,CAAanB,IAAAmB,EACTmB,KAAAA,CAAWC,kBACfD,KAAArB,EAAA,CAAaf,IAAAe,EACbqB,KAAApB,EAAA,CAAad,IAAAc,EACboB,KAAAnB,EAAA,CAAab,IAAAa,EACTqB,KAAAA,CAAcC,4BAAA9C,KAAA,CAAkCyC,SAAlC,CAAAM,IAAA,CAAgDJ,IAAhD,CAAAK,iBAAA,CAA2E,EAA3E,CACdC;IAAAA,CAAc,CACdC,KAAAA,CAA6B,CAAA,CAC7BC,KAAAA,CAAqB,CAAA,CACrBC,KAAAA,CAAkBzD,IAAAA,EAEtB,IAAI,CACF,IADE,IACO0D,WAAa9D,SAAA,CAAU0B,MAAAC,SAAV,CAAA,EADpB,CACkDoC,MAApD,CAA4D,EAAEJ,IAAF,CAA+B9B,CAACkC,MAADlC,CAAUiC,UAAAhC,KAAA,EAAVD,MAA/B,CAA5D,CAA+H8B,IAA/H,CAA4J,CAAA,CAA5J,CAAkK,CAEhKpD,UAAAE,KAAA,CADgBsD,MAAAjE,MAChB,CACA,KAAIkE,EAAI5B,iBAAA3B,KAAA,CAAuBF,UAAvB,CAAA8B,SAAA,CAA4CiB,IAA5C,CAAAW,UAAA,EAEJD,EAAJ,CAAQN,IAAR,GACEA,IADF,CACgBM,CADhB,CAIA,KAAIE,wBAA0B9B,iBAAA3B,KAAA,CAAuBF,UAAvB,CAAA8B,SAAA,CAA4CO,yBAA5C,CAAAN,iBAAA,EAE9B,IAAI4B,uBAAJ,CAA8BpB,iBAA9B,CAA6C,CAC3C,IAAIqB,iBAAmBnB,IAAAC,KAAA,CAAUiB,uBAAV,CACvBnB,eAAA,CAAmD,EAAnD,EAAgBA,cAAhB;AAA+BoB,gBAA/B,CACArB,kBAAA,CAAgBC,cAAhB,CAA+BA,cAC3BqB,KAAAA,CAAWD,gBAAXC,CAA8BrB,cAClCH,0BAAAb,EAAA,EAAkBgB,cAAlB,CAAiCH,yBAAAb,EAAjC,CAAkDqC,IAAlD,CAA6D7D,UAAAwB,EAA7D,EAA6EoC,gBAC7EvB,0BAAAZ,EAAA,EAAkBe,cAAlB,CAAiCH,yBAAAZ,EAAjC,CAAkDoC,IAAlD,CAA6D7D,UAAAyB,EAA7D,EAA6EmC,gBAC7EvB,0BAAAX,EAAA,EAAkBc,cAAlB,CAAiCH,yBAAAX,EAAjC,CAAkDmC,IAAlD,CAA6D7D,UAAA0B,EAA7D,EAA6EkC,gBAPlC,CAXmH,CADhK,CAsBF,MAAOjC,OAAP,CAAY,CACZ0B,IACA,CADqB,CAAA,CACrB,CAAAC,IAAA,CAAkB3B,OAFN,CAtBd,OAyBU,CACR,GAAI,CACF,GAAI,CAACyB,IAAL,EAA2D,IAA3D,EAAmCG,UAAA,CAAW,QAAX,CAAnC,CACEA,UAAA,CAAW,QAAX,CAAA,EAFA,CAAJ,OAIU,CACR,GAAIF,IAAJ,CACE,KAAMC,KAAN;AAFM,CALF,CAYNd,cAAJ,CAAmBW,IAAnB,EACEd,yBAAAyB,GAAA,CAAgBpE,MAAAqE,OAAhB,CACA,CAAArE,MAAAsE,OAAA,CAAgBxB,cAFlB,GAIEO,IAAAe,GAAA,CAAepE,MAAAqE,OAAf,CACA,CAAArE,MAAAsE,OAAA,CAAgBb,IALlB,CAQA,OAAOzD,OArJwC,CAlB7CuE,QAAAA,CAAQhF,OAAA,CAAQ,sDAAR,CAEZ,KAAIa,gBAAkBV,MAAA,CAAuBH,OAAA,CAAQ,uEAAR,CAAvB,CAAtB,CAEImB,eAAiB,IAAI6D,OAAAC,QAFzB,CAGI5D,eAAiB,IAAI2D,OAAAC,QAHzB,CAII1D,eAAiB,IAAIyD,OAAAC,QAJzB,CAKIxD,eAAiB,IAAIuD,OAAAC,QALzB,CAMItD,eAAiB,IAAIqD,OAAAC,QANzB;AAOIpD,eAAiB,IAAImD,OAAAC,QAPzB,CAQIjE,qBAAuB,IAAIgE,OAAAC,QAR/B,CASIrC,kBAAoB,IAAIoC,OAAAC,QAT5B,CAUI5B,uBAAyB,IAAI2B,OAAAC,QAVjC,CAWItB,mBAAqB,IAAIqB,OAAAC,QAX7B,CAYIpB,mBAAqB,IAAImB,OAAAC,QAZ7B,CAaIlB,6BAA+B,IAAIiB,OAAAC,QAzB8G;",
"sources":["node_modules/@math_DOT_gl/culling/dist/es5/algorithms/bounding-sphere-from-points.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$culling$dist$es5$algorithms$bounding_sphere_from_points\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = makeBoundingSphereFromPoints;\n\nvar _core = require(\"@math.gl/core\");\n\nvar _boundingSphere = _interopRequireDefault(require(\"../lib/bounding-sphere\"));\n\nvar fromPointsXMin = new _core.Vector3();\nvar fromPointsYMin = new _core.Vector3();\nvar fromPointsZMin = new _core.Vector3();\nvar fromPointsXMax = new _core.Vector3();\nvar fromPointsYMax = new _core.Vector3();\nvar fromPointsZMax = new _core.Vector3();\nvar fromPointsCurrentPos = new _core.Vector3();\nvar fromPointsScratch = new _core.Vector3();\nvar fromPointsRitterCenter = new _core.Vector3();\nvar fromPointsMinBoxPt = new _core.Vector3();\nvar fromPointsMaxBoxPt = new _core.Vector3();\nvar fromPointsNaiveCenterScratch = new _core.Vector3();\nvar volumeConstant = 4.0 / 3.0 * Math.PI;\n\nfunction makeBoundingSphereFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _boundingSphere[\"default\"]();\n\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  var currentPos = fromPointsCurrentPos.copy(positions[0]);\n  var xMin = fromPointsXMin.copy(currentPos);\n  var yMin = fromPointsYMin.copy(currentPos);\n  var zMin = fromPointsZMin.copy(currentPos);\n  var xMax = fromPointsXMax.copy(currentPos);\n  var yMax = fromPointsYMax.copy(currentPos);\n  var zMax = fromPointsZMax.copy(currentPos);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = positions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var position = _step.value;\n      currentPos.copy(position);\n      var x = currentPos.x;\n      var y = currentPos.y;\n      var z = currentPos.z;\n\n      if (x < xMin.x) {\n        currentPos.copy(xMin);\n      }\n\n      if (x > xMax.x) {\n        currentPos.copy(xMax);\n      }\n\n      if (y < yMin.y) {\n        currentPos.copy(yMin);\n      }\n\n      if (y > yMax.y) {\n        currentPos.copy(yMax);\n      }\n\n      if (z < zMin.z) {\n        currentPos.copy(zMin);\n      }\n\n      if (z > zMax.z) {\n        currentPos.copy(zMax);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  var ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  var zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n  var diameter1 = xMin;\n  var diameter2 = xMax;\n  var maxSpan = xSpan;\n\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  var ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n  var radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  var ritterRadius = Math.sqrt(radiusSquared);\n  var minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n  var maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n  var naiveCenter = fromPointsNaiveCenterScratch.copy(minBoxPt).add(maxBoxPt).multiplyByScalar(0.5);\n  var naiveRadius = 0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = positions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _position = _step2.value;\n      currentPos.copy(_position);\n      var r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n\n      if (r > naiveRadius) {\n        naiveRadius = r;\n      }\n\n      var oldCenterToPointSquared = fromPointsScratch.copy(currentPos).subtract(ritterCenter).magnitudeSquared();\n\n      if (oldCenterToPointSquared > radiusSquared) {\n        var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n        ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n        radiusSquared = ritterRadius * ritterRadius;\n        var oldToNew = oldCenterToPoint - ritterRadius;\n        ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n        ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n        ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}\n//# sourceMappingURL=bounding-sphere-from-points.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","makeBoundingSphereFromPoints","positions","result","arguments","length","undefined","_boundingSphere","fromCenterRadius","currentPos","fromPointsCurrentPos","copy","xMin","fromPointsXMin","yMin","fromPointsYMin","zMin","fromPointsZMin","xMax","fromPointsXMax","yMax","fromPointsYMax","zMax","fromPointsZMax","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","done","next","x","y","z","err","xSpan","fromPointsScratch","subtract","magnitudeSquared","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","fromPointsRitterCenter","radiusSquared","ritterRadius","Math","sqrt","minBoxPt","fromPointsMinBoxPt","maxBoxPt","fromPointsMaxBoxPt","naiveCenter","fromPointsNaiveCenterScratch","add","multiplyByScalar","naiveRadius","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","r","magnitude","oldCenterToPointSquared","oldCenterToPoint","oldToNew","to","center","radius","_core","Vector3"]
}
