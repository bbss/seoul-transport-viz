shadow$provide.module$node_modules$$deck_DOT_gl$core$dist$es5$utils$math_utils=function(global,require,module,exports){function fp64LowPart(x){return x-Math.fround(x)}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.createMat4=function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]};exports.mod=function(value,divisor){value%=divisor;return 0>value?divisor+value:value};exports.extractCameraVectors=function(_ref){var viewMatrix=
_ref.viewMatrix;_ref=_ref.viewMatrixInverse;return{eye:[_ref[12],_ref[13],_ref[14]],direction:[-viewMatrix[2],-viewMatrix[6],-viewMatrix[10]],up:[viewMatrix[1],viewMatrix[5],viewMatrix[9]],right:[viewMatrix[0],viewMatrix[4],viewMatrix[8]]}};exports.getFrustumPlanes=function(_ref2){var aspect=_ref2.aspect,near=_ref2.near,far=_ref2.far,fovyRadians=_ref2.fovyRadians,position=_ref2.position,up=_ref2.up,right=_ref2.right;cameraDirection.copy(_ref2.direction);_ref2=1/cameraDirection.len();cameraDirection.normalize();
cameraPosition.copy(position);cameraUp.copy(up);position=1/cameraUp.len();cameraUp.normalize();cameraRight.copy(right).normalize();fovyRadians=2*Math.tan(fovyRadians/2)*near*position;aspect*=fovyRadians;nearCenter.copy(cameraDirection).scale(near*_ref2).add(cameraPosition);farCenter.copy(cameraDirection).scale(far*_ref2).add(cameraPosition);near=cameraDirection.clone().negate();far=near.dot(nearCenter);_ref2={near:{distance:far,normal:near},far:{distance:cameraDirection.dot(farCenter),normal:cameraDirection.clone()}};
a.copy(cameraRight).scale(.5*aspect).add(nearCenter).subtract(cameraPosition).normalize();near=(new _math.Vector3(a)).cross(cameraUp);far=cameraPosition.dot(near);_ref2.right={normal:near,distance:far};a.copy(cameraRight).scale(.5*-aspect).add(nearCenter).subtract(cameraPosition).normalize();near=(new _math.Vector3(cameraUp)).cross(a);far=cameraPosition.dot(near);_ref2.left={normal:near,distance:far};a.copy(cameraUp).scale(.5*fovyRadians).add(nearCenter).subtract(cameraPosition).normalize();near=
(new _math.Vector3(cameraRight)).cross(a);far=cameraPosition.dot(near);_ref2.top={normal:near,distance:far};a.copy(cameraUp).scale(.5*-fovyRadians).add(nearCenter).subtract(cameraPosition).normalize();near=(new _math.Vector3(a)).cross(cameraRight);far=cameraPosition.dot(near);_ref2.bottom={normal:near,distance:far};return _ref2};exports.fp64LowPart=fp64LowPart;exports.toDoublePrecisionArray=function(typedArray,_ref3){var _ref3$size=_ref3.size;_ref3$size=void 0===_ref3$size?1:_ref3$size;var _ref3$startIndex=
_ref3.startIndex,startIndex=void 0===_ref3$startIndex?0:_ref3$startIndex;_ref3=_ref3.endIndex;Number.isFinite(_ref3)||(_ref3=typedArray.length);_ref3$startIndex=(_ref3-startIndex)/_ref3$size;scratchArray=_typedArrayManager["default"].allocate(scratchArray,_ref3$startIndex,{type:Float32Array,size:2*_ref3$size});for(var targetIndex=0;startIndex<_ref3;){for(var j=0;j<_ref3$size;j++){var value=typedArray[startIndex++];scratchArray[targetIndex+j]=value;scratchArray[targetIndex+j+_ref3$size]=fp64LowPart(value)}targetIndex+=
2*_ref3$size}return scratchArray.subarray(0,_ref3$startIndex*_ref3$size*2)};var _typedArrayManager=global(require("module$node_modules$$deck_DOT_gl$core$dist$es5$utils$typed_array_manager")),_math=require("module$node_modules$math_DOT_gl$dist$es5$index"),cameraPosition=new _math.Vector3,cameraDirection=new _math.Vector3,cameraUp=new _math.Vector3,cameraRight=new _math.Vector3,nearCenter=new _math.Vector3,farCenter=new _math.Vector3,a=new _math.Vector3,scratchArray}
//# sourceMappingURL=module$node_modules$$deck_DOT_gl$core$dist$es5$utils$math_utils.js.map
