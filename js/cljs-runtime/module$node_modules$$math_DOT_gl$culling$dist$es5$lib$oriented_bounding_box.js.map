{
"version":3,
"file":"module$node_modules$$math_DOT_gl$culling$dist$es5$lib$oriented_bounding_box.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@math_DOT_gl/culling/dist/es5/lib/oriented-bounding-box.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$culling$dist$es5$lib$oriented_bounding_box\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _core = require(\"@math.gl/core\");\n\nvar _boundingSphere = _interopRequireDefault(require(\"./bounding-sphere\"));\n\nvar _constants = require(\"../constants\");\n\nvar scratchVector = new _core.Vector3();\nvar scratchOffset = new _core.Vector3();\nvar scratchVectorU = new _core.Vector3();\nvar scratchVectorV = new _core.Vector3();\nvar scratchVectorW = new _core.Vector3();\nvar scratchCorner = new _core.Vector3();\nvar scratchToCenter = new _core.Vector3();\nvar fromOrientedBoundingBoxScratchU = new _core.Vector3();\nvar fromOrientedBoundingBoxScratchV = new _core.Vector3();\nvar fromOrientedBoundingBoxScratchW = new _core.Vector3();\nvar MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nvar OrientedBoundingBox = function () {\n  function OrientedBoundingBox() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    var halfAxes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    (0, _classCallCheck2[\"default\"])(this, OrientedBoundingBox);\n    this.center = new _core.Vector3().from(center);\n    this.halfAxes = new _core.Matrix3(halfAxes);\n  }\n\n  (0, _createClass2[\"default\"])(OrientedBoundingBox, [{\n    key: \"clone\",\n    value: function clone() {\n      return new OrientedBoundingBox(this.center, this.halfAxes);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(right) {\n      return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);\n    }\n  }, {\n    key: \"getBoundingSphere\",\n    value: function getBoundingSphere() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _boundingSphere[\"default\"]();\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, fromOrientedBoundingBoxScratchU);\n      var v = halfAxes.getColumn(1, fromOrientedBoundingBoxScratchV);\n      var w = halfAxes.getColumn(2, fromOrientedBoundingBoxScratchW);\n      var cornerVector = scratchVector.copy(u).add(v).add(w);\n      result.center.copy(this.center);\n      result.radius = cornerVector.magnitude();\n      return result;\n    }\n  }, {\n    key: \"intersectPlane\",\n    value: function intersectPlane(plane) {\n      var center = this.center;\n      var normal = plane.normal;\n      var halfAxes = this.halfAxes;\n      var normalX = normal.x;\n      var normalY = normal.y;\n      var normalZ = normal.z;\n      var radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] + normalY * halfAxes[MATRIX3.COLUMN0ROW1] + normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] + normalY * halfAxes[MATRIX3.COLUMN1ROW1] + normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] + normalY * halfAxes[MATRIX3.COLUMN2ROW1] + normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);\n      var distanceToPlane = normal.dot(center) + plane.distance;\n\n      if (distanceToPlane <= -radEffective) {\n        return _constants.INTERSECTION.OUTSIDE;\n      } else if (distanceToPlane >= radEffective) {\n        return _constants.INTERSECTION.INSIDE;\n      }\n\n      return _constants.INTERSECTION.INTERSECTING;\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(point) {\n      return Math.sqrt(this.distanceSquaredTo(point));\n    }\n  }, {\n    key: \"distanceSquaredTo\",\n    value: function distanceSquaredTo(point) {\n      var offset = scratchOffset.from(point).subtract(this.center);\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, scratchVectorU);\n      var v = halfAxes.getColumn(1, scratchVectorV);\n      var w = halfAxes.getColumn(2, scratchVectorW);\n      var uHalf = u.magnitude();\n      var vHalf = v.magnitude();\n      var wHalf = w.magnitude();\n      u.normalize();\n      v.normalize();\n      w.normalize();\n      var distanceSquared = 0.0;\n      var d;\n      d = Math.abs(offset.dot(u)) - uHalf;\n\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n\n      d = Math.abs(offset.dot(v)) - vHalf;\n\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n\n      d = Math.abs(offset.dot(w)) - wHalf;\n\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n\n      return distanceSquared;\n    }\n  }, {\n    key: \"computePlaneDistances\",\n    value: function computePlaneDistances(position, direction) {\n      var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [-0, -0];\n      var minDist = Number.POSITIVE_INFINITY;\n      var maxDist = Number.NEGATIVE_INFINITY;\n      var center = this.center;\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, scratchVectorU);\n      var v = halfAxes.getColumn(1, scratchVectorV);\n      var w = halfAxes.getColumn(2, scratchVectorW);\n      var corner = scratchCorner.copy(u).add(v).add(w).add(center);\n      var toCenter = scratchToCenter.copy(corner).subtract(position);\n      var mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).add(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).subtract(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).subtract(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).add(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).add(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).subtract(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).subtract(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      result[0] = minDist;\n      result[1] = maxDist;\n      return result;\n    }\n  }, {\n    key: \"getTransform\",\n    value: function getTransform() {}\n  }]);\n  return OrientedBoundingBox;\n}();\n\nexports[\"default\"] = OrientedBoundingBox;\n//# sourceMappingURL=oriented-bounding-box.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_core","_boundingSphere","_constants","scratchVector","Vector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","OrientedBoundingBox","center","arguments","length","undefined","halfAxes","from","Matrix3","key","clone","equals","right","getBoundingSphere","result","u","getColumn","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","distanceToPlane","dot","distance","INTERSECTION","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","normalize","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","getTransform"]
}
