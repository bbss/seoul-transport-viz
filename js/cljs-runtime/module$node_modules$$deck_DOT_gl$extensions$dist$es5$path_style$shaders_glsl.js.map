{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$extensions$dist$es5$path_style$shaders_glsl.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,6EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAYAH,QAAAI,YAAA,CARkBA,CAChBC,OAAQ,CACN,WAAY,kEADN,CAEN,eAAgB,yCAFV,CAGN,WAAY,sLAHN;AAIN,iBAAkB,2lBAJZ,CADQD,CAiBlBJ;OAAAM,cAAA,CARoBA,CAClBD,OAAQ,CACN,WAAY,sCADN,CAEN,wBAAyB,2FAFnB,CAGN,gCAA8B,4NAHxB,CAIN,iBAAkB,qJAJZ,CADUC,CAhBqH;",
"sources":["node_modules/@deck_DOT_gl/extensions/dist/es5/path-style/shaders.glsl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$extensions$dist$es5$path_style$shaders_glsl\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.offsetShaders = exports.dashShaders = void 0;\nvar dashShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute vec2 instanceDashArrays;\\nvarying vec2 vDashArray;\\n\",\n    'vs:#main-end': \"\\nvDashArray = instanceDashArrays;\\n\",\n    'fs:#decl': \"\\nuniform float dashAlignMode;\\nvarying vec2 vDashArray;\\nfloat mod2(float a, float b) {\\n  return a - floor(a / b) * b;\\n}\\n\\nfloat round(float x) {\\n  return floor(x + 0.5);\\n}\\n\",\n    'fs:#main-start': \"\\n  float solidLength = vDashArray.x;\\n  float gapLength = vDashArray.y;\\n  float unitLength = solidLength + gapLength;\\n\\n  if (unitLength > 0.0) {\\n    unitLength = mix(\\n      unitLength,\\n      vPathLength / round(vPathLength / unitLength),\\n      dashAlignMode\\n    );\\n\\n    float offset = dashAlignMode * solidLength / 2.0;\\n\\n    if (\\n      gapLength > 0.0 &&\\n      vPathPosition.y >= 0.0 &&\\n      vPathPosition.y <= vPathLength &&\\n      mod2(vPathPosition.y + offset, unitLength) > solidLength\\n    ) {\\n      discard;\\n    }\\n  }  \\n\"\n  }\n};\nexports.dashShaders = dashShaders;\nvar offsetShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute float instanceOffsets;\\n\",\n    'vs:DECKGL_FILTER_SIZE': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  size *= offsetWidth;\\n\",\n    'vCornerOffset = offsetVec;': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  vec2 offsetCenter = -instanceOffsets * (isCap ? perp : miterVec * miterSize) * 2.0;\\n  vCornerOffset = vCornerOffset * offsetWidth - offsetCenter;\\n\",\n    'fs:#main-start': \"\\n  float isInside;\\n  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);\\n  if (isInside == 0.0) {\\n    discard;\\n  }\\n\"\n  }\n};\nexports.offsetShaders = offsetShaders;\n//# sourceMappingURL=shaders.glsl.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","dashShaders","inject","offsetShaders"]
}
