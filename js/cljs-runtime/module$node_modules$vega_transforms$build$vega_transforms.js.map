{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":114,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array', 'vega-time'], factory) :\n  (global = global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.vega, global.d3, global.vega));\n}(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return function(x) {\n      var n = f.length,\n          i = 1,\n          k = String(f[0](x));\n\n      for (; i<n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n\n  function groupkey(fields) {\n    return !fields || !fields.length ? function() { return ''; }\n      : fields.length === 1 ? fields[0]\n      : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || (op + (!field ? '' : '_' + field));\n  }\n\n  const noop = () => {};\n\n  const base_op = {\n    init: noop,\n    add:  noop,\n    rem:  noop,\n    idx:  0\n  };\n\n  const AggregateOps = {\n    values: {\n      init:  m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx:  -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init:  m => m.sum = 0,\n      value: m => m.sum,\n      add:  (m, v) => m.sum += +v,\n      rem:  (m, v) => m.sum -= v\n    },\n    product: {\n      init:  m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add:  (m, v) => m.product *= v,\n      rem:  (m, v) => m.product /= v\n    },\n    mean: {\n      init:  m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add:  (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem:  (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req:  ['mean'], idx: 1\n    },\n    variance: {\n      init:  m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add:  (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem:  (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req:  ['mean'], idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req:  ['values'], idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req:  ['values'], idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req:  ['values'], idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req:  ['values'], idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'], idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req:  ['values'], idx: 3\n    },\n    min: {\n      init:  m => m.min = undefined,\n      value: m => m.min = (Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min),\n      add:  (m, v) => { if (v < m.min || m.min === undefined) m.min = v; },\n      rem:  (m, v) => { if (v <= m.min) m.min = NaN; },\n      req:  ['values'], idx: 4\n    },\n    max: {\n      init:  m => m.max = undefined,\n      value: m => m.max = (Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max),\n      add:  (m, v) => { if (v > m.max || m.max === undefined) m.max = v; },\n      rem:  (m, v) => { if (v >= m.max) m.max = NaN; },\n      req:  ['values'], idx: 4\n    },\n    argmin: {\n      init:  m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add:  (m, v, t) => { if (v < m.min) m.argmin = t; },\n      rem:  (m, v) => { if (v <= m.min) m.argmin = undefined; },\n      req:  ['min', 'values'], idx: 3\n    },\n    argmax: {\n      init:  m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add:  (m, v, t) => { if (v > m.max) m.argmax = t; },\n      rem:  (m, v) => { if (v >= m.max) m.argmax = undefined; },\n      req:  ['max', 'values'], idx: 3\n    }\n  };\n\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n    agg.forEach(getreqs);\n\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add(v, t) {\n    if (v == null || v === '') { ++this.missing; return; }\n    if (v !== v) return;\n    ++this.valid;\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') { --this.missing; return; }\n    if (v !== v) return;\n    --this.valid;\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    var get = field || vegaUtil.identity,\n        ops = resolve(agg),\n        out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n\n  var prototype = TupleStore.prototype;\n\n  prototype.reset = function() {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype.add = function(v) {\n    this._add.push(v);\n  };\n\n  prototype.rem = function(v) {\n    this._rem.push(v);\n  };\n\n  prototype.values = function() {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n\n    var a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {}, i, j, v;\n\n    // use unique key field to clear removed values\n    for (i=0; i<m; ++i) {\n      map[k(r[i])] = 1;\n    }\n    for (i=0, j=0; i<n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return (this._add = x);\n  };\n\n  // memoizing statistics methods\n\n  prototype.distinct = function(get) {\n    var v = this.values(),\n        n = v.length,\n        map = {},\n        count = 0, s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype.extent = function(get) {\n    if (this._get !== get || !this._ext) {\n      var v = this.values(),\n          i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n    return this._ext;\n  };\n\n  prototype.argmin = function(get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype.argmax = function(get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype.min = function(get) {\n    var m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.max = function(get) {\n    var m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.quartile = function(get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n    return this._q;\n  };\n\n  prototype.q1 = function(get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype.q2 = function(get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype.q3 = function(get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype.ci = function(get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n    return this._ci;\n  };\n\n  prototype.ci0 = function(get) {\n    return this.ci(get)[0];\n  };\n\n  prototype.ci1 = function(get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n\n    this._adds = []; // array of added output tuples\n    this._mods = []; // array of modified output tuples\n    this._alen = 0;  // number of active added tuples\n    this._mlen = 0;  // number of active modified tuples\n    this._drop = true;   // should empty aggregation cells be removed\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = [];   // group-by dimension accessors\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n    this._countOnly = false; // flag indicating only count aggregation\n    this._counts = null; // collection of count fields\n    this._prev = null;   // previous aggregation cells\n\n    this._inputs = null;  // array of dependent input tuple field names\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'drop', 'type': 'boolean', 'default': true },\n      { 'name': 'cross', 'type': 'boolean', 'default': false },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  var prototype$1 = vegaUtil.inherits(Aggregate, vegaDataflow.Transform);\n\n  prototype$1.transform = function(_, pulse) {\n    var aggr = this,\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(() => this.clean());\n    }\n\n    return aggr.changes(out);\n  };\n\n  prototype$1.cross = function() {\n    var aggr = this,\n        curr = aggr.value,\n        dims = aggr._dnames,\n        vals = dims.map(function() { return {}; }),\n        n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      var key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      var name = dims[index],\n          v = vals[index++],\n          k, key;\n\n      for (k in v) {\n        tuple[name] = v[k];\n        key = base ? base + '|' + k : k;\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  };\n\n  prototype$1.init = function(_) {\n    // initialize input and output fields\n    var inputs = (this._inputs = []),\n        outputs = (this._outputs = []),\n        inputMap = {};\n\n    function inputVisit(get) {\n      var fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n          i = 0, n = fields.length, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = vegaUtil.array(_.groupby);\n    this._dnames = this._dims.map(function(d) {\n      var dname = vegaUtil.accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    var fields = _.fields || [null],\n        ops = _.ops || ['count'],\n        as = _.as || [],\n        n = fields.length,\n        map = {},\n        field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      vegaUtil.error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        vegaUtil.error('Null aggregate field specified.');\n      }\n      mname = vegaUtil.accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(function(m) {\n      return compileMeasures(m, m.field);\n    });\n\n    return {}; // aggregation cells (this.value)\n  };\n\n  // -- Cell Management -----\n\n  prototype$1.cellkey = groupkey();\n\n  prototype$1.cell = function(key, t) {\n    var cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  };\n\n  prototype$1.newcell = function(key, t) {\n    var cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      var measures = this._measures,\n          n = measures.length, i;\n\n      cell.agg = Array(n);\n      for (i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  };\n\n  prototype$1.newtuple = function(t, p) {\n    var names = this._dnames,\n        dims = this._dims,\n        x = {}, i, n;\n\n    for (i=0, n=dims.length; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n  };\n\n  prototype$1.clean = function() {\n    const cells = this.value;\n    for (const key in cells) {\n      if (cells[key].num === 0) {\n        delete cells[key];\n      }\n    }\n  };\n\n  // -- Process Tuples -----\n\n  prototype$1.add = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  };\n\n  prototype$1.rem = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  };\n\n  prototype$1.celltuple = function(cell) {\n    var tuple = cell.tuple,\n        counts = this._counts,\n        agg, i, n;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      agg = cell.agg;\n      for (i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  };\n\n  prototype$1.changes = function(out) {\n    var adds = this._adds,\n        mods = this._mods,\n        prev = this._prev,\n        drop = this._drop,\n        add = out.add,\n        rem = out.rem,\n        mod = out.mod,\n        cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  };\n\n  // epsilon bias to offset floating point error (#1737)\n  const EPSILON = 1e-14;\n\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'interval', 'type': 'boolean', 'default': true },\n      { 'name': 'anchor', 'type': 'number' },\n      { 'name': 'maxbins', 'type': 'number', 'default': 20 },\n      { 'name': 'base', 'type': 'number', 'default': 10 },\n      { 'name': 'divide', 'type': 'number', 'array': true, 'default': [5, 2] },\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n      { 'name': 'span', 'type': 'number' },\n      { 'name': 'step', 'type': 'number' },\n      { 'name': 'steps', 'type': 'number', 'array': true },\n      { 'name': 'minstep', 'type': 'number', 'default': 0 },\n      { 'name': 'nice', 'type': 'boolean', 'default': true },\n      { 'name': 'name', 'type': 'string' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['bin0', 'bin1'] }\n    ]\n  };\n\n  var prototype$2 = vegaUtil.inherits(Bin, vegaDataflow.Transform);\n\n  prototype$2.transform = function(_, pulse) {\n    var band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1],\n        flag;\n\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band\n      ? function(t) {\n          var v = bins(t);\n          // minimum bin value (inclusive)\n          t[b0] = v;\n          // maximum bin value (exclusive)\n          // use convoluted math for better floating point agreement\n          // see https://github.com/vega/vega/issues/830\n          // infinite values propagate through this formula! #2227\n          t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n        }\n      : function(t) { t[b0] = bins(t); }\n    );\n\n    return pulse.modifies(band ? as : b0);\n  };\n\n  prototype$2._bins = function(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var field = _.field,\n        bins  = vegaStatistics.bin(_),\n        step  = bins.step,\n        start = bins.start,\n        stop  = start + Math.ceil((bins.stop - start) / step) * step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    var f = function(t) {\n      var v = vegaUtil.toNumber(field(t));\n      return v == null ? null\n        : v < start ? -Infinity\n        : v > stop ? +Infinity\n        : (\n            v = Math.max(start, Math.min(v, stop - step)),\n            start + step * Math.floor(EPSILON + (v - start) / step)\n          );\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n\n    return this.value = vegaUtil.accessor(\n      f,\n      vegaUtil.accessorFields(field),\n      _.name || 'bin_' + vegaUtil.accessorName(field)\n    );\n  };\n\n  function SortedList(idFunc, source, input) {\n    var $ = idFunc,\n        data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n\n    return {\n      add: function(t) { add.push(t); },\n      remove: function(t) { rem[$(t)] = ++cnt; },\n      size: function() { return data.length; },\n      data: function(compare, resort) {\n        if (cnt) {\n          data = data.filter(function(t) { return !rem[$(t)]; });\n          rem = {};\n          cnt = 0;\n        }\n        if (resort && compare) {\n          data.sort(compare);\n        }\n        if (add.length) {\n          data = compare\n            ? vegaUtil.merge(compare, data, add.sort(compare))\n            : data.concat(add);\n          add = [];\n        }\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {'source': true},\n    'params': [\n      { 'name': 'sort', 'type': 'compare' }\n    ]\n  };\n\n  var prototype$3 = vegaUtil.inherits(Collect, vegaDataflow.Transform);\n\n  prototype$3.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n        sort = _.sort,\n        mod = pulse.changed() || (sort &&\n              (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'case', 'type': 'enum', 'values': ['upper', 'lower', 'mixed'], 'default': 'mixed' },\n      { 'name': 'pattern', 'type': 'string', 'default': '[\\\\w\"]+' },\n      { 'name': 'stopwords', 'type': 'string', 'default': '' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['text', 'count'] }\n    ]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper': text = text.toUpperCase(); break;\n      case 'lower': text = text.toLowerCase(); break;\n    }\n    return text.match(match);\n  }\n\n  var prototype$4 = vegaUtil.inherits(CountPattern, vegaDataflow.Transform);\n\n  prototype$4.transform = function(_, pulse) {\n    function process(update) {\n      return function(tuple) {\n        var tokens = tokenize(get(tuple), _.case, match) || [], t;\n        for (var i=0, n=tokens.length; i<n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n    }\n\n    var init = this._parameterCheck(_, pulse),\n        counts = this._counts,\n        match = this._match,\n        stop = this._stop,\n        get = _.field,\n        as = _.as || ['text', 'count'],\n        add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),\n        rem = process(function(t) { counts[t] -= 1; });\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  };\n\n  prototype$4._parameterCheck = function(_, pulse) {\n    var init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  };\n\n  prototype$4._finish = function(pulse, as) {\n    var counts = this._counts,\n        tuples = this._tuples || (this._tuples = {}),\n        text = as[0],\n        count = as[1],\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = vegaDataflow.ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'filter', 'type': 'expr' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['a', 'b'] }\n    ]\n  };\n\n  var prototype$5 = vegaUtil.inherits(Cross, vegaDataflow.Transform);\n\n  prototype$5.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        data = this.value,\n        as = _.as || ['a', 'b'],\n        a = as[0], b = as[1],\n        reset = !data\n            || pulse.changed(pulse.ADD_REM)\n            || _.modified('as')\n            || _.modified('filter');\n\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  };\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j, left;\n\n    for (; i<n; ++i) {\n      t[a] = left = input[i];\n      for (j=0; j<n; ++j) {\n        t[b] = input[j];\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  var Distributions = {\n    kde:       vegaStatistics.randomKDE,\n    mixture:   vegaStatistics.randomMixture,\n    normal:    vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform:   vegaStatistics.randomUniform\n  };\n\n  var DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n  function parse(def, data) {\n    var func = def[FUNCTION];\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    var d = Distributions[func]();\n\n    for (var name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      }\n\n      // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(function(_) { return parse(_, data); }));\n      }\n\n      // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var distributions = [\n    {\n      'key': {'function': 'normal'},\n      'params': [\n        { 'name': 'mean', 'type': 'number', 'default': 0 },\n        { 'name': 'stdev', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'lognormal'},\n      'params': [\n        { 'name': 'mean', 'type': 'number', 'default': 0 },\n        { 'name': 'stdev', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'uniform'},\n      'params': [\n        { 'name': 'min', 'type': 'number', 'default': 0 },\n        { 'name': 'max', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'kde'},\n      'params': [\n        { 'name': 'field', 'type': 'field', 'required': true },\n        { 'name': 'from', 'type': 'data' },\n        { 'name': 'bandwidth', 'type': 'number', 'default': 0 }\n      ]\n    }\n  ];\n\n  var mixture = {\n    'key': {'function': 'mixture'},\n    'params': [\n      { 'name': 'distributions', 'type': 'param', 'array': true,\n        'params': distributions },\n      { 'name': 'weights', 'type': 'number', 'array': true }\n    ]\n  };\n\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'steps', 'type': 'number' },\n      { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n      { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n      { 'name': 'method', 'type': 'string', 'default': 'pdf',\n        'values': ['pdf', 'cdf'] },\n      { 'name': 'distribution', 'type': 'param',\n        'params': distributions.concat(mixture) },\n      { 'name': 'as', 'type': 'string', 'array': true,\n        'default': ['value', 'density'] }\n    ]\n  };\n\n  var prototype$6 = vegaUtil.inherits(Density, vegaDataflow.Transform);\n\n  prototype$6.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      var dist = parse(_.distribution, source(pulse)),\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200,\n          method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        vegaUtil.error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        vegaUtil.error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      var as = _.as || ['value', 'density'],\n          domain = _.extent || vegaUtil.extent(dist.data()),\n          values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n            var tuple = {};\n            tuple[as[0]] = v[0];\n            tuple[as[1]] = v[1];\n            return vegaDataflow.ingest(tuple);\n          });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  function source(pulse) {\n    return function() { return pulse.materialize(pulse.SOURCE).source; };\n  }\n\n  // use either provided alias or accessor field name\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map(function(f, i) {\n      return as[i] || vegaUtil.accessorName(f);\n    });\n  }\n\n  function partition(data, groupby, field) {\n    var groups = [],\n        get = function(f) { return f(t); },\n        map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'step', 'type': 'number' },\n      { 'name': 'smooth', 'type': 'boolean', 'default': false },\n      { 'name': 'as', 'type': 'string', 'default': Output }\n    ]\n  };\n\n  const prototype$7 = vegaUtil.inherits(DotBin, vegaDataflow.Transform);\n\n  prototype$7.transform = function(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, vegaUtil.identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  };\n\n  function autostep(data, field) {\n    return vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n  }\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n    this.modified(true);\n  }\n\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$1(_) {\n    var expr = _.expr;\n    return this.value && !_.modified('expr')\n      ? this.value\n      : vegaUtil.accessor(\n          datum => expr(datum, _),\n          vegaUtil.accessorFields(expr),\n          vegaUtil.accessorName(expr)\n        );\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true }\n    ]\n  };\n\n  var prototype$8 = vegaUtil.inherits(Extent, vegaDataflow.Transform);\n\n  prototype$8.transform = function(_, pulse) {\n    var extent = this.value,\n        field = _.field,\n        min = extent[0],\n        max = extent[1],\n        mod;\n\n    mod = pulse.changed()\n       || pulse.modified(field.fields)\n       || _.modified('field');\n\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function(t) {\n      var v = vegaUtil.toNumber(field(t));\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = vegaUtil.accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  };\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n\n  var prototype$9 = vegaUtil.inherits(Subflow, vegaDataflow.Operator);\n\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  prototype$9.connect = function(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return (target.source = this);\n  };\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  prototype$9.add = function(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  };\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  prototype$9.rem = function(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  };\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  prototype$9.mod = function(t) {\n    this.value.mod.push(t);\n  };\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  prototype$9.init = function(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  };\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  prototype$9.evaluate = function() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  };\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n    const a = this._targets = [];\n    a.active = 0;\n    a.forEach = f => {\n      for (let i=0, n=a.active; i<n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n\n  const prototype$a = vegaUtil.inherits(Facet, vegaDataflow.Transform);\n\n  prototype$a.activate = function(flow) {\n    this._targets[this._targets.active++] = flow;\n  };\n\n  // parent argument provided by PreFacet subclass\n  prototype$a.subflow = function(key, flow, pulse, parent) {\n    let flows = this.value,\n        sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  };\n\n  prototype$a.clean = function() {\n    const flows = this.value;\n    for (const key in flows) {\n      if (flows[key].count === 0) {\n        const detach = flows[key].detachSubflow;\n        if (detach) detach();\n        delete flows[key];\n      }\n    }\n  };\n\n  prototype$a.initTargets = function() {\n    const a = this._targets,\n          n = a.length;\n    for (let i=0; i<n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n    a.active = 0;\n  };\n\n  prototype$a.transform = function(_, pulse) {\n    const df = pulse.dataflow,\n          key = _.key,\n          flow = _.subflow,\n          cache = this._keys,\n          rekey = _.modified('key'),\n          subflow = key => this.subflow(key, flow, pulse);\n\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, t => {\n      const id = vegaDataflow.tupleid(t),\n             k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const k = key(t);\n      cache.set(vegaDataflow.tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, t => {\n        const id = vegaDataflow.tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, t => {\n        subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, t => {\n        const id = vegaDataflow.tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (pulse.clean()) {\n      df.runAfter(() => { this.clean(); cache.clean(); });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n\n    return pulse;\n  };\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return (this.value && !_.modified()) ? this.value\n      : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(function(f) { return vegaUtil.field(f); })\n      : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {'changes': true},\n    'params': [\n      { 'name': 'expr', 'type': 'expr', 'required': true }\n    ]\n  };\n\n  var prototype$b = vegaUtil.inherits(Filter, vegaDataflow.Transform);\n\n  prototype$b.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        cache = this.value, // cache ids of filtered tuples\n        output = pulse.fork(),\n        add = output.add,\n        rem = output.rem,\n        mod = output.mod,\n        test = _.expr,\n        isMod = true;\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = vegaDataflow.tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      if (test(t, _)) add.push(t);\n      else cache.set(vegaDataflow.tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      var id = vegaDataflow.tupleid(t),\n          b = test(t, _),\n          s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  };\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'index', 'type': 'string' },\n      { 'name': 'as', 'type': 'string', 'array': true }\n    ]\n  };\n\n  var prototype$c = vegaUtil.inherits(Flatten, vegaDataflow.Transform);\n\n  prototype$c.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        as = fieldNames(fields, _.as || []),\n        index = _.index || null,\n        m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      var arrays = fields.map(f => f(t)),\n          maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0),\n          i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = vegaDataflow.derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  };\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['key', 'value'] }\n    ]\n  };\n\n  var prototype$d = vegaUtil.inherits(Fold, vegaDataflow.Transform);\n\n  prototype$d.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        fnames = fields.map(vegaUtil.accessorName),\n        as = _.as || ['key', 'value'],\n        k = as[0],\n        v = as[1],\n        n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      for (var i=0, d; i<n; ++i) {\n        d = vegaDataflow.derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  };\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'expr', 'type': 'expr', 'required': true },\n      { 'name': 'as', 'type': 'string', 'required': true },\n      { 'name': 'initonly', 'type': 'boolean' }\n    ]\n  };\n\n  var prototype$e = vegaUtil.inherits(Formula, vegaDataflow.Transform);\n\n  prototype$e.transform = function(_, pulse) {\n    var func = _.expr,\n        as = _.as,\n        mod = _.modified(),\n        flag = _.initonly ? pulse.ADD\n          : mod ? pulse.SOURCE\n          : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n          : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  };\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  var prototype$f = vegaUtil.inherits(Generate, vegaDataflow.Transform);\n\n  prototype$f.transform = function(_, pulse) {\n    var data = this.value,\n        out = pulse.fork(pulse.ALL),\n        num = _.size - data.length,\n        gen = _.generator,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = vegaDataflow.ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  };\n\n  var Methods = {\n    value: 'value',\n    median: d3Array.median,\n    mean: d3Array.mean,\n    min: d3Array.min,\n    max: d3Array.max\n  };\n\n  var Empty = [];\n\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {'changes': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'key', 'type': 'field', 'required': true },\n      { 'name': 'keyvals', 'array': true },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'method', 'type': 'enum', 'default': 'value',\n        'values': ['value', 'mean', 'median', 'max', 'min'] },\n      { 'name': 'value', 'default': 0 }\n    ]\n  };\n\n  var prototype$g = vegaUtil.inherits(Impute, vegaDataflow.Transform);\n\n  function getValue(_) {\n    var m = _.method || Methods.value, v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return function() { return v; };\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    var f = _.field;\n    return function(t) { return t ? f(t) : NaN; };\n  }\n\n  prototype$g.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = vegaUtil.accessorName(_.field),\n        kName = vegaUtil.accessorName(_.key),\n        gNames = (_.groupby || []).map(vegaUtil.accessorName),\n        groups = partition$1(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(vegaDataflow.ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  };\n\n  function partition$1(data, groupby, key, keyvals) {\n    var get = function(f) { return f(t); },\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {}, gVals, gKey,\n        group, i, j, k, n, t;\n\n    domain.forEach(function(k, i) { kMap[k] = i + 1; });\n\n    for (i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n      if (!(group = gMap[gKey])) {\n        group = (gMap[gKey] = []);\n        groups.push(group);\n        group.values = gVals;\n      }\n      group[j-1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  var prototype$h = vegaUtil.inherits(JoinAggregate, Aggregate);\n\n  prototype$h.transform = function(_, pulse) {\n    var aggr = this,\n        mod = _.modified(),\n        cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, function(t) { aggr.rem(t); });\n      pulse.visit(pulse.ADD, function(t) { aggr.add(t); });\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  };\n\n  prototype$h.changes = function() {\n    var adds = this._adds,\n        mods = this._mods,\n        i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  };\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'cumulative', 'type': 'boolean', 'default': false },\n      { 'name': 'counts', 'type': 'boolean', 'default': false },\n      { 'name': 'bandwidth', 'type': 'number', 'default': 0 },\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n      { 'name': 'steps', 'type': 'number' },\n      { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n      { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'default': ['value', 'density'] }\n    ]\n  };\n\n  var prototype$i = vegaUtil.inherits(KDE, vegaDataflow.Transform);\n\n  prototype$i.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        vegaUtil.error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = vegaUtil.extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || vegaUtil.extent(g);\n\n        vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n          const t = {};\n          for (let i=0; i<names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = v[0];\n          t[as[1]] = v[1] * scale;\n          values.push(vegaDataflow.ingest(t));\n        });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return (this.value && !_.modified()) ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n\n  var prototype$j = vegaUtil.inherits(Load, vegaDataflow.Transform);\n\n  prototype$j.transform = function(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = vegaUtil.array(res.data);\n        return df => df.touch(this);\n      });\n      return {async: p};\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format)\n        .then(res => output(this, pulse, vegaUtil.array(res.data)));\n    }\n  };\n\n  function stop(_) {\n    return _.modified('async') && !(\n      _.modified('values') || _.modified('url') || _.modified('format')\n    );\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'index', 'type': 'index', 'params': [\n          {'name': 'from', 'type': 'data', 'required': true },\n          {'name': 'key', 'type': 'field', 'required': true }\n        ] },\n      { 'name': 'values', 'type': 'field', 'array': true },\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'as', 'type': 'string', 'array': true },\n      { 'name': 'default', 'default': null }\n    ]\n  };\n\n  var prototype$k = vegaUtil.inherits(Lookup, vegaDataflow.Transform);\n\n  prototype$k.transform = function(_, pulse) {\n    var out = pulse,\n        as = _.as,\n        keys = _.fields,\n        index = _.index,\n        values = _.values,\n        defaultValue = _.default==null ? null : _.default,\n        reset = _.modified(),\n        flag = reset ? pulse.SOURCE : pulse.ADD,\n        n = keys.length,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        vegaUtil.error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(vegaUtil.accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        vegaUtil.error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(function(k) { return pulse.modified(k.fields); });\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n  }\n\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$4(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var min = +Infinity,\n        max = -Infinity,\n        ext = _.extents,\n        i, n, e;\n\n    for (i=0, n=ext.length; i<n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : _.values.reduce(function(data, _) { return data.concat(_); }, []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Params, vegaDataflow.Transform);\n\n  Params.prototype.transform = function(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  };\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'value', 'type': 'field', 'required': true },\n      { 'name': 'op', 'type': 'enum', 'values': ValidAggregateOps, 'default': 'sum' },\n      { 'name': 'limit', 'type': 'number', 'default': 0 },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  var prototype$l = vegaUtil.inherits(Pivot, Aggregate);\n\n  prototype$l._transform = prototype$l.transform;\n\n  prototype$l.transform = function(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  };\n\n  // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n  function aggregateParams(_, pulse) {\n    var key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n    // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n    return {\n      key:      _.key,\n      groupby:  _.groupby,\n      ops:      keys.map(function() { return op; }),\n      fields:   keys.map(function(k) { return get(k, key, value, fields); }),\n      as:       keys.map(function(k) { return k + ''; }),\n      modified: _.modified.bind(_)\n    };\n  }\n\n  // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(\n      function(d) { return key(d) === k ? value(d) : NaN; },\n      fields,\n      k + ''\n    );\n  }\n\n  // Collect (and optionally limit) all unique pivot values.\n  function pivotKeys(key, limit, pulse) {\n    var map = {},\n        list = [];\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      var k = key(t);\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n\n    // TODO? Move this comparator to vega-util?\n    list.sort(function(u, v) {\n      return (u<v||u==null) && v!=null ? -1\n        : (u>v||v==null) && u!=null ? 1\n        : ((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))!==u && v===v ? -1\n        : v!==v && u===u ? 1 : 0;\n    });\n\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n\n  const prototype$m = vegaUtil.inherits(PreFacet, Facet);\n\n  prototype$m.transform = function(_, pulse) {\n    const flow = _.subflow,\n          field = _.field,\n          subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n\n    if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n      vegaUtil.error('PreFacet does not support field modification.');\n    }\n\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.mod(_));\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n      });\n\n      pulse.visit(pulse.REM, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.rem(_));\n      });\n    } else {\n      pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n      pulse.visit(pulse.ADD, t => subflow(t).add(t));\n      pulse.visit(pulse.REM, t => subflow(t).rem(t));\n    }\n\n    if (pulse.clean()) {\n      pulse.runAfter(() => this.clean());\n    }\n\n    return pulse;\n  };\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true }\n    ]\n  };\n\n  var prototype$n = vegaUtil.inherits(Project, vegaDataflow.Transform);\n\n  prototype$n.transform = function(_, pulse) {\n    var fields = _.fields,\n        as = fieldNames(_.fields, _.as || []),\n        derive = fields\n          ? function(s, t) { return project(s, t, fields, as); }\n          : vegaDataflow.rederive,\n        out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    out = pulse.fork(pulse.NO_SOURCE);\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = vegaDataflow.tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var dt = derive(t, vegaDataflow.ingest({}));\n      lut[vegaDataflow.tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, function(t) {\n      out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n    });\n\n    return out;\n  };\n\n  function project(s, t, fields, as) {\n    for (var i=0, n=fields.length; i<n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$o = vegaUtil.inherits(Proxy, vegaDataflow.Transform);\n\n  prototype$o.transform = function(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'probs', 'type': 'number', 'array': true },\n      { 'name': 'step', 'type': 'number', 'default': 0.01 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'default': ['prob', 'value'] }\n    ]\n  };\n\n  var prototype$p = vegaUtil.inherits(Quantile, vegaDataflow.Transform);\n\n  var EPSILON$1 = 1e-14;\n\n  prototype$p.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(vegaUtil.accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || d3Array.range(step/2, 1 - EPSILON$1, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = vegaStatistics.quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(vegaDataflow.ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  };\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$q = vegaUtil.inherits(Relay, vegaDataflow.Transform);\n\n  prototype$q.transform = function(_, pulse) {\n    var out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        var id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        var dt = vegaDataflow.derive(t);\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        var dt = lut[vegaDataflow.tupleid(t)], k;\n        for (k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  };\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [\n      { 'name': 'size', 'type': 'number', 'default': 1000 }\n    ]\n  };\n\n  var prototype$r = vegaUtil.inherits(Sample, vegaDataflow.Transform);\n\n  prototype$r.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        mod = _.modified('size'),\n        num = _.size,\n        res = this.value,\n        cnt = this.count,\n        cap = 0,\n        map = res.reduce(function(m, t) {\n          m[vegaDataflow.tupleid(t)] = 1;\n          return m;\n        }, {});\n\n    // sample reservoir update function\n    function update(t) {\n      var p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * vegaStatistics.random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, function(t) {\n        var id = vegaDataflow.tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(function(t) { return map[vegaDataflow.tupleid(t)] !== -1; });\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, function(t) {\n        // update, but skip previously sampled tuples\n        if (!map[vegaDataflow.tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      for (var i=0, n=res.length-num; i<n; ++i) {\n        map[vegaDataflow.tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, function(t) {\n        if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(function(t) { return !map[vegaDataflow.tupleid(t)]; });\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  };\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'start', 'type': 'number', 'required': true },\n      { 'name': 'stop', 'type': 'number', 'required': true },\n      { 'name': 'step', 'type': 'number', 'default': 1 },\n      { 'name': 'as', 'type': 'string', 'default': 'data' }\n    ]\n  };\n\n  var prototype$s = vegaUtil.inherits(Sequence, vegaDataflow.Transform);\n\n  prototype$s.transform = function(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    var out = pulse.materialize().fork(pulse.MOD),\n        as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = d3Array.range(_.start, _.stop, _.step || 1).map(function(v) {\n      var t = {};\n      t[as] = v;\n      return vegaDataflow.ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  };\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$t = vegaUtil.inherits(Sieve, vegaDataflow.Transform);\n\n  prototype$t.transform = function(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  const OUTPUT = ['unit0', 'unit1'];\n\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'interval', 'type': 'boolean', 'default': true },\n      { 'name': 'units', 'type': 'enum', 'values': vegaTime.TIME_UNITS, 'array': true },\n      { 'name': 'step', 'type': 'number', 'default': 1 },\n      { 'name': 'maxbins', 'type': 'number', 'default': 40 },\n      { 'name': 'extent', 'type': 'date', 'array': true},\n      { 'name': 'timezone', 'type': 'enum', 'default': 'local', 'values': ['local', 'utc'] },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': OUTPUT }\n    ]\n  };\n\n  var prototype$u = vegaUtil.inherits(TimeUnit, vegaDataflow.Transform);\n\n  prototype$u.transform = function(_, pulse) {\n    var field = _.field,\n        band = _.interval !== false,\n        utc = _.timezone === 'utc',\n        floor = this._floor(_, pulse),\n        offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n        as = _.as || OUTPUT,\n        u0 = as[0],\n        u1 = as[1],\n        min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        step = floor.step,\n        flag = pulse.ADD;\n\n    if (_.modified() || pulse.modified(vegaUtil.accessorFields(field))) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, function(t) {\n      var v = field(t), a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n\n    floor.start = min;\n    floor.stop = max;\n\n    return pulse.modifies(band ? as : u0);\n  };\n\n  prototype$u._floor = function(_, pulse) {\n    const utc = _.timezone === 'utc';\n\n    // get parameters\n    let {units, step} = _.units\n      ? {units: _.units, step: _.step || 1}\n      : vegaTime.timeBin({\n        extent:  _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n    // check / standardize time units\n    units = vegaTime.timeUnits(units);\n\n    const prev = this.value || {},\n          floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(units, step);\n\n    floor.unit = vegaUtil.peek(units);\n    floor.units = units;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  };\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  var prototype$v = vegaUtil.inherits(TupleIndex, vegaDataflow.Transform);\n\n  prototype$v.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        mod = true;\n\n    function set(t) { index.set(field(t), t); }\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, function(t) { index.delete(field(t)); });\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  };\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$w = vegaUtil.inherits(Values, vegaDataflow.Transform);\n\n  prototype$w.transform = function(_, pulse) {\n    var run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  };\n\n  function WindowOp(op, field, param, as) {\n    let fn = WindowOps[op](field, param);\n    return {\n      init:   fn.init || vegaUtil.zero,\n      update: function(w, t) { t[as] = fn.next(w); }\n    };\n  }\n\n  const WindowOps = {\n    row_number: function() {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function() {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          let i = w.index,\n              data = w.data;\n          return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n        }\n      };\n    },\n    dense_rank: function() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          let i = w.index,\n              d = w.data;\n          return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function() {\n      let rank = WindowOps.rank(),\n          next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function() {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          let i = w.index,\n              d = w.data,\n              c = w.compare;\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n            cume = i;\n          }\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function(field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      let cume = WindowOps.cume_dist(),\n          next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n\n    lag: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index + offset,\n              d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n\n    first_value: function(field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function(field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function(field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          let i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n\n    prev_value: function(field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          let v = field(w.data[w.index]);\n          return v != null ? (prev = v) : prev;\n        }\n      };\n    },\n    next_value: function(field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          let d = w.data;\n          return w.index <= i ? v\n            : (i = find(field, d, w.index)) < 0\n              ? (i = d.length, v = null)\n              : (v = field(d[i]));\n        }\n      };\n    }\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      let v = field(data[index]);\n      if (v != null) return index;\n    }\n    return -1;\n  }\n\n  var ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    let self = this,\n        ops = vegaUtil.array(_.ops),\n        fields = vegaUtil.array(_.fields),\n        params = vegaUtil.array(_.params),\n        as = vegaUtil.array(_.as),\n        outputs = self.outputs = [],\n        windows = self.windows = [],\n        inputs = {},\n        map = {},\n        countOnly = true,\n        counts = [],\n        measures = [];\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n    visitInputs(_.sort);\n\n    ops.forEach(function(op, i) {\n      let field = fields[i],\n          mname = vegaUtil.accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n      visitInputs(field);\n      outputs.push(name);\n\n      // Window operation\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      }\n\n      // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        let m = map[mname];\n        if (!m) {\n          m = (map[mname] = []);\n          m.field = field;\n          measures.push(m);\n        }\n        m.push(createMeasure(op, name));\n      }\n    });\n\n    if (counts.length || measures.length) {\n      self.cell = cell(measures, counts, countOnly);\n    }\n\n    self.inputs = Object.keys(inputs);\n  }\n\n  const prototype$x = WindowState.prototype;\n\n  prototype$x.init = function() {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype$x.update = function(w, t) {\n    let self = this,\n        cell = self.cell,\n        wind = self.windows,\n        data = w.data,\n        m = wind && wind.length,\n        j;\n\n    if (cell) {\n      for (j=w.p0; j<w.i0; ++j) cell.rem(data[j]);\n      for (j=w.p1; j<w.i1; ++j) cell.add(data[j]);\n      cell.set(t);\n    }\n    for (j=0; j<m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n\n    let cell = {\n      num:   0,\n      agg:   null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n      for (; i<n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function(t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n      for (let i=0; i<n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function(t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n      for (let i=0; i<n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function(t) {\n      let i, n;\n\n      // consolidate stored values\n      if (store) store.values();\n\n      // update tuple properties\n      for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n      if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n    };\n\n    cell.init = function() {\n      cell.num = 0;\n      if (store) store.reset();\n      for (let i=0; i<n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidWindowOps.concat(ValidAggregateOps) },\n      { 'name': 'params', 'type': 'number', 'null': true, 'array': true },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'frame', 'type': 'number', 'null': true, 'array': true, 'length': 2, 'default': [null, 0] },\n      { 'name': 'ignorePeers', 'type': 'boolean', 'default': false }\n    ]\n  };\n\n  var prototype$y = vegaUtil.inherits(Window, vegaDataflow.Transform);\n\n  prototype$y.transform = function(_, pulse) {\n    var self = this,\n        state = self.state,\n        mod = _.modified(),\n        cmp = vegaDataflow.stableCompare(_.sort),\n        i, n;\n\n    this.stamp = pulse.stamp;\n\n    // initialize window state\n    if (!state || mod) {\n      state = self.state = new WindowState(_);\n    }\n\n    // retrieve group for a tuple\n    var key = groupkey(_.groupby);\n    function group(t) { return self.group(key(t)); }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      self.value = {};\n      pulse.visit(pulse.SOURCE, function(t) { group(t).add(t); });\n    } else {\n      pulse.visit(pulse.REM, function(t) { group(t).remove(t); });\n      pulse.visit(pulse.ADD, function(t) { group(t).add(t); });\n    }\n\n    // perform window calculations for each modified partition\n    for (i=0, n=self._mlen; i<n; ++i) {\n      processPartition(self._mods[i], state, cmp, _);\n    }\n    self._mlen = 0;\n    self._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  };\n\n  prototype$y.group = function(key) {\n    var self = this,\n        group = self.value[key];\n\n    if (!group) {\n      group = self.value[key] = SortedList(vegaDataflow.tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < self.stamp) {\n      group.stamp = self.stamp;\n      self._mods[self._mlen++] = group;\n    }\n\n    return group;\n  };\n\n  function processPartition(list, state, cmp, _) {\n    var sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        i = 0,\n        b = range ? d3Array.bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || vegaUtil.constant(-1)\n        };\n\n    for (state.init(); i<n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  }\n\n  // if frame type is 'range', adjust window for peer values\n  function adjustRange(w, bisect) {\n    var r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n    if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","vega","transforms","d3","vegaUtil","vegaDataflow","vegaStatistics","d3Array","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition","groupby","groups","g","dims","DotBin","Expression","update$1","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$2","isArray","array","Filter","Flatten","Fold","Formula","Generate","Impute","getValue","m","method","Methods","getField","NaN","partition$1","keyvals","domain","kMap","gMap","group","j","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$3","flat","Load","_pending","stop","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$4","min","Infinity","max","ext","extents","e","MultiValues","update$5","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","u","Date","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","countOnly","counts","measures","mname","num","store","Array","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","range","ignorePeers","frame","bisector","i0","i1","p0","p1","index","constant","Math","abs","r0","r1","c","bisect","left","right","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","sqrt","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype.reset","_add","_rem","_q","_get","_ext","prototype.add","prototype.rem","prototype.values","r","prototype.distinct","s","extent","prototype.extent","extentIndex","prototype.argmin","prototype.argmax","prototype.min","prototype.max","quartile","prototype.quartile","quartiles","prototype.q1","prototype.q2","prototype.q3","ci","prototype.ci","_ci","bootstrapCI","prototype.ci0","prototype.ci1","Definition","prototype$1","inherits","transform","prototype$1.transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","runAfter","changes","prototype$1.cross","collect","cells","tuple","vals","generate","base","curr","prototype$1.init","inputVisit","inputMap","dname","cellkey","outname","prototype$1.cell","newcell","prototype$1.newcell","newtuple","prototype$1.newtuple","p","names","replace","prototype$1.clean","prototype$1.add","prototype$1.rem","celltuple","prototype$1.celltuple","prototype$1.changes","adds","mods","prev","prototype$2","prototype$2.transform","band","interval","bins","_bins","start","step","b0","b1","reflow","flag","ADD_MOD","prototype$2._bins","bin","ceil","anchor","floor","toNumber","EPSILON","prototype$3","prototype$3.transform","ALL","stableCompare","root","prototype$4","prototype$4.transform","process","match","case","text","toUpperCase","toLowerCase","tokens","test","_parameterCheck","_match","_stop","_finish","prototype$4._parameterCheck","RegExp","stopwords","pattern","prototype$4._finish","tuples","_tuples","prototype$5","prototype$5.transform","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","prototype$6","prototype$6.transform","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","prototype$7","prototype$7.transform","smooth","span","dotbin","prototype$8","prototype$8.transform","isFinite","dataflow","warn","prototype$9","connect","prototype$9.connect","target","detachSubflow","targets","prototype$9.add","prototype$9.rem","prototype$9.mod","prototype$9.init","evaluate","prototype$9.evaluate","prototype$a","activate","prototype$a.activate","flow","subflow","prototype$a.subflow","flows","sf","_group","df","prototype$a.clean","detach","initTargets","prototype$a.initTargets","prototype$a.transform","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","prototype$b","prototype$b.transform","revisit","isMod","has","prototype$c","prototype$c.transform","arrays","maxlen","l","derive","prototype$d","prototype$d.transform","fnames","prototype$e","prototype$e.transform","initonly","prototype$f","prototype$f.transform","gen","generator","prototype$g","prototype$g.transform","impute","fName","kName","gNames","kVal","_impute","prototype$h","prototype$h.transform","prototype$h.changes","prototype$i","prototype$i.transform","bandwidth","cumulative","density","scale","local","prototype$j","prototype$j.transform","StopPropagation","format","async","request","url","then","res","touch","prototype$k","prototype$k.transform","defaultValue","default","some","Params.prototype.transform","prototype$l","_transform","prototype$l.transform","prototype$m","prototype$m.transform","prototype$n","prototype$n.transform","rederive","lut","addAll","dt","prototype$o","prototype$o.transform","prototype$p","prototype$p.transform","probs","EPSILON$1","q","quantiles","prototype$q","prototype$q.transform","prototype$r","prototype$r.transform","random","cap","prototype$s","prototype$s.transform","prototype$t","prototype$t.transform","OUTPUT","TIME_UNITS","prototype$u","prototype$u.transform","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","prototype$u._floor","units","timeBin","maxbins","timeUnits","utcFloor","timeFloor","peek","prototype$v","prototype$v.transform","clear","prototype$w","prototype$w.transform","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype$x","prototype$x.init","prototype$x.update","wind","prototype$y","prototype$y.transform","prototype$y.group","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window","defineProperty"]
}
