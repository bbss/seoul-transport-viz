{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$layers$dist$es5$text_layer$font_atlas_manager.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/layers/dist/es5/text-layer/font-atlas-manager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$layers$dist$es5$text_layer$font_atlas_manager\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.DEFAULT_RADIUS = exports.DEFAULT_CUTOFF = exports.DEFAULT_BUFFER = exports.DEFAULT_FONT_SIZE = exports.DEFAULT_FONT_WEIGHT = exports.DEFAULT_FONT_FAMILY = exports.DEFAULT_CHAR_SET = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _tinySdf = _interopRequireDefault(require(\"@mapbox/tiny-sdf\"));\n\nvar _utils = require(\"./utils\");\n\nvar _lruCache = _interopRequireDefault(require(\"./lru-cache\"));\n\nfunction getDefaultCharacterSet() {\n  var charSet = [];\n\n  for (var i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nvar DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexports.DEFAULT_CHAR_SET = DEFAULT_CHAR_SET;\nvar DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexports.DEFAULT_FONT_FAMILY = DEFAULT_FONT_FAMILY;\nvar DEFAULT_FONT_WEIGHT = 'normal';\nexports.DEFAULT_FONT_WEIGHT = DEFAULT_FONT_WEIGHT;\nvar DEFAULT_FONT_SIZE = 64;\nexports.DEFAULT_FONT_SIZE = DEFAULT_FONT_SIZE;\nvar DEFAULT_BUFFER = 2;\nexports.DEFAULT_BUFFER = DEFAULT_BUFFER;\nvar DEFAULT_CUTOFF = 0.25;\nexports.DEFAULT_CUTOFF = DEFAULT_CUTOFF;\nvar DEFAULT_RADIUS = 3;\nexports.DEFAULT_RADIUS = DEFAULT_RADIUS;\nvar GL_TEXTURE_WRAP_S = 0x2802;\nvar GL_TEXTURE_WRAP_T = 0x2803;\nvar GL_CLAMP_TO_EDGE = 0x812f;\nvar MAX_CANVAS_WIDTH = 1024;\nvar BASELINE_SCALE = 0.9;\nvar HEIGHT_SCALE = 1.2;\nvar CACHE_LIMIT = 3;\nvar cache = new _lruCache[\"default\"](CACHE_LIMIT);\nvar VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getNewChars(key, characterSet) {\n  var cachedFontAtlas = cache.get(key);\n\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  var newChars = [];\n  var cachedMapping = cachedFontAtlas.mapping;\n  var cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n  var charSet = characterSet;\n\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(function (_char) {\n    if (!cachedCharSet.has(_char)) {\n      newChars.push(_char);\n    }\n  });\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (var i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nvar FontAtlasManager = function () {\n  function FontAtlasManager(gl) {\n    (0, _classCallCheck2[\"default\"])(this, FontAtlasManager);\n    this.gl = gl;\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n    this._key = null;\n    this._texture = new _core.Texture2D(this.gl);\n  }\n\n  (0, _createClass2[\"default\"])(FontAtlasManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this._texture[\"delete\"]();\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps() {\n      var _this = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      VALID_PROPS.forEach(function (prop) {\n        if (prop in props) {\n          _this.props[prop] = props[prop];\n        }\n      });\n      var oldKey = this._key;\n      this._key = this._getKey();\n      var charSet = getNewChars(this._key, this.props.characterSet);\n      var cachedFontAtlas = cache.get(this._key);\n\n      if (cachedFontAtlas && charSet.length === 0) {\n        if (this._key !== oldKey) {\n          this._updateTexture(cachedFontAtlas);\n        }\n\n        return;\n      }\n\n      var fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n\n      this._updateTexture(fontAtlas);\n\n      cache.set(this._key, fontAtlas);\n    }\n  }, {\n    key: \"_updateTexture\",\n    value: function _updateTexture(_ref) {\n      var _parameters;\n\n      var canvas = _ref.data,\n          width = _ref.width,\n          height = _ref.height;\n\n      if (this._texture.width !== width || this._texture.height !== height) {\n        this._texture.resize({\n          width: width,\n          height: height\n        });\n      }\n\n      this._texture.setImageData({\n        data: canvas,\n        width: width,\n        height: height,\n        parameters: (_parameters = {}, (0, _defineProperty2[\"default\"])(_parameters, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE), (0, _defineProperty2[\"default\"])(_parameters, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE), _parameters)\n      });\n\n      this._texture.generateMipmap();\n    }\n  }, {\n    key: \"_generateFontAtlas\",\n    value: function _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n      var _this$props = this.props,\n          fontFamily = _this$props.fontFamily,\n          fontWeight = _this$props.fontWeight,\n          fontSize = _this$props.fontSize,\n          buffer = _this$props.buffer,\n          sdf = _this$props.sdf,\n          radius = _this$props.radius,\n          cutoff = _this$props.cutoff;\n      var canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = MAX_CANVAS_WIDTH;\n      }\n\n      var ctx = canvas.getContext('2d');\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      var _buildMapping = (0, _utils.buildMapping)(Object.assign({\n        getFontWidth: function getFontWidth(_char2) {\n          return ctx.measureText(_char2).width;\n        },\n        fontHeight: fontSize * HEIGHT_SCALE,\n        buffer: buffer,\n        characterSet: characterSet,\n        maxCanvasWidth: MAX_CANVAS_WIDTH\n      }, cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })),\n          mapping = _buildMapping.mapping,\n          canvasHeight = _buildMapping.canvasHeight,\n          xOffset = _buildMapping.xOffset,\n          yOffset = _buildMapping.yOffset;\n\n      if (canvas.height !== canvasHeight) {\n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvas.height = canvasHeight;\n        ctx.putImageData(imageData, 0, 0);\n      }\n\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      if (sdf) {\n        var tinySDF = new _tinySdf[\"default\"](fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n\n        var _imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = characterSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _char3 = _step.value;\n            populateAlphaChannel(tinySDF.draw(_char3), _imageData);\n            ctx.putImageData(_imageData, mapping[_char3].x - buffer, mapping[_char3].y - buffer);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = characterSet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _char4 = _step2.value;\n            ctx.fillText(_char4, mapping[_char4].x, mapping[_char4].y + fontSize * BASELINE_SCALE);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return {\n        xOffset: xOffset,\n        yOffset: yOffset,\n        mapping: mapping,\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height\n      };\n    }\n  }, {\n    key: \"_getKey\",\n    value: function _getKey() {\n      var _this$props2 = this.props,\n          gl = _this$props2.gl,\n          fontFamily = _this$props2.fontFamily,\n          fontWeight = _this$props2.fontWeight,\n          fontSize = _this$props2.fontSize,\n          buffer = _this$props2.buffer,\n          sdf = _this$props2.sdf,\n          radius = _this$props2.radius,\n          cutoff = _this$props2.cutoff;\n\n      if (sdf) {\n        return \"\".concat(gl, \" \").concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n      }\n\n      return \"\".concat(gl, \" \").concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this._texture;\n    }\n  }, {\n    key: \"mapping\",\n    get: function get() {\n      var data = cache.get(this._key);\n      return data && data.mapping;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return HEIGHT_SCALE;\n    }\n  }]);\n  return FontAtlasManager;\n}();\n\nexports[\"default\"] = FontAtlasManager;\n//# sourceMappingURL=font-atlas-manager.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getNewChars","key","characterSet","cachedFontAtlas","cache","get","newChars","cachedCharSet","Object","keys","mapping","Set","charSet","Array","forEach","_char","has","push","populateAlphaChannel","alphaChannel","imageData","i","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","concat","fillStyle","textBaseline","textAlign","_interopRequireDefault","defineProperty","value","DEFAULT_RADIUS","DEFAULT_CUTOFF","DEFAULT_BUFFER","DEFAULT_FONT_SIZE","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_FAMILY","DEFAULT_CHAR_SET","_defineProperty2","_classCallCheck2","_createClass2","_core","_tinySdf","_utils","_lruCache","getDefaultCharacterSet","String","fromCharCode","CACHE_LIMIT","VALID_PROPS","FontAtlasManager","gl","props","buffer","sdf","cutoff","radius","_key","_texture","Texture2D","finalize","setProps","_this","arguments","undefined","prop","oldKey","_getKey","_updateTexture","fontAtlas","_generateFontAtlas","set","_ref","_parameters","canvas","width","height","resize","setImageData","parameters","GL_TEXTURE_WRAP_S","GL_CLAMP_TO_EDGE","GL_TEXTURE_WRAP_T","generateMipmap","_this$props","document","createElement","MAX_CANVAS_WIDTH","getContext","_buildMapping","buildMapping","assign","getFontWidth","_char2","measureText","fontHeight","HEIGHT_SCALE","maxCanvasWidth","xOffset","yOffset","canvasHeight","getImageData","putImageData","tinySDF","_imageData","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","done","next","_char3","draw","x","y","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_char4","fillText","BASELINE_SCALE","_this$props2"]
}
