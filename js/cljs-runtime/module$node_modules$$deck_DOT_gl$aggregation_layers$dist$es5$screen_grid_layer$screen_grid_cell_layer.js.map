{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_cell_layer.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/screen-grid-layer/screen-grid-cell-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$screen_grid_layer$screen_grid_cell_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _colorUtils = require(\"../utils/color-utils\");\n\nvar _screenGridLayerVertex = _interopRequireDefault(require(\"./screen-grid-layer-vertex.glsl\"));\n\nvar _screenGridLayerFragment = _interopRequireDefault(require(\"./screen-grid-layer-fragment.glsl\"));\n\nvar DEFAULT_MINCOLOR = [0, 0, 0, 0];\nvar DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nvar COLOR_PROPS = [\"minColor\", \"maxColor\", \"colorRange\", \"colorDomain\"];\nvar defaultProps = {\n  cellSizePixels: {\n    value: 100,\n    min: 1\n  },\n  cellMarginPixels: {\n    value: 2,\n    min: 0,\n    max: 5\n  },\n  colorDomain: null,\n  colorRange: _colorUtils.defaultColorRange\n};\n\nvar ScreenGridCellLayer = function (_Layer) {\n  (0, _inherits2[\"default\"])(ScreenGridCellLayer, _Layer);\n\n  function ScreenGridCellLayer() {\n    (0, _classCallCheck2[\"default\"])(this, ScreenGridCellLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ScreenGridCellLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(ScreenGridCellLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        vs: _screenGridLayerVertex[\"default\"],\n        fs: _screenGridLayerFragment[\"default\"],\n        modules: [_core2.picking]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          update: this.calculateInstancePositions\n        },\n        instanceCounts: {\n          size: 4,\n          noAlloc: true\n        }\n      });\n      this.setState({\n        model: this._getModel(gl)\n      });\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ScreenGridCellLayer.prototype), \"updateState\", this).call(this, {\n        oldProps: oldProps,\n        props: props,\n        changeFlags: changeFlags\n      });\n      var attributeManager = this.getAttributeManager();\n\n      if (props.numInstances !== oldProps.numInstances) {\n        attributeManager.invalidateAll();\n      } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n        attributeManager.invalidate('instancePositions');\n      }\n\n      this._updateUniforms(oldProps, props, changeFlags);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n      var _this$props = this.props,\n          parameters = _this$props.parameters,\n          maxTexture = _this$props.maxTexture;\n      var minColor = this.props.minColor || DEFAULT_MINCOLOR;\n      var maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n      var colorDomain = this.props.colorDomain || [1, 0];\n      var model = this.state.model;\n      var layerUniforms = {\n        minColor: minColor,\n        maxColor: maxColor,\n        maxTexture: maxTexture,\n        colorDomain: colorDomain\n      };\n      uniforms = Object.assign(layerUniforms, uniforms);\n      model.draw({\n        uniforms: uniforms,\n        parameters: Object.assign({\n          depthTest: false,\n          depthMask: false\n        }, parameters)\n      });\n    }\n  }, {\n    key: \"calculateInstancePositions\",\n    value: function calculateInstancePositions(attribute, _ref4) {\n      var numInstances = _ref4.numInstances;\n      var _this$context$viewpor = this.context.viewport,\n          width = _this$context$viewpor.width,\n          height = _this$context$viewpor.height;\n      var cellSizePixels = this.props.cellSizePixels;\n      var numCol = Math.ceil(width / cellSizePixels);\n      var value = attribute.value,\n          size = attribute.size;\n\n      for (var i = 0; i < numInstances; i++) {\n        var x = i % numCol;\n        var y = Math.floor(i / numCol);\n        value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n        value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n        value[i * size + 2] = 0;\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new _core.Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new _core.Geometry({\n          drawMode: 6,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_shouldUseMinMax\",\n    value: function _shouldUseMinMax() {\n      var _this$props2 = this.props,\n          minColor = _this$props2.minColor,\n          maxColor = _this$props2.maxColor,\n          colorDomain = _this$props2.colorDomain,\n          colorRange = _this$props2.colorRange;\n\n      if (minColor || maxColor) {\n        _core2.log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n\n        return true;\n      }\n\n      if (colorDomain || colorRange) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_updateUniforms\",\n    value: function _updateUniforms(oldProps, props, changeFlags) {\n      var model = this.state.model;\n\n      if (COLOR_PROPS.some(function (key) {\n        return oldProps[key] !== props[key];\n      })) {\n        model.setUniforms({\n          shouldUseMinMax: this._shouldUseMinMax()\n        });\n      }\n\n      if (oldProps.colorRange !== props.colorRange) {\n        model.setUniforms({\n          colorRange: (0, _colorUtils.colorRangeToFlatArray)(props.colorRange)\n        });\n      }\n\n      if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {\n        var _this$context$viewpor2 = this.context.viewport,\n            width = _this$context$viewpor2.width,\n            height = _this$context$viewpor2.height;\n        var _this$props3 = this.props,\n            cellSizePixels = _this$props3.cellSizePixels,\n            cellMarginPixels = _this$props3.cellMarginPixels;\n        var margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n        var cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);\n        model.setUniforms({\n          cellScale: cellScale\n        });\n      }\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return (0, _core.hasFeatures)(gl, [_core.FEATURES.TEXTURE_FLOAT]);\n    }\n  }]);\n  return ScreenGridCellLayer;\n}(_core2.Layer);\n\nexports[\"default\"] = ScreenGridCellLayer;\nScreenGridCellLayer.layerName = 'ScreenGridCellLayer';\nScreenGridCellLayer.defaultProps = defaultProps;\n//# sourceMappingURL=screen-grid-cell-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_core","_core2","_colorUtils","_screenGridLayerVertex","_screenGridLayerFragment","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","min","cellMarginPixels","max","colorDomain","colorRange","defaultColorRange","ScreenGridCellLayer","_Layer","apply","arguments","key","getShaders","vs","fs","modules","picking","initializeState","gl","context","getAttributeManager","attributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","_ref2","oldProps","props","prototype","call","numInstances","invalidateAll","invalidate","_updateUniforms","draw","_ref3","uniforms","_this$props","parameters","state","assign","layerUniforms","minColor","maxColor","maxTexture","depthTest","depthMask","attribute","_ref4","_this$context$viewpor","viewport","width","height","numCol","Math","ceil","i","y","floor","Model","id","geometry","Geometry","drawMode","attributes","positions","Float32Array","isInstanced","_shouldUseMinMax","_this$props2","log","deprecated","some","setUniforms","shouldUseMinMax","colorRangeToFlatArray","viewportChanged","_this$context$viewpor2","_this$props3","margin","cellScale","isSupported","hasFeatures","FEATURES","TEXTURE_FLOAT","Layer","layerName"]
}
