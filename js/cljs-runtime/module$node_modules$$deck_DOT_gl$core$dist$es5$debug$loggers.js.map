{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$debug$loggers.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/debug/loggers.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$debug$loggers\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLoggers = void 0;\nvar logState = {\n  attributeUpdateMessages: []\n};\nvar LOG_LEVEL_MAJOR_UPDATE = 1;\nvar LOG_LEVEL_MINOR_UPDATE = 2;\nvar LOG_LEVEL_UPDATE_DETAIL = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DRAW = 2;\n\nvar getLoggers = function getLoggers(log) {\n  return {\n    'layer.changeFlag': function layerChangeFlag(layer, key, flags) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n    },\n    'layer.initialize': function layerInitialize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n    },\n    'layer.update': function layerUpdate(layer, needsUpdate) {\n      if (needsUpdate) {\n        var flags = layer.getChangeFlags();\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter(function (key) {\n          return flags[key];\n        }).join(', ')))();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n      }\n    },\n    'layer.matched': function layerMatched(layer, changed) {\n      if (changed) {\n        log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n      }\n    },\n    'layer.finalize': function layerFinalize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n    },\n    'compositeLayer.renderLayers': function compositeLayerRenderLayers(layer, updated, subLayers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n      }\n    },\n    'layerManager.setLayers': function layerManagerSetLayers(layerManager, updated, layers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n      }\n    },\n    'layerManager.activateViewport': function layerManagerActivateViewport(layerManager, viewport) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n    },\n    'attributeManager.invalidate': function attributeManagerInvalidate(attributeManager, trigger, attributeNames) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n    },\n    'attributeManager.updateStart': function attributeManagerUpdateStart(attributeManager) {\n      logState.attributeUpdateMessages.length = 0;\n      logState.attributeManagerUpdateStart = Date.now();\n    },\n    'attributeManager.updateEnd': function attributeManagerUpdateEnd(attributeManager, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n      log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = logState.attributeUpdateMessages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var updateMessage = _step.value;\n          log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n    },\n    'attribute.updateStart': function attributeUpdateStart(attribute) {\n      logState.attributeUpdateStart = Date.now();\n    },\n    'attribute.allocate': function attributeAllocate(attribute, numInstances) {\n      var message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n      logState.attributeUpdateMessages.push(message);\n    },\n    'attribute.updateEnd': function attributeUpdateEnd(attribute, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n      var message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n      logState.attributeUpdateMessages.push(message);\n    },\n    'deckRenderer.renderLayers': function deckRendererRenderLayers(deckRenderer, renderStats, opts) {\n      var pass = opts.pass,\n          redrawReason = opts.redrawReason,\n          stats = opts.stats;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = renderStats[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var status = _step2.value;\n          var totalCount = status.totalCount,\n              visibleCount = status.visibleCount,\n              compositeCount = status.compositeCount,\n              pickableCount = status.pickableCount;\n          var primitiveCount = totalCount - compositeCount;\n          var hiddenCount = primitiveCount - visibleCount;\n          log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n\n          if (stats) {\n            stats.get('Redraw Layers').add(visibleCount);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  };\n};\n\nexports.getLoggers = getLoggers;\n//# sourceMappingURL=loggers.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getLoggers","log","layerChangeFlag","layer","key","flags","LOG_LEVEL_UPDATE_DETAIL","concat","id","layerInitialize","LOG_LEVEL_MAJOR_UPDATE","layerUpdate","needsUpdate","getChangeFlags","LOG_LEVEL_MINOR_UPDATE","keys","filter","join","LOG_LEVEL_INFO","layerMatched","changed","layerFinalize","compositeLayerRenderLayers","updated","subLayers","layerManagerSetLayers","layerManager","layers","length","layerManagerActivateViewport","viewport","attributeManagerInvalidate","attributeManager","trigger","attributeNames","attributeManagerUpdateStart","attributeUpdateMessages","Date","now","attributeManagerUpdateEnd","numInstances","timeMs","Math","round","groupCollapsed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","done","next","err","groupEnd","attributeUpdateStart","attribute","attributeAllocate","message","push","attributeUpdateEnd","deckRendererRenderLayers","deckRenderer","renderStats","opts","pass","redrawReason","stats","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","status","totalCount","visibleCount","compositeCount","pickableCount","hiddenCount","LOG_LEVEL_DRAW","renderCount","get","add"]
}
