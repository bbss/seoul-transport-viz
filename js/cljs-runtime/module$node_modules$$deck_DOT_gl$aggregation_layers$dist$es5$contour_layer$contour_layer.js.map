{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_layer.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/contour-layer/contour-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$contour_layer$contour_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _layers = require(\"@deck.gl/layers\");\n\nvar _contourUtils = require(\"./contour-utils\");\n\nvar _core = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregator = _interopRequireDefault(require(\"../utils/gpu-grid-aggregation/gpu-grid-aggregator\"));\n\nvar _aggregationOperationUtils = require(\"../utils/aggregation-operation-utils\");\n\nvar _gridAggregationUtils = require(\"../utils/grid-aggregation-utils\");\n\nvar _gridAggregationLayer = _interopRequireDefault(require(\"../grid-aggregation-layer\"));\n\nvar DEFAULT_COLOR = [255, 255, 255, 255];\nvar DEFAULT_STROKE_WIDTH = 1;\nvar DEFAULT_THRESHOLD = 1;\nvar defaultProps = {\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  gpuAggregation: true,\n  aggregation: 'SUM',\n  contours: [{\n    threshold: DEFAULT_THRESHOLD\n  }],\n  zOffset: 0.005\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\nvar ContourLayer = function (_GridAggregationLayer) {\n  (0, _inherits2[\"default\"])(ContourLayer, _GridAggregationLayer);\n\n  function ContourLayer() {\n    (0, _classCallCheck2[\"default\"])(this, ContourLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ContourLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(ContourLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ContourLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n      this.setState({\n        contourData: {},\n        projectPoints: false,\n        weights: {\n          count: {\n            size: 1,\n            operation: _aggregationOperationUtils.AGGREGATION_OPERATION.SUM\n          }\n        }\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, (0, _defineProperty2[\"default\"])(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"count\", {\n        size: 3,\n        accessor: 'getWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ContourLayer.prototype), \"updateState\", this).call(this, opts);\n      var contoursChanged = false;\n      var oldProps = opts.oldProps,\n          props = opts.props;\n      var aggregationDirty = this.state.aggregationDirty;\n\n      if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n        contoursChanged = true;\n\n        this._updateThresholdData(opts.props);\n      }\n\n      if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n        this._generateContours();\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state$contourDa = this.state.contourData,\n          contourSegments = _this$state$contourDa.contourSegments,\n          contourPolygons = _this$state$contourDa.contourPolygons;\n      var LinesSubLayerClass = this.getSubLayerClass('lines', _layers.LineLayer);\n      var BandsSubLayerClass = this.getSubLayerClass('bands', _layers.SolidPolygonLayer);\n      var lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({\n        id: 'lines'\n      }), {\n        data: this.state.contourData.contourSegments,\n        getSourcePosition: function getSourcePosition(d) {\n          return d.start;\n        },\n        getTargetPosition: function getTargetPosition(d) {\n          return d.end;\n        },\n        getColor: function getColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        },\n        getWidth: function getWidth(d) {\n          return d.contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        }\n      });\n      var bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({\n        id: 'bands'\n      }), {\n        data: this.state.contourData.contourPolygons,\n        getPolygon: function getPolygon(d) {\n          return d.vertices;\n        },\n        getFillColor: function getFillColor(d) {\n          return d.contour.color || DEFAULT_COLOR;\n        }\n      });\n      return [lineLayer, bandsLayer];\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n          coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var gpuAggregation = props.gpuAggregation;\n\n      if (this.state.gpuAggregation !== props.gpuAggregation) {\n        if (gpuAggregation && !_gpuGridAggregator[\"default\"].isSupported(this.context.gl)) {\n          _core.log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n\n          gpuAggregation = false;\n        }\n      }\n\n      var gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n      this.setState({\n        gpuAggregation: gpuAggregation\n      });\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var data = dimensions.data,\n          weights = dimensions.weights;\n      var boundingBox = this.state.boundingBox;\n\n      if (positionsChanged) {\n        boundingBox = (0, _gridAggregationUtils.getBoundingBox)(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = (0, _gridAggregationUtils.getGridParams)(boundingBox, cellSize, viewport, coordinateSystem),\n            gridOffset = _getGridParams.gridOffset,\n            translation = _getGridParams.translation,\n            width = _getGridParams.width,\n            height = _getGridParams.height,\n            numCol = _getGridParams.numCol,\n            numRow = _getGridParams.numRow;\n\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          boundingBox: boundingBox,\n          translation: translation,\n          posOffset: translation.slice(),\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      var aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation\n      });\n      var aggregationWeightsDirty = this.isAggregationDirty(opts, {\n        dimension: weights\n      });\n\n      if (aggregationWeightsDirty) {\n        this._updateAccessors(opts);\n      }\n\n      if (aggregationDataDirty || aggregationWeightsDirty) {\n        this._resetResults();\n      }\n\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty,\n        aggregationWeightsDirty: aggregationWeightsDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          getWeight = _opts$props.getWeight,\n          aggregation = _opts$props.aggregation;\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.getWeight = getWeight;\n        count.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[aggregation];\n      }\n\n      this.setState({\n        getValue: (0, _aggregationOperationUtils.getValueFunc)(aggregation, getWeight)\n      });\n    }\n  }, {\n    key: \"_resetResults\",\n    value: function _resetResults() {\n      var count = this.state.weights.count;\n\n      if (count) {\n        count.aggregationData = null;\n      }\n    }\n  }, {\n    key: \"_generateContours\",\n    value: function _generateContours() {\n      var _this$state = this.state,\n          numCol = _this$state.numCol,\n          numRow = _this$state.numRow,\n          gridOrigin = _this$state.gridOrigin,\n          gridOffset = _this$state.gridOffset,\n          thresholdData = _this$state.thresholdData;\n      var count = this.state.weights.count;\n      var aggregationData = count.aggregationData;\n\n      if (!aggregationData) {\n        aggregationData = count.aggregationBuffer.getData();\n        count.aggregationData = aggregationData;\n      }\n\n      var _GPUGridAggregator$ge = _gpuGridAggregator[\"default\"].getCellData({\n        countsData: aggregationData\n      }),\n          cellWeights = _GPUGridAggregator$ge.cellWeights;\n\n      var contourData = (0, _contourUtils.generateContours)({\n        thresholdData: thresholdData,\n        cellWeights: cellWeights,\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n      });\n      this.setState({\n        contourData: contourData\n      });\n    }\n  }, {\n    key: \"_updateThresholdData\",\n    value: function _updateThresholdData(props) {\n      var contours = props.contours,\n          zOffset = props.zOffset;\n      var count = contours.length;\n      var thresholdData = new Array(count);\n\n      for (var i = 0; i < count; i++) {\n        var contour = contours[i];\n        thresholdData[i] = {\n          contour: contour,\n          zIndex: contour.zIndex || i,\n          zOffset: zOffset\n        };\n      }\n\n      this.setState({\n        thresholdData: thresholdData\n      });\n    }\n  }]);\n  return ContourLayer;\n}(_gridAggregationLayer[\"default\"]);\n\nexports[\"default\"] = ContourLayer;\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n//# sourceMappingURL=contour-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_defineProperty2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_layers","_contourUtils","_core","_gpuGridAggregator","_aggregationOperationUtils","_gridAggregationUtils","DEFAULT_COLOR","DIMENSIONS","data","props","weights","accessors","ContourLayer","_GridAggregationLayer","apply","arguments","key","initializeState","_attributeManager$add","prototype","call","dimensions","setState","contourData","projectPoints","count","size","operation","AGGREGATION_OPERATION","SUM","getAttributeManager","attributeManager","add","POSITION_ATTRIBUTE_NAME","accessor","type","fp64","use64bitPositions","updateState","opts","contoursChanged","oldProps","aggregationDirty","state","contours","zOffset","_updateThresholdData","getNumInstances","_generateContours","renderLayers","_this$state$contourDa","contourSegments","contourPolygons","LinesSubLayerClass","getSubLayerClass","LineLayer","BandsSubLayerClass","SolidPolygonLayer","lineLayer","length","getSubLayerProps","id","getSourcePosition","d","start","getTargetPosition","end","getColor","contour","color","getWidth","strokeWidth","DEFAULT_STROKE_WIDTH","bandsLayer","getPolygon","vertices","getFillColor","updateAggregationState","cellSize","coordinateSystem","viewport","context","cellSizeChanged","gpuAggregation","isSupported","gl","log","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","boundingBox","getBoundingBox","getAttributes","_getGridParams","getGridParams","gridOffset","translation","width","height","numCol","numRow","allocateResources","posOffset","slice","gridOrigin","aggregationDataDirty","isAggregationDirty","dimension","compareAll","aggregationWeightsDirty","_updateAccessors","_resetResults","_opts$props","getWeight","aggregation","getValue","getValueFunc","aggregationData","_this$state","thresholdData","aggregationBuffer","getData","cellWeights","getCellData","_GPUGridAggregator$ge","countsData","generateContours","gridSize","xOffset","yOffset","Array","i","zIndex","_gridAggregationLayer","layerName","defaultProps","min","max","getPosition","x","position","threshold","DEFAULT_THRESHOLD"]
}
