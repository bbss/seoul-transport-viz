{
"version":3,
"file":"module$node_modules$$math_DOT_gl$polygon$dist$es5$cut_by_grid.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@math_DOT_gl/polygon/dist/es5/cut-by-grid.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$math_DOT_gl$polygon$dist$es5$cut_by_grid\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cutPolylineByGrid = cutPolylineByGrid;\nexports.cutPolygonByGrid = cutPolygonByGrid;\n\nvar _lineclip = require(\"./lineclip\");\n\nvar _utils = require(\"./utils\");\n\nfunction cutPolylineByGrid(positions) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$size = options.size,\n      size = _options$size === void 0 ? 2 : _options$size,\n      _options$broken = options.broken,\n      broken = _options$broken === void 0 ? false : _options$broken,\n      _options$gridResoluti = options.gridResolution,\n      gridResolution = _options$gridResoluti === void 0 ? 10 : _options$gridResoluti,\n      _options$gridOffset = options.gridOffset,\n      gridOffset = _options$gridOffset === void 0 ? [0, 0] : _options$gridOffset,\n      _options$startIndex = options.startIndex,\n      startIndex = _options$startIndex === void 0 ? 0 : _options$startIndex,\n      _options$endIndex = options.endIndex,\n      endIndex = _options$endIndex === void 0 ? positions.length : _options$endIndex;\n  var numPoints = (endIndex - startIndex) / size;\n  var part = [];\n  var result = [part];\n  var a = (0, _utils.getPointAtIndex)(positions, 0, size, startIndex);\n  var b;\n  var codeB;\n  var cell = getGridCell(a, gridResolution, gridOffset, []);\n  var scratchPoint = [];\n  (0, _utils.push)(part, a);\n\n  for (var i = 1; i < numPoints; i++) {\n    b = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, b);\n    codeB = (0, _lineclip.bitCode)(b, cell);\n\n    while (codeB) {\n      (0, _lineclip.intersect)(a, b, codeB, cell, scratchPoint);\n      var codeAlt = (0, _lineclip.bitCode)(scratchPoint, cell);\n\n      if (codeAlt) {\n        (0, _lineclip.intersect)(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n\n      (0, _utils.push)(part, scratchPoint);\n      (0, _utils.copy)(a, scratchPoint);\n      moveToNeighborCell(cell, gridResolution, codeB);\n\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        (0, _utils.push)(part, a);\n      }\n\n      codeB = (0, _lineclip.bitCode)(b, cell);\n    }\n\n    (0, _utils.push)(part, b);\n    (0, _utils.copy)(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nvar TYPE_INSIDE = 0;\nvar TYPE_BORDER = 1;\n\nfunction cutPolygonByGrid(positions, holeIndices) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!positions.length) {\n    return [];\n  }\n\n  var _options$size2 = options.size,\n      size = _options$size2 === void 0 ? 2 : _options$size2,\n      _options$gridResoluti2 = options.gridResolution,\n      gridResolution = _options$gridResoluti2 === void 0 ? 10 : _options$gridResoluti2,\n      _options$gridOffset2 = options.gridOffset,\n      gridOffset = _options$gridOffset2 === void 0 ? [0, 0] : _options$gridOffset2,\n      _options$edgeTypes = options.edgeTypes,\n      edgeTypes = _options$edgeTypes === void 0 ? false : _options$edgeTypes;\n  var result = [];\n  var queue = [{\n    pos: positions,\n    types: edgeTypes && new Array(positions.length / size).fill(TYPE_BORDER),\n    holes: holeIndices || []\n  }];\n  var bbox = [[], []];\n  var cell = [];\n\n  while (queue.length) {\n    var _queue$shift = queue.shift(),\n        pos = _queue$shift.pos,\n        types = _queue$shift.types,\n        holes = _queue$shift.holes;\n\n    getBoundingBox(pos, size, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    var code = (0, _lineclip.bitCode)(bbox[1], cell);\n\n    if (code) {\n      var parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      var polygonLow = {\n        pos: parts[0].pos,\n        types: parts[0].types,\n        holes: []\n      };\n      var polygonHigh = {\n        pos: parts[1].pos,\n        types: parts[1].types,\n        holes: []\n      };\n      queue.push(polygonLow, polygonHigh);\n\n      for (var i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = polygonLow.pos.concat(parts[0].pos);\n\n          if (edgeTypes) {\n            polygonLow.types = polygonLow.types.concat(parts[0].types);\n          }\n        }\n\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = polygonHigh.pos.concat(parts[1].pos);\n\n          if (edgeTypes) {\n            polygonHigh.types = polygonHigh.types.concat(parts[1].types);\n          }\n        }\n      }\n    } else {\n      var polygon = {\n        positions: pos\n      };\n\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n\n  return result;\n}\n\nfunction bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {\n  var numPoints = (endIndex - startIndex) / size;\n  var resultLow = [];\n  var resultHigh = [];\n  var typesLow = [];\n  var typesHigh = [];\n  var scratchPoint = [];\n  var p;\n  var side;\n  var type;\n  var prev = (0, _utils.getPointAtIndex)(positions, numPoints - 1, size, startIndex);\n  var prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  var prevType = edgeTypes && edgeTypes[numPoints - 1];\n  var lowPointCount = 0;\n  var highPointCount = 0;\n\n  for (var i = 0; i < numPoints; i++) {\n    p = (0, _utils.getPointAtIndex)(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    if (side && prevSide && prevSide !== side) {\n      (0, _lineclip.intersect)(prev, p, edge, bbox, scratchPoint);\n      (0, _utils.push)(resultLow, scratchPoint) && typesLow.push(prevType);\n      (0, _utils.push)(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      (0, _utils.push)(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n\n    if (side >= 0) {\n      (0, _utils.push)(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    (0, _utils.copy)(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [lowPointCount ? {\n    pos: resultLow,\n    types: edgeTypes && typesLow\n  } : null, highPointCount ? {\n    pos: resultHigh,\n    types: edgeTypes && typesHigh\n  } : null];\n}\n\nfunction getGridCell(p, gridResolution, gridOffset, out) {\n  var left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  var bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out;\n}\n\nfunction moveToNeighborCell(cell, gridResolution, edge) {\n  if (edge & 8) {\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(positions, size, out) {\n  var minX = Infinity;\n  var maxX = -Infinity;\n  var minY = Infinity;\n  var maxY = -Infinity;\n\n  for (var i = 0; i < positions.length; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n//# sourceMappingURL=cut-by-grid.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","bisectPolygon","positions","edgeTypes","size","startIndex","endIndex","bbox","edge","numPoints","resultLow","resultHigh","typesLow","typesHigh","scratchPoint","p","side","type","prev","_utils","getPointAtIndex","prevSide","Math","sign","prevType","lowPointCount","highPointCount","i","_lineclip","intersect","push","length","TYPE_INSIDE","copy","pos","types","getGridCell","gridResolution","gridOffset","out","left","floor","bottom","Object","defineProperty","value","cutPolylineByGrid","options","arguments","undefined","_options$size","_options$broken","broken","_options$gridResoluti","_options$gridOffset","_options$startIndex","_options$endIndex","part","result","a","codeB","cell","b","bitCode","codeAlt","cutPolygonByGrid","holeIndices","_options$size2","_options$gridResoluti2","_options$gridOffset2","_options$edgeTypes","queue","Array","fill","TYPE_BORDER","holes","_queue$shift","shift","minX","Infinity","maxX","minY","maxY","x","y","code","parts","polygonLow","polygonHigh","concat","polygon"]
}
