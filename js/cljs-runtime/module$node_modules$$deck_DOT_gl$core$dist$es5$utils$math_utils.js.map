{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$math_utils.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/core/dist/es5/utils/math-utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$core$dist$es5$utils$math_utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMat4 = createMat4;\nexports.mod = mod;\nexports.extractCameraVectors = extractCameraVectors;\nexports.getFrustumPlanes = getFrustumPlanes;\nexports.fp64LowPart = fp64LowPart;\nexports.toDoublePrecisionArray = toDoublePrecisionArray;\n\nvar _typedArrayManager = _interopRequireDefault(require(\"./typed-array-manager\"));\n\nvar _math = require(\"math.gl\");\n\nfunction createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\nfunction mod(value, divisor) {\n  var modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\nfunction extractCameraVectors(_ref) {\n  var viewMatrix = _ref.viewMatrix,\n      viewMatrixInverse = _ref.viewMatrixInverse;\n  return {\n    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],\n    direction: [-viewMatrix[2], -viewMatrix[6], -viewMatrix[10]],\n    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]],\n    right: [viewMatrix[0], viewMatrix[4], viewMatrix[8]]\n  };\n}\n\nvar cameraPosition = new _math.Vector3();\nvar cameraDirection = new _math.Vector3();\nvar cameraUp = new _math.Vector3();\nvar cameraRight = new _math.Vector3();\nvar nearCenter = new _math.Vector3();\nvar farCenter = new _math.Vector3();\nvar a = new _math.Vector3();\n\nfunction getFrustumPlanes(_ref2) {\n  var aspect = _ref2.aspect,\n      near = _ref2.near,\n      far = _ref2.far,\n      fovyRadians = _ref2.fovyRadians,\n      position = _ref2.position,\n      direction = _ref2.direction,\n      up = _ref2.up,\n      right = _ref2.right;\n  cameraDirection.copy(direction);\n  var nearFarScale = 1 / cameraDirection.len();\n  cameraDirection.normalize();\n  cameraPosition.copy(position);\n  cameraUp.copy(up);\n  var widthScale = 1 / cameraUp.len();\n  cameraUp.normalize();\n  cameraRight.copy(right).normalize();\n  var nearHeight = 2 * Math.tan(fovyRadians / 2) * near * widthScale;\n  var nearWidth = nearHeight * aspect;\n  nearCenter.copy(cameraDirection).scale(near * nearFarScale).add(cameraPosition);\n  farCenter.copy(cameraDirection).scale(far * nearFarScale).add(cameraPosition);\n  var normal = cameraDirection.clone().negate();\n  var distance = normal.dot(nearCenter);\n  var planes = {\n    near: {\n      distance: distance,\n      normal: normal\n    },\n    far: {\n      distance: cameraDirection.dot(farCenter),\n      normal: cameraDirection.clone()\n    }\n  };\n  a.copy(cameraRight).scale(nearWidth * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new _math.Vector3(a).cross(cameraUp);\n  distance = cameraPosition.dot(normal);\n  planes.right = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraRight).scale(-nearWidth * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new _math.Vector3(cameraUp).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.left = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraUp).scale(nearHeight * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new _math.Vector3(cameraRight).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.top = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraUp).scale(-nearHeight * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new _math.Vector3(a).cross(cameraRight);\n  distance = cameraPosition.dot(normal);\n  planes.bottom = {\n    normal: normal,\n    distance: distance\n  };\n  return planes;\n}\n\nfunction fp64LowPart(x) {\n  return x - Math.fround(x);\n}\n\nvar scratchArray;\n\nfunction toDoublePrecisionArray(typedArray, _ref3) {\n  var _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? 1 : _ref3$size,\n      _ref3$startIndex = _ref3.startIndex,\n      startIndex = _ref3$startIndex === void 0 ? 0 : _ref3$startIndex,\n      endIndex = _ref3.endIndex;\n\n  if (!Number.isFinite(endIndex)) {\n    endIndex = typedArray.length;\n  }\n\n  var count = (endIndex - startIndex) / size;\n  scratchArray = _typedArrayManager[\"default\"].allocate(scratchArray, count, {\n    type: Float32Array,\n    size: size * 2\n  });\n  var sourceIndex = startIndex;\n  var targetIndex = 0;\n\n  while (sourceIndex < endIndex) {\n    for (var j = 0; j < size; j++) {\n      var value = typedArray[sourceIndex++];\n      scratchArray[targetIndex + j] = value;\n      scratchArray[targetIndex + j + size] = fp64LowPart(value);\n    }\n\n    targetIndex += size * 2;\n  }\n\n  return scratchArray.subarray(0, count * size * 2);\n}\n//# sourceMappingURL=math-utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","fp64LowPart","x","Math","fround","_interopRequireDefault","Object","defineProperty","value","createMat4","mod","divisor","modulus","extractCameraVectors","_ref","viewMatrix","viewMatrixInverse","eye","direction","up","right","getFrustumPlanes","_ref2","aspect","near","far","fovyRadians","position","cameraDirection","copy","nearFarScale","len","normalize","cameraPosition","cameraUp","widthScale","cameraRight","nearHeight","tan","nearWidth","nearCenter","scale","add","farCenter","normal","clone","negate","distance","dot","planes","a","subtract","cross","_math","Vector3","left","top","bottom","toDoublePrecisionArray","typedArray","_ref3","_ref3$size","size","_ref3$startIndex","startIndex","endIndex","Number","isFinite","length","count","scratchArray","_typedArrayManager","allocate","type","Float32Array","targetIndex","sourceIndex","j","subarray"]
}
