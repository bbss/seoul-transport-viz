{
"version":3,
"file":"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_layer.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/@deck_DOT_gl/aggregation-layers/dist/es5/gpu-grid-layer/gpu-grid-layer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$deck_DOT_gl$aggregation_layers$dist$es5$gpu_grid_layer$gpu_grid_layer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _core = require(\"@luma.gl/core\");\n\nvar _core2 = require(\"@deck.gl/core\");\n\nvar _gpuGridAggregator = _interopRequireDefault(require(\"../utils/gpu-grid-aggregation/gpu-grid-aggregator\"));\n\nvar _aggregationOperationUtils = require(\"../utils/aggregation-operation-utils\");\n\nvar _colorUtils = require(\"../utils/color-utils\");\n\nvar _gpuGridCellLayer = _interopRequireDefault(require(\"./gpu-grid-cell-layer\"));\n\nvar _gridAggregator = require(\"./../cpu-grid-layer/grid-aggregator\");\n\nvar _gridAggregationLayer = _interopRequireDefault(require(\"../grid-aggregation-layer\"));\n\nvar _gridAggregationUtils = require(\"../utils/grid-aggregation-utils\");\n\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: _colorUtils.defaultColorRange,\n  getColorWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  colorAggregation: 'SUM',\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {\n    type: 'accessor',\n    value: function value(x) {\n      return 1;\n    }\n  },\n  elevationAggregation: 'SUM',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 1,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  material: true\n};\nvar DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n};\nvar POSITION_ATTRIBUTE_NAME = 'positions';\n\nvar GPUGridLayer = function (_GridAggregationLayer) {\n  (0, _inherits2[\"default\"])(GPUGridLayer, _GridAggregationLayer);\n\n  function GPUGridLayer() {\n    (0, _classCallCheck2[\"default\"])(this, GPUGridLayer);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(GPUGridLayer).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(GPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _attributeManager$add;\n\n      var gl = this.context.gl;\n\n      var isSupported = _gpuGridAggregator[\"default\"].isSupported(gl);\n\n      if (!isSupported) {\n        _core2.log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"initializeState\", this).call(this, {\n        dimensions: DIMENSIONS\n      });\n      this.setState({\n        gpuAggregation: true,\n        projectPoints: false,\n        isSupported: isSupported,\n        weights: {\n          color: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new _core.Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          },\n          elevation: {\n            needMin: true,\n            needMax: true,\n            combineMaxMin: true,\n            maxMinBuffer: new _core.Buffer(gl, {\n              byteLength: 4 * 4,\n              accessor: {\n                size: 4,\n                type: 5126,\n                divisor: 1\n              }\n            })\n          }\n        },\n        positionAttributeName: 'positions'\n      });\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add((_attributeManager$add = {}, (0, _defineProperty2[\"default\"])(_attributeManager$add, POSITION_ATTRIBUTE_NAME, {\n        size: 3,\n        accessor: 'getPosition',\n        type: 5130,\n        fp64: this.use64bitPositions()\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"color\", {\n        size: 3,\n        accessor: 'getColorWeight'\n      }), (0, _defineProperty2[\"default\"])(_attributeManager$add, \"elevation\", {\n        size: 3,\n        accessor: 'getElevationWeight'\n      }), _attributeManager$add));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (this.state.isSupported === false) {\n        return;\n      }\n\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"updateState\", this).call(this, opts);\n      var aggregationDirty = this.state.aggregationDirty;\n\n      if (aggregationDirty) {\n        this.setState({\n          gridHash: null\n        });\n      }\n    }\n  }, {\n    key: \"getHashKeyForIndex\",\n    value: function getHashKeyForIndex(index) {\n      var _this$state = this.state,\n          numRow = _this$state.numRow,\n          numCol = _this$state.numCol,\n          boundingBox = _this$state.boundingBox,\n          gridOffset = _this$state.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);\n      var lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);\n      return \"\".concat(latIdx, \"-\").concat(lonIdx);\n    }\n  }, {\n    key: \"getPositionForIndex\",\n    value: function getPositionForIndex(index) {\n      var _this$state2 = this.state,\n          numRow = _this$state2.numRow,\n          numCol = _this$state2.numCol,\n          boundingBox = _this$state2.boundingBox,\n          gridOffset = _this$state2.gridOffset;\n      var gridSize = [numCol, numRow];\n      var gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n      var cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      var yIndex = Math.floor(index / gridSize[0]);\n      var xIndex = index - yIndex * gridSize[0];\n      var yPos = yIndex * cellSize[1] + gridOrigin[1];\n      var xPos = xIndex * cellSize[0] + gridOrigin[0];\n      return [xPos, yPos];\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref) {\n      var info = _ref.info,\n          mode = _ref.mode;\n      var index = info.index;\n      var object = null;\n\n      if (index >= 0) {\n        var gpuGridAggregator = this.state.gpuGridAggregator;\n        var position = this.getPositionForIndex(index);\n\n        var colorInfo = _gpuGridAggregator[\"default\"].getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('color')));\n\n        var elevationInfo = _gpuGridAggregator[\"default\"].getAggregationData(Object.assign({\n          pixelIndex: index\n        }, gpuGridAggregator.getData('elevation')));\n\n        object = {\n          colorValue: colorInfo.cellWeight,\n          elevationValue: elevationInfo.cellWeight,\n          count: colorInfo.cellCount || elevationInfo.cellCount,\n          position: position,\n          totalCount: colorInfo.totalCount || elevationInfo.totalCount\n        };\n\n        if (mode !== 'hover') {\n          var props = this.props;\n          var gridHash = this.state.gridHash;\n\n          if (!gridHash) {\n            var _this$state3 = this.state,\n                gridOffset = _this$state3.gridOffset,\n                translation = _this$state3.translation,\n                boundingBox = _this$state3.boundingBox;\n            var viewport = this.context.viewport;\n            var attributes = this.getAttributes();\n            var cpuAggregation = (0, _gridAggregator.pointToDensityGridDataCPU)(props, {\n              gridOffset: gridOffset,\n              attributes: attributes,\n              viewport: viewport,\n              translation: translation,\n              boundingBox: boundingBox\n            });\n            gridHash = cpuAggregation.gridHash;\n            this.setState({\n              gridHash: gridHash\n            });\n          }\n\n          var key = this.getHashKeyForIndex(index);\n          var cpuAggregationData = gridHash[key];\n          Object.assign(object, cpuAggregationData);\n        }\n      }\n\n      return Object.assign(info, {\n        picked: Boolean(object),\n        object: object\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.isSupported) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          cellSizeMeters = _this$props.cellSize,\n          coverage = _this$props.coverage,\n          material = _this$props.material,\n          elevationRange = _this$props.elevationRange,\n          colorDomain = _this$props.colorDomain,\n          elevationDomain = _this$props.elevationDomain;\n      var _this$state4 = this.state,\n          weights = _this$state4.weights,\n          numRow = _this$state4.numRow,\n          numCol = _this$state4.numCol,\n          gridOrigin = _this$state4.gridOrigin,\n          gridOffset = _this$state4.gridOffset;\n      var color = weights.color,\n          elevation = weights.elevation;\n      var colorRange = (0, _colorUtils.colorRangeToFlatArray)(this.props.colorRange);\n      var SubLayerClass = this.getSubLayerClass('gpu-grid-cell', _gpuGridCellLayer[\"default\"]);\n      return new SubLayerClass({\n        gridSize: [numCol, numRow],\n        gridOrigin: gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange: colorRange,\n        elevationRange: elevationRange,\n        colorDomain: colorDomain,\n        elevationDomain: elevationDomain,\n        cellSize: cellSizeMeters,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded\n      }, this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }), {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$weights = this.state.weights,\n          color = _this$state$weights.color,\n          elevation = _this$state$weights.elevation;\n      [color, elevation].forEach(function (weight) {\n        var aggregationBuffer = weight.aggregationBuffer,\n            maxMinBuffer = weight.maxMinBuffer;\n        maxMinBuffer[\"delete\"]();\n\n        if (aggregationBuffer) {\n          aggregationBuffer[\"delete\"]();\n        }\n      });\n      (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(GPUGridLayer.prototype), \"finalizeState\", this).call(this);\n    }\n  }, {\n    key: \"updateAggregationState\",\n    value: function updateAggregationState(opts) {\n      var props = opts.props,\n          oldProps = opts.oldProps;\n      var cellSize = props.cellSize,\n          coordinateSystem = props.coordinateSystem;\n      var viewport = this.context.viewport;\n      var cellSizeChanged = oldProps.cellSize !== cellSize;\n      var dimensions = this.state.dimensions;\n      var positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n      var attributesChanged = positionsChanged || this.isAttributeChanged();\n      var boundingBox = this.state.boundingBox;\n\n      if (positionsChanged) {\n        boundingBox = (0, _gridAggregationUtils.getBoundingBox)(this.getAttributes(), this.getNumInstances());\n        this.setState({\n          boundingBox: boundingBox\n        });\n      }\n\n      if (positionsChanged || cellSizeChanged) {\n        var _getGridParams = (0, _gridAggregationUtils.getGridParams)(boundingBox, cellSize, viewport, coordinateSystem),\n            gridOffset = _getGridParams.gridOffset,\n            translation = _getGridParams.translation,\n            width = _getGridParams.width,\n            height = _getGridParams.height,\n            numCol = _getGridParams.numCol,\n            numRow = _getGridParams.numRow;\n\n        this.allocateResources(numRow, numCol);\n        this.setState({\n          gridOffset: gridOffset,\n          translation: translation,\n          gridOrigin: [-1 * translation[0], -1 * translation[1]],\n          width: width,\n          height: height,\n          numCol: numCol,\n          numRow: numRow\n        });\n      }\n\n      var aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n      if (aggregationDataDirty) {\n        this._updateAccessors(opts);\n      }\n\n      this.setState({\n        aggregationDataDirty: aggregationDataDirty\n      });\n    }\n  }, {\n    key: \"_updateAccessors\",\n    value: function _updateAccessors(opts) {\n      var _opts$props = opts.props,\n          colorAggregation = _opts$props.colorAggregation,\n          elevationAggregation = _opts$props.elevationAggregation;\n      var _this$state$weights2 = this.state.weights,\n          color = _this$state$weights2.color,\n          elevation = _this$state$weights2.elevation;\n      color.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[colorAggregation];\n      elevation.operation = _aggregationOperationUtils.AGGREGATION_OPERATION[elevationAggregation];\n    }\n  }]);\n  return GPUGridLayer;\n}(_gridAggregationLayer[\"default\"]);\n\nexports[\"default\"] = GPUGridLayer;\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n//# sourceMappingURL=gpu-grid-layer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","_defineProperty2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_get2","_inherits2","_core","_core2","_gpuGridAggregator","_aggregationOperationUtils","_colorUtils","_gpuGridCellLayer","_gridAggregator","_gridAggregationLayer","_gridAggregationUtils","defaultProps","colorDomain","colorRange","defaultColorRange","getColorWeight","type","x","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","position","extruded","material","DIMENSIONS","data","props","GPUGridLayer","_GridAggregationLayer","apply","arguments","key","initializeState","_attributeManager$add","gl","context","isSupported","log","error","prototype","call","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","Buffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","getAttributeManager","attributeManager","add","POSITION_ATTRIBUTE_NAME","fp64","use64bitPositions","updateState","opts","state","aggregationDirty","gridHash","getHashKeyForIndex","index","_this$state","boundingBox","gridOffset","gridSize","numCol","numRow","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","lonIdx","concat","latIdx","getPositionForIndex","_this$state2","getPickingInfo","_ref","info","mode","object","gpuGridAggregator","colorInfo","getAggregationData","assign","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","_this$state3","translation","viewport","attributes","getAttributes","cpuAggregation","pointToDensityGridDataCPU","cpuAggregationData","picked","renderLayers","_this$props","cellSizeMeters","_this$state4","colorRangeToFlatArray","getSubLayerClass","SubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","finalizeState","_this$state$weights","forEach","weight","updateAggregationState","coordinateSystem","cellSizeChanged","oldProps","positionsChanged","isAttributeChanged","attributesChanged","getBoundingBox","getNumInstances","_getGridParams","getGridParams","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","_opts$props","_this$state$weights2","operation","AGGREGATION_OPERATION","layerName"]
}
